/*
* Copyright (c) 2024 Huawei Technologies Co., Ltd.
* This file is a part of the CANN Open Software.
* Licensed under CANN Open Software License Agreement Version 1.0 (the "License").
* Please refer to the License for details. You may not use this file except in compliance with the License.
* THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED,
* INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE.
* See LICENSE in the root of the software repository for the full text of the License.
 */

#include "kernels/utils/kernel/common.h"
#include "kernels/utils/kernel/common_func.h"
#include "kernels/utils/kernel/simd.h"
#include "kernels/utils/kernel/iterator.h"
#include "kernels/utils/kernel/mma.h"
#include "kernels/utils/kernel/utils.h"
#include "kernel_operator.h"

#ifdef __CCE_KT_TEST__
#define __aicore__
#else
#define __aicore__ [aicore]
#endif

// FFTS Flag
constexpr int32_t QK_READY = 1;
constexpr int32_t SOFTMAX_READY = 2;
constexpr int32_t UPDATE_READY = 3;
constexpr int32_t BIT_SHIFT = 8;
constexpr int32_t SOFTMAX_MAX_LENGTH = 256;

#ifdef __DAV_C220_CUBE__
constexpr int32_t L0AB_HALF_BUF_SIZE = 16384;  // 128 * 128
constexpr int32_t BLOCK_SIZE = 16;
constexpr int32_t CUBE_MATRIX_SIZE = 256;         // 16 * 16
constexpr int32_t L0AB_UINT8_BLOCK_SIZE = 32768;  // 128 * 128 * 2B
constexpr int32_t TMP_SIZE = 32768 * 4;               // 128 * 256
constexpr int32_t TMP_SIZET = 16384;
constexpr int32_t BLOCK_QK = 128;
constexpr int32_t LOCAL_SIZE = 6;

template<typename IN_DATA_TYPE>
class FlashAttentionEncoderHighPrecision {
public:
    __aicore__ __attribute__((always_inline)) inline FlashAttentionEncoderHighPrecision(
        __gm__ uint8_t *__restrict__ sync, __gm__ uint8_t *__restrict__ q_gm,
        __gm__ uint8_t *__restrict__ q_rope_gm,
        __gm__ uint8_t *__restrict__ k_gm, __gm__ uint8_t *__restrict__ k_rope_gm,
        __gm__ uint8_t *__restrict__ v_gm,
        __gm__ uint8_t *__restrict__ layerID_gm, __gm__ uint8_t *__restrict__ s_gm,
        __gm__ uint8_t *__restrict__ p_gm, __gm__ uint8_t *__restrict__ o_tmp_gm,
        __gm__ uint8_t *__restrict__ upo_tmp_gm,
        __gm__ uint8_t *__restrict__ tiling_para_gm) :
                                                       q_gm(q_gm), q_rope_gm(q_rope_gm), s_gm(s_gm), p_gm(p_gm), o_tmp_gm(o_tmp_gm), upo_tmp_gm(upo_tmp_gm),
                                                       tiling_para_gm(tiling_para_gm)
    {
        SetFftsBaseAddr((unsigned long)sync);
        SetPadding<uint64_t>(0);
        SetAtomicnone();
        SetNdpara(1, 0, 0);
        SetMasknorm();

        this->batch_size = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm));
        this->max_seqlen = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 1));
        this->q_heads = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 2));
        this->embd = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 3));
        this->embdv = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 23));
        this->kv_heads = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 4));
        this->is_triu_mask = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 8));
        this->total_q_blk_num = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 9));
        this->tiling_head_size = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 14));
        this->tiling_para_size = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 15));
        this->tilingKey = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 16));
        this->max_kv_seqlen = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 18));
        this->tiling_data_shape = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 24));
        this->group_num = q_heads / kv_heads;
        this->stride_qo = q_heads * 128;
        this->stride_o = q_heads * embdv;
        this->stride_k = kv_heads * 128;
        this->stride_v = kv_heads * embdv;
        if (this->tiling_data_shape == 1)
        {
            this->stride_qo = embd;
            this->stride_o = embdv;
            this->stride_k = embd;
            this->stride_v = embdv;
        }

        this->batch_stride_k = batch_size * max_kv_seqlen * stride_k * 2;
        this->batch_stride_v = batch_size * max_kv_seqlen * stride_v * 2;

        if (layerID_gm != nullptr) {
            uint32_t layer_id = *(__gm__ uint32_t *)layerID_gm;
            this->k_gm = k_gm + layer_id * batch_stride_k;
            this->k_rope_gm = k_rope_gm + layer_id * batch_stride_k / 2;
            this->v_gm = v_gm + layer_id * batch_stride_v;
        } else {
            this->k_gm = k_gm;
            this->k_rope_gm = k_rope_gm;
            this->v_gm = v_gm;
        }

        q_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ IN_DATA_TYPE *>(this->q_gm));
        q_rope_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ IN_DATA_TYPE *>(this->q_rope_gm));
        k_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ IN_DATA_TYPE *>(this->k_gm));
        k_rope_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ IN_DATA_TYPE *>(this->k_rope_gm));
        v_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ IN_DATA_TYPE *>(this->v_gm));
        s_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ float *>(this->s_gm));
        p_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ IN_DATA_TYPE *>(this->p_gm));
        o_tmp_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ float *>(this->o_tmp_gm));
        upo_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ float *>(this->upo_tmp_gm));

        SET_FLAG(MTE1, MTE2, EVENT_ID0);
        SET_FLAG(MTE1, MTE2, EVENT_ID1);
        SET_FLAG(MTE1, MTE2, EVENT_ID2);
        SET_FLAG(MTE1, MTE2, EVENT_ID3);
        SET_FLAG(MTE1, MTE2, EVENT_ID5);
        SET_FLAG(MTE1, MTE2, EVENT_ID6);
        SET_FLAG(M, MTE1, EVENT_ID0);
        SET_FLAG(M, MTE1, EVENT_ID1);
        SET_FLAG(M, MTE1, EVENT_ID2);
        SET_FLAG(M, MTE1, EVENT_ID3);
        SET_FLAG(FIX, M, EVENT_ID0);
        SET_FLAG(FIX, M, EVENT_ID1);
    }

    __aicore__ __attribute__((always_inline)) inline ~FlashAttentionEncoderHighPrecision()
    {
        WAIT_FLAG(MTE1, MTE2, EVENT_ID0);
        WAIT_FLAG(MTE1, MTE2, EVENT_ID1);
        WAIT_FLAG(MTE1, MTE2, EVENT_ID2);
        WAIT_FLAG(MTE1, MTE2, EVENT_ID3);
        WAIT_FLAG(MTE1, MTE2, EVENT_ID5);
        WAIT_FLAG(MTE1, MTE2, EVENT_ID6);
        WAIT_FLAG(M, MTE1, EVENT_ID0);
        WAIT_FLAG(M, MTE1, EVENT_ID1);
        WAIT_FLAG(M, MTE1, EVENT_ID2);
        WAIT_FLAG(M, MTE1, EVENT_ID3);
        WAIT_FLAG(FIX, M, EVENT_ID0);
        WAIT_FLAG(FIX, M, EVENT_ID1);
        PIPE_BARRIER(ALL);
    }

    __aicore__ __attribute__((always_inline)) inline uint32_t GetTilingKey()
    {
        return this->tilingKey;
    }

    __aicore__ __attribute__((always_inline)) inline void LoadDataToCa(
        AscendC::LocalTensor<IN_DATA_TYPE> dst_tensor, AscendC::LocalTensor<IN_DATA_TYPE> src_tensor,
        uint32_t round_k, uint32_t qk_round_m, uint32_t qk_m)
    {
        if (qk_m == 1) {
            l1_to_l0_a<ArchType::ASCEND_V220, IN_DATA_TYPE, false, DataFormat::VECTOR, DataFormat::VECTOR>(
                dst_tensor,
                src_tensor,
                0,
                (round_k + CUBE_MATRIX_SIZE - 1) / CUBE_MATRIX_SIZE, // repeat
                0,
                1,                                                   // srcStride
                0,
                0                                                   // dstStride
            );
        } else {
            for (uint32_t l0a_load_idx = 0; l0a_load_idx < qk_round_m / BLOCK_SIZE; ++l0a_load_idx) {
                l1_to_l0_a<ArchType::ASCEND_V220, IN_DATA_TYPE, false, DataFormat::VECTOR, DataFormat::VECTOR>(
                    dst_tensor[l0a_load_idx * round_k * BLOCK_SIZE],
                    src_tensor[l0a_load_idx * CUBE_MATRIX_SIZE],
                    0,
                    round_k / BLOCK_SIZE,    // repeat
                    0,
                    qk_round_m / BLOCK_SIZE, // srcStride
                    0,
                    0                       // dstStride
                );
            }
        }
    }

    template<bool IS_BF16 = true>
    __aicore__ __attribute__((always_inline)) inline void Run()
    {
        uint64_t cur_batch = 0;
        uint32_t pre_total_q_blk_num = 0;
        uint32_t offset_tiling = tiling_head_size + tiling_para_size * cur_batch;
        uint32_t cur_total_q_blk_num = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 13 + offset_tiling));
        uint32_t process_num = total_q_blk_num * q_heads;
        uint32_t next_process = 0;
        for (uint32_t process = block_idx; process < process_num; process = next_process) {
            while (process >= cur_total_q_blk_num * q_heads) {
                cur_batch++;
                pre_total_q_blk_num = cur_total_q_blk_num;
                offset_tiling += tiling_para_size;
                cur_total_q_blk_num = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 13 + offset_tiling));
            }
            next_process = process + block_num;
            if (is_triu_mask) {
                uint32_t curr_iter = process / block_num;
                next_process = curr_iter % 2 == 1 ? (curr_iter + 1) * block_num + block_idx : (curr_iter + 2) * block_num - 1 - block_idx;
            }
            // get tiling args
            uint32_t q_seqlen = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + offset_tiling));
            uint32_t kv_seqlen = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 1 + offset_tiling));
            if (q_seqlen == 0 || kv_seqlen == 0) {
                continue;
            }
            uint32_t pp_m_scalar = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 2 + offset_tiling));
            uint32_t pp_n_scalar = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 3 + offset_tiling));
            uint32_t addr_q_high32 = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 4 + offset_tiling));
            uint32_t addr_q_loww32 = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 5 + offset_tiling));
            uint64_t addr_q_scalar = (uint64_t)(((uint64_t)addr_q_high32) << 32 | addr_q_loww32);
            uint32_t addr_k_high32 = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 6 + offset_tiling));
            uint32_t addr_k_loww32 = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 7 + offset_tiling));
            uint64_t addr_k_scalar = (uint64_t)(((uint64_t)addr_k_high32) << 32 | addr_k_loww32);
            uint32_t addr_v_high32 = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 8 + offset_tiling));
            uint32_t addr_v_loww32 = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 9 + offset_tiling));
            uint64_t addr_v_scalar = (uint64_t)(((uint64_t)addr_v_high32) << 32 | addr_v_loww32);
            uint32_t process_idx = process - pre_total_q_blk_num * q_heads;
            uint32_t m_idx = process_idx / q_heads;
            uint64_t head_idx = process_idx % q_heads;

            uint32_t m_loop = (q_seqlen + pp_m_scalar - 1) / pp_m_scalar;
            uint32_t n_loop = (kv_seqlen + pp_n_scalar - 1) / pp_n_scalar;

            uint32_t qk_m = (m_idx == (m_loop - 1)) ? (q_seqlen - m_idx * pp_m_scalar) : pp_m_scalar;
            uint32_t qk_round_m = (qk_m + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;

            /**************** pre_load *****************/
            uint32_t qk_n = n_loop == 1 ? kv_seqlen : pp_n_scalar;
            uint32_t qk_round_n = (qk_n + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;

            uint32_t pingpong_flag = 0;
            uint32_t offset = pingpong_flag * L0AB_HALF_BUF_SIZE;

            uint64_t q_offset = addr_q_scalar + head_idx * 128 + m_idx * pp_m_scalar * q_heads * 128;
            uint64_t k_offset = addr_k_scalar + (head_idx / group_num) * 128;
            uint64_t k_rope_offset = addr_k_scalar / 2 + (head_idx / group_num) * 64;
            uint64_t q_rope_offset = addr_q_scalar / 2 + head_idx * 64 + m_idx * pp_m_scalar * q_heads * 64;
            if (tiling_data_shape == 1)
            {
                q_offset = addr_q_scalar + head_idx * embd * max_seqlen+ m_idx * pp_m_scalar * stride_qo;
                k_offset = addr_k_scalar + (head_idx / group_num) * embd * max_kv_seqlen;
            }

            uint32_t loopQK = (this->embd + BLOCK_QK - 1) / BLOCK_QK;
            uint32_t loopV = (this->embdv + BLOCK_QK - 1) / BLOCK_QK;
            uint32_t qk_k = BLOCK_QK;
            uint32_t qk_round_k = BLOCK_QK;

            uint32_t sv_n = n_loop == 1 ? kv_seqlen : pp_n_scalar;
            uint32_t sv_round_n = (sv_n + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;
            uint64_t v_offset = addr_v_scalar + (head_idx / group_num) * embdv;
            if (tiling_data_shape == 1)
            {
                v_offset = addr_v_scalar + (head_idx / group_num) * embdv * max_kv_seqlen;
            }

            uint32_t n_end = n_loop;
            if (is_triu_mask) {
                n_end = m_idx + 1;
            }
            uint32_t s_block_stack = n_end > 4 ? 2 : 1; // Currently not splitting K
            uint32_t launch_delay = s_block_stack * 2;
            uint32_t vect_mod = 2 * launch_delay;
            for (uint32_t n_idx = 0; n_idx < n_end + launch_delay; n_idx += s_block_stack) {
                if (n_idx < n_end) {
                    for (uint32_t split_idx = 0; split_idx < s_block_stack && n_idx + split_idx < n_end; split_idx++) {
                        pingpong_flag = (n_idx + split_idx) % 2;
                        offset = pingpong_flag * L0AB_HALF_BUF_SIZE;
                        if (n_idx + split_idx == (n_loop - 1)) {
                            qk_n = (kv_seqlen - (n_idx + split_idx) * pp_n_scalar);
                            qk_round_n = (qk_n + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;
                        }
                        bool last_split = split_idx == s_block_stack - 1 || n_idx + split_idx == n_end - 1;
                        for(uint32_t k_idx = 0; k_idx < loopQK; k_idx++){
                            uint32_t initc = (k_idx == 0) ? 1 : 0;
                            qk_k = (k_idx == (loopQK - 1))? embd - k_idx * BLOCK_QK : BLOCK_QK;
                            qk_round_k = (qk_k + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;
                            uint64_t q_offsetk = q_offset + BLOCK_QK * k_idx;
                            uint64_t k_offsetk = k_offset + BLOCK_QK * k_idx;
                            WAIT_FLAG(MTE1, MTE2, pingpong_flag + 5);
                            if (k_idx == 0) {
                                if (qk_m == 1) {
                                    gm_to_l1<ArchType::ASCEND_V220, IN_DATA_TYPE, DataFormat::ND, DataFormat::ND>(
                                        l1q_buf_addr_tensor[offset],
                                        q_gm_tensor[q_offsetk],
                                        1,
                                        0,
                                        0,
                                        qk_round_k,              // lenBurst
                                        0,
                                        0
                                    );
                                } else {
                                    gm_to_l1<ArchType::ASCEND_V220, IN_DATA_TYPE, DataFormat::ND, DataFormat::NZ>(
                                        l1q_buf_addr_tensor[offset],
                                        q_gm_tensor[q_offsetk],
                                        qk_m,       // nValue
                                        qk_round_m, // dstNzC0Stride
                                        0,
                                        qk_k,        // dValue
                                        0,
                                        stride_qo  // srcDValue
                                    );
                                }
                            } else {
                                if (qk_m == 1) {
                                    gm_to_l1<ArchType::ASCEND_V220, IN_DATA_TYPE, DataFormat::ND, DataFormat::ND>(
                                        l1q_buf_addr_tensor[offset],
                                        q_rope_gm_tensor[q_rope_offset],
                                        1,
                                        0,
                                        0,
                                        qk_round_k,              // lenBurst
                                        0,
                                        0
                                    );
                                } else {
                                    gm_to_l1<ArchType::ASCEND_V220, IN_DATA_TYPE, DataFormat::ND, DataFormat::NZ>(
                                        l1q_buf_addr_tensor[offset],
                                        q_rope_gm_tensor[q_rope_offset],
                                        qk_m,       // nValue
                                        qk_round_m, // dstNzC0Stride
                                        0,
                                        qk_k,        // dValue
                                        0,
                                        stride_qo / 2 // srcDValue
                                    );
                                }

                            }

                            SET_FLAG(MTE2, MTE1, pingpong_flag);
                            WAIT_FLAG(MTE2, MTE1, pingpong_flag);
                            WAIT_FLAG(M, MTE1, pingpong_flag);
                            LoadDataToCa(l0a_buf_tensor[offset], l1q_buf_addr_tensor[offset], qk_round_k, qk_round_m, qk_m);
                            // *** Prepare K to L1
                            SET_FLAG(MTE1, MTE2, pingpong_flag + 5);
                            SET_FLAG(MTE1, M, pingpong_flag);

                            WAIT_FLAG(MTE1, MTE2, pingpong_flag);
                            if (k_idx == 0) {
                                gm_to_l1<ArchType::ASCEND_V220, IN_DATA_TYPE, DataFormat::ND, DataFormat::NZ>(
                                    l1k_buf_addr_tensor[offset],
                                    k_gm_tensor[k_offsetk],
                                    qk_n,        // nValue
                                    qk_round_n,  // dstNzC0Stride
                                    0,            // dstNzMatrixStride, unused
                                    qk_k,         // dValue
                                    0,            // dstNzMatrixStride, unused
                                    stride_k   // srcDValue
                                );
                            } else {
                                gm_to_l1<ArchType::ASCEND_V220, IN_DATA_TYPE, DataFormat::ND, DataFormat::NZ>(
                                    l1k_buf_addr_tensor[offset],
                                    k_rope_gm_tensor[k_rope_offset],
                                    qk_n,        // nValue
                                    qk_round_n,  // dstNzC0Stride
                                    0,            // dstNzMatrixStride, unused
                                    qk_k,         // dValue
                                    0,            // dstNzMatrixStride, unused
                                    stride_k / 2   // srcDValue
                                );
                            }

                            SET_FLAG(MTE2, MTE1, pingpong_flag + 4);
                            WAIT_FLAG(MTE2, MTE1, pingpong_flag + 4);
                            WAIT_FLAG(M, MTE1, pingpong_flag + 2);
                            l1_to_l0_b<ArchType::ASCEND_V220, IN_DATA_TYPE, false, DataFormat::VECTOR, DataFormat::VECTOR>(
                                l0b_buf_tensor[offset],
                                l1k_buf_addr_tensor[offset],
                                0,
                                qk_round_k * qk_round_n / CUBE_MATRIX_SIZE,  // repeat
                                0,
                                1,                                        // srcStride
                                0,
                                0                                        // dstStride
                            );
                            SET_FLAG(MTE1, MTE2, pingpong_flag);
                            SET_FLAG(MTE1, M, pingpong_flag + 2);

                            WAIT_FLAG(MTE1, M, pingpong_flag);
                            WAIT_FLAG(MTE1, M, pingpong_flag + 2);
                            if (split_idx == 0 && initc) {
                                WAIT_FLAG(FIX, M, EVENT_ID0);
                                WAIT_FLAG(FIX, M, EVENT_ID1);
                            }
                            mmad<ArchType::ASCEND_V220, IN_DATA_TYPE, IN_DATA_TYPE, float, false>(
                                l0c_buf_tensor[split_idx * qk_round_m * pp_n_scalar],
                                l0a_buf_tensor[offset],
                                l0b_buf_tensor[offset],
                                qk_m,  // m
                                qk_n,  // n
                                qk_k,   // k
                                initc      // cmatrixInitVal
                            );
                            PIPE_BARRIER(M);
                            SET_FLAG(M, MTE1, pingpong_flag);
                            SET_FLAG(M, MTE1, pingpong_flag + 2);
                        }
                        k_offset += pp_n_scalar * stride_k;
                        k_rope_offset += pp_n_scalar * stride_k / 2;
                    }
                    SET_FLAG(M, FIX, EVENT_ID0);
                    WAIT_FLAG(M, FIX, EVENT_ID0);
                    uint32_t sv_n_triu = n_end * pp_n_scalar;
                    if (n_idx + s_block_stack > n_end - 1) {
                        sv_n = sv_n_triu > kv_seqlen ? kv_seqlen - n_idx * pp_n_scalar : sv_n_triu - n_idx * pp_n_scalar;
                    } else {
                        sv_n = pp_n_scalar * s_block_stack;
                    }
                    uint32_t sv_round_n = (sv_n + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;
                    // copy S to gm
                    l0c_to_gm<ArchType::ASCEND_V220, DataFormat::ND, float, float>(
                        s_gm_tensor[(uint64_t)block_idx * TMP_SIZE + n_idx % vect_mod * TMP_SIZE / vect_mod],
                        l0c_buf_tensor,
                        qk_m,        // MSize
                        sv_round_n,  // NSize
                        qk_round_m,  // srcStride
                        sv_round_n  // dstStride_dst_D
                    );
                    SET_FLAG(FIX, M, EVENT_ID0);
                    SET_FLAG(FIX, M, EVENT_ID1);
                    FftsCrossCoreSync<PIPE_FIX, 2>(QK_READY);
                }
                if (n_idx >= launch_delay) {
                    uint32_t l0c_pingpong_flag = n_idx % 2;
                    uint32_t l0c_offset = l0c_pingpong_flag * L0AB_HALF_BUF_SIZE;
                    uint32_t sv_n_triu = n_end * pp_n_scalar;
                    if (n_idx + s_block_stack > n_end + launch_delay - 1) {
                        sv_n = sv_n_triu > kv_seqlen ? kv_seqlen - (n_idx - launch_delay) * pp_n_scalar : sv_n_triu - (n_idx - launch_delay) * pp_n_scalar;
                    } else {
                        sv_n = pp_n_scalar * s_block_stack;
                    }
                    uint32_t sv_round_n = (sv_n + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;
                    for(uint32_t k_idx = 0; k_idx < loopV; k_idx++){
                        qk_k = (k_idx == (loopV - 1))? embdv - k_idx * BLOCK_QK : BLOCK_QK;
                        qk_round_k = (qk_k + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;
                        uint64_t v_offsetk = v_offset + BLOCK_QK * k_idx;
                        WAIT_FLAG(MTE1, MTE2, EVENT_ID2);
                        gm_to_l1<ArchType::ASCEND_V220, IN_DATA_TYPE, DataFormat::ND, DataFormat::NZ>(
                            l1v_buf_addr_tensor,
                            v_gm_tensor[v_offsetk],
                            sv_n,        // nValue
                            sv_round_n,  // dstNzC0Stride
                            0,            // dstNzMatrixStride, unused
                            qk_k,         // dValue
                            0,            // dstNzMatrixStride, unused
                            stride_v   // srcDValue
                        );
                        SET_FLAG(MTE2, MTE1, EVENT_ID2);
                        WAIT_FLAG(MTE2, MTE1, EVENT_ID2);
                        WAIT_FLAG(M, MTE1, EVENT_ID2);
                        WAIT_FLAG(M, MTE1, EVENT_ID3);
                        for (uint32_t l0b_load_idx = 0; l0b_load_idx < sv_round_n / BLOCK_SIZE; ++l0b_load_idx) {
                            l1_to_l0_b<ArchType::ASCEND_V220, IN_DATA_TYPE, true, DataFormat::VECTOR, DataFormat::VECTOR>(
                                l0b_buf_tensor[l0b_load_idx * qk_round_k * BLOCK_SIZE],
                                l1v_buf_addr_tensor[l0b_load_idx * CUBE_MATRIX_SIZE],
                                0,
                                qk_round_k / BLOCK_SIZE,     // repeat
                                0,
                                sv_round_n / BLOCK_SIZE,  // srcStride
                                0,
                                0                        // dstStride
                            );
                        }
                        SET_FLAG(MTE1, M, EVENT_ID6);
                        SET_FLAG(MTE1, MTE2, EVENT_ID2);
                        if(k_idx == 0){
                            WaitFlagDev(SOFTMAX_READY);
                            WAIT_FLAG(MTE1, MTE2, EVENT_ID3);
                            if (qk_m == 1) {
                                gm_to_l1<ArchType::ASCEND_V220, IN_DATA_TYPE, DataFormat::ND, DataFormat::ND>(
                                    l1p_buf_addr_tensor,
                                    p_gm_tensor[(uint64_t)block_idx * TMP_SIZE + (n_idx - launch_delay) % vect_mod * TMP_SIZE / vect_mod],
                                    1,
                                    0,
                                    0,
                                    sv_round_n,               // lenBurst
                                    0,
                                    0
                                );
                            } else {
                                gm_to_l1<ArchType::ASCEND_V220, IN_DATA_TYPE, DataFormat::ND, DataFormat::NZ>(
                                    l1p_buf_addr_tensor,
                                    p_gm_tensor[(uint64_t)block_idx * TMP_SIZE + (n_idx - launch_delay) % vect_mod * TMP_SIZE / vect_mod],
                                    qk_m,        // nValue
                                    qk_round_m,  // dstNzC0Stride
                                    0,            // dstNzMatrixStride, unused
                                    sv_n,        // dValue
                                    0,            // dstNzMatrixStride, unused
                                    sv_round_n  // srcDValue
                                );
                            }
                            SET_FLAG(MTE2, MTE1, EVENT_ID3);
                            WAIT_FLAG(MTE2, MTE1, EVENT_ID3);
                            WAIT_FLAG(M, MTE1, EVENT_ID0);
                            WAIT_FLAG(M, MTE1, EVENT_ID1);
                            if (qk_m == 1) {
                                l1_to_l0_a<ArchType::ASCEND_V220, IN_DATA_TYPE, false, DataFormat::VECTOR, DataFormat::VECTOR>(
                                    l0a_buf_tensor,
                                    l1p_buf_addr_tensor,
                                    0,
                                    (sv_round_n + CUBE_MATRIX_SIZE - 1) / CUBE_MATRIX_SIZE,  // repeat
                                    0,
                                    1,                                                       // srcStride
                                    0,
                                    0                                                       // dstStride
                                );
                            } else {
                                for (uint32_t l0a_load_idx = 0; l0a_load_idx < qk_round_m / BLOCK_SIZE; ++l0a_load_idx) {
                                    l1_to_l0_a<ArchType::ASCEND_V220, IN_DATA_TYPE, false, DataFormat::VECTOR, DataFormat::VECTOR>(
                                        l0a_buf_tensor[l0a_load_idx * sv_round_n * BLOCK_SIZE],
                                        l1p_buf_addr_tensor[l0a_load_idx * CUBE_MATRIX_SIZE],
                                        0,
                                        sv_round_n / BLOCK_SIZE,  // repeat
                                        0,
                                        qk_round_m / BLOCK_SIZE,  // srcStride
                                        0,
                                        0                        // dstStride
                                    );
                                }
                            }
                            SET_FLAG(MTE1, MTE2, EVENT_ID3);
                        }
                        SET_FLAG(MTE1, M, EVENT_ID5);
                        WAIT_FLAG(MTE1, M, EVENT_ID6);
                        WAIT_FLAG(MTE1, M, EVENT_ID5);
                        WAIT_FLAG(FIX, M, l0c_pingpong_flag);
                        mmad<ArchType::ASCEND_V220, IN_DATA_TYPE, IN_DATA_TYPE, float, false>(
                            l0c_buf_tensor[l0c_offset],
                            l0a_buf_tensor,
                            l0b_buf_tensor,
                            qk_m,  // m
                            qk_k,   // n
                            sv_n,  // k
                            1      // cmatrixInitVal
                        );
                        PIPE_BARRIER(M);
                        if(k_idx == loopV - 1){
                            SET_FLAG(M, MTE1, EVENT_ID0);
                            SET_FLAG(M, MTE1, EVENT_ID1);
                        }
                        SET_FLAG(M, MTE1, EVENT_ID2);
                        SET_FLAG(M, MTE1, EVENT_ID3);
                        SET_FLAG(M, FIX, l0c_pingpong_flag);
                        WAIT_FLAG(M, FIX, l0c_pingpong_flag);
                        // copy O to gm
                        l0c_to_gm<ArchType::ASCEND_V220, DataFormat::ND, float, float>(
                            o_tmp_gm_tensor[(uint64_t)block_idx * TMP_SIZE * LOCAL_SIZE + k_idx * TMP_SIZET + (n_idx - launch_delay) % vect_mod * TMP_SIZE / vect_mod * loopV],
                            l0c_buf_tensor[l0c_offset],
                            qk_m,        // MSize
                            qk_round_k,     // NSize
                            qk_round_m,  // srcStride
                            qk_round_k     // dstStride_dst_D
                        );
                        SET_FLAG(FIX, M, l0c_pingpong_flag);
                    }
                    FftsCrossCoreSync<PIPE_FIX, 2>(UPDATE_READY);
                    v_offset += sv_n * stride_v;
                }
            }
        }
    }

private:
    __gm__ uint8_t *__restrict__ q_gm{nullptr};
    __gm__ uint8_t *__restrict__ q_rope_gm{nullptr};
    __gm__ uint8_t *__restrict__ k_gm{nullptr};
    __gm__ uint8_t *__restrict__ k_rope_gm{nullptr};
    __gm__ uint8_t *__restrict__ v_gm{nullptr};
    __gm__ uint8_t *__restrict__ s_gm{nullptr};
    __gm__ uint8_t *__restrict__ p_gm{nullptr};
    __gm__ uint8_t *__restrict__ o_tmp_gm{nullptr};
    __gm__ uint8_t *__restrict__ upo_tmp_gm{nullptr};
    __gm__ uint8_t *__restrict__ tiling_para_gm{nullptr};


    const uint32_t l1q_buf_addr_offset = 0;
    const uint32_t l1k_buf_addr_offset = 2 * L0AB_UINT8_BLOCK_SIZE;
    const uint32_t l1p_buf_addr_offset = 4 * L0AB_UINT8_BLOCK_SIZE;
    const uint32_t l1v_buf_addr_offset = 6 * L0AB_UINT8_BLOCK_SIZE;

    AsdopsBuffer<ArchType::ASCEND_V220> buf;

    AscendC::LocalTensor<IN_DATA_TYPE> l1q_buf_addr_tensor = buf.GetBuffer<BufferType::ASCEND_CB, IN_DATA_TYPE>(l1q_buf_addr_offset);
    AscendC::LocalTensor<IN_DATA_TYPE> l1k_buf_addr_tensor = buf.GetBuffer<BufferType::ASCEND_CB, IN_DATA_TYPE>(l1k_buf_addr_offset);
    AscendC::LocalTensor<IN_DATA_TYPE> l1p_buf_addr_tensor = buf.GetBuffer<BufferType::ASCEND_CB, IN_DATA_TYPE>(l1p_buf_addr_offset);
    AscendC::LocalTensor<IN_DATA_TYPE> l1v_buf_addr_tensor = buf.GetBuffer<BufferType::ASCEND_CB, IN_DATA_TYPE>(l1v_buf_addr_offset);

    AscendC::GlobalTensor<IN_DATA_TYPE> q_gm_tensor;
    AscendC::GlobalTensor<IN_DATA_TYPE> q_rope_gm_tensor;
    AscendC::GlobalTensor<IN_DATA_TYPE> k_gm_tensor;
    AscendC::GlobalTensor<IN_DATA_TYPE> k_rope_gm_tensor;
    AscendC::GlobalTensor<IN_DATA_TYPE> v_gm_tensor;
    AscendC::GlobalTensor<float> s_gm_tensor;
    AscendC::GlobalTensor<IN_DATA_TYPE> p_gm_tensor;
    AscendC::GlobalTensor<float> o_tmp_gm_tensor;
    AscendC::GlobalTensor<float> upo_gm_tensor;

    AscendC::LocalTensor<IN_DATA_TYPE> l0a_buf_tensor = buf.GetBuffer<BufferType::ASCEND_L0A, IN_DATA_TYPE>(0);
    AscendC::LocalTensor<IN_DATA_TYPE> l0b_buf_tensor = buf.GetBuffer<BufferType::ASCEND_L0B, IN_DATA_TYPE>(0);
    AscendC::LocalTensor<float> l0c_buf_tensor = buf.GetBuffer<BufferType::ASCEND_L0C, float>(0);

    uint32_t batch_size{0};
    uint32_t max_seqlen{0};
    uint32_t max_kv_seqlen{0};
    uint32_t q_heads{0};
    uint32_t embd{0};
    uint32_t embdv{0};
    uint32_t kv_heads{0};
    uint32_t is_triu_mask{0};
    uint32_t total_q_blk_num{0};
    uint32_t group_num{0};
    uint64_t stride_qo{0};
    uint64_t stride_o{0};
    uint64_t stride_k{0};
    uint64_t stride_v{0};
    uint64_t batch_stride_v{0};
    uint64_t batch_stride_k{0};

    uint32_t tilingKey{0};
    uint32_t tiling_head_size{0};
    uint32_t tiling_para_size{0};
    uint32_t tiling_data_shape{0};
};
extern "C" __global__ __aicore__ void ring_mla_prefill_bf16(
    __gm__ uint8_t *__restrict__ sync,
    __gm__ uint8_t *__restrict__ q_gm,
    __gm__ uint8_t *__restrict__ q_rope_gm,
    __gm__ uint8_t *__restrict__ k_gm,
    __gm__ uint8_t *__restrict__ k_rope_gm,
    __gm__ uint8_t *__restrict__ v_gm,
    __gm__ uint8_t *__restrict__ layerID_gm,
    __gm__ uint8_t *__restrict__ mask_gm,
    __gm__ uint8_t *__restrict__ alibi_coeff_gm,
    __gm__ uint8_t *__restrict__ deq_qk_gm,
    __gm__ uint8_t *__restrict__ off_qk_gm,
    __gm__ uint8_t *__restrict__ deq_pv_gm,
    __gm__ uint8_t *__restrict__ off_pv_gm,
    __gm__ uint8_t *__restrict__ quant_p_gm,
    __gm__ uint8_t *__restrict__ logN_gm,
    __gm__ uint8_t *__restrict__ o_prev,
    __gm__ uint8_t *__restrict__ lse_prev,
    __gm__ uint8_t *__restrict__ o_gm,
    __gm__ uint8_t *__restrict__ lse_gm,
    __gm__ uint8_t *__restrict__ s_gm,
    __gm__ uint8_t *__restrict__ p_gm,
    __gm__ uint8_t *__restrict__ o_tmp_gm,
    __gm__ uint8_t *__restrict__ upo_tmp_gm,
    __gm__ uint8_t *__restrict__ tiling_para_gm)
{
    uint32_t tilingKey = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 16));
    // 仅在tilingKey为1的时候是bf，其余场景均当做half处理
    if (tilingKey == 1) {
        FlashAttentionEncoderHighPrecision<__bf16> fa_cube(sync, q_gm, q_rope_gm, k_gm, k_rope_gm, v_gm, layerID_gm, s_gm, p_gm, o_tmp_gm, upo_tmp_gm, tiling_para_gm);
        fa_cube.Run<true>();
    } else {
        FlashAttentionEncoderHighPrecision<half> fa_cube(sync, q_gm, q_rope_gm, k_gm, k_rope_gm, v_gm, layerID_gm, s_gm, p_gm, o_tmp_gm, upo_tmp_gm, tiling_para_gm);
        fa_cube.Run<false>();
    }
}

#elif __DAV_C220_VEC__
constexpr int32_t BLOCK_SIZE = 16;
constexpr int32_t FLOAT_BLOCK_SIZE = 8;
constexpr int32_t VECTOR_SIZE = 128;
constexpr int32_t FLOAT_VECTOR_SIZE = 64;
constexpr int32_t UB_UINT8_BLOCK_SIZE = 16384;  // 64 * 128 * 2B
constexpr int32_t UB_HALF_BUF_SIZE = 8192;
constexpr int32_t UB_bf16_BUF_SIZE = 8192;      // 64 * 128
constexpr int32_t UB_UINT8_LINE_SIZE = 512;     // 128 * 4B
constexpr int32_t UB_FLOAT_LINE_SIZE = 64;     // 128
constexpr int32_t UB_HALF_LINE_SIZE = 128;       // UB_FLOAT_LINE_SIZE * 2
constexpr int32_t TMP_SIZE = 32768 * 4;             // 128 * 256
constexpr int32_t BASE_MASK_SIZE = 128;
constexpr int32_t COMPRESS_MASK_SIZE = 8192; // 64 * 128
constexpr int32_t TMP_SIZET = 16384;
constexpr int32_t BLOCK_QK = 128;
constexpr float BASE_Y = 128;
constexpr int32_t LOCAL_SIZE = 6;

template<typename IN_DATA_TYPE>
class FlashAttentionEncoderHighPrecisionVec {
public:
    __aicore__ __attribute__((always_inline)) inline FlashAttentionEncoderHighPrecisionVec(
        __gm__ uint8_t *__restrict__ sync, __gm__ uint8_t *__restrict__ mask_gm,
        __gm__ uint8_t *__restrict__ alibi_coeff_gm,
        __gm__ uint8_t *__restrict__ o_gm, __gm__ uint8_t *__restrict__ s_gm,
        __gm__ uint8_t *__restrict__ p_gm, __gm__ uint8_t *__restrict__ o_tmp_gm,
        __gm__ uint8_t *__restrict__ upo_tmp_gm,
        __gm__ uint8_t *__restrict__ tiling_para_gm,
        __gm__ uint8_t *__restrict__ o_prev,__gm__ uint8_t *__restrict__ lse_prev,__gm__ uint8_t *__restrict__ lse_gm)
        : mask_gm(mask_gm), o_gm(o_gm), alibi_coeff_gm(alibi_coeff_gm), s_gm(s_gm), p_gm(p_gm), o_tmp_gm(o_tmp_gm), upo_tmp_gm(upo_tmp_gm), tiling_para_gm(tiling_para_gm),o_prev(o_prev), lse_prev(lse_prev), lse_gm(lse_gm)
    {
        SetFftsBaseAddr((unsigned long)sync);
        SetAtomicnone();
        SetMasknorm();
        SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);

        this->sub_block_idx = GetSubBlockidx();
        this->batch_size = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm));
        this->max_seqlen = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 1));
        this->q_heads = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 2));
        this->embd = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 3));
        this->embdv = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 23));
        this->tor = (float)(*((__gm__ float *)tiling_para_gm + 5));
        this->head_stride = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 6));
        this->mask_stride = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 7));
        this->is_triu_mask = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 8));
        this->total_q_blk_num = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 9));
        this->isClamp = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 10));
        this->clampMin = (float)(*((__gm__ float *)tiling_para_gm + 11));
        this->clampMax = (float)(*((__gm__ float *)tiling_para_gm + 12));
        this->tiling_head_size = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 14));
        this->tiling_para_size = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 15));
        this->tilingKey = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 16));
        this->long_seq = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 17));
        this->is_sqrt = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 19));
        this->mask_type = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 20));
        this->alibi_compress_offset = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 21));
        this->alibi_left_align = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 22));

        this->tiling_data_shape_type = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 24));
        this->stride_qo = q_heads * embdv;

        if (tiling_data_shape_type == 1)
        {
            this->stride_qo = embdv;
        }


        SET_FLAG(MTE3, MTE2, EVENT_ID0);
        SET_FLAG(MTE3, MTE2, EVENT_ID1);
        SET_FLAG(MTE3, MTE2, EVENT_ID2);
        SET_FLAG(V, MTE2, EVENT_ID0);
        SET_FLAG(V, MTE2, EVENT_ID1);
        SET_FLAG(V, MTE2, EVENT_ID2);
//        SET_FLAG(V, MTE2, EVENT_ID4);
        SET_FLAG(V, MTE2, EVENT_ID5);
        SET_FLAG(MTE3, V, EVENT_ID0);
    }
    __aicore__ __attribute__((always_inline)) inline ~FlashAttentionEncoderHighPrecisionVec()
    {
        WAIT_FLAG(MTE3, MTE2, EVENT_ID0);
        WAIT_FLAG(MTE3, MTE2, EVENT_ID1);
        WAIT_FLAG(MTE3, MTE2, EVENT_ID2);
        WAIT_FLAG(V, MTE2, EVENT_ID0);
        WAIT_FLAG(V, MTE2, EVENT_ID1);
        WAIT_FLAG(V, MTE2, EVENT_ID2);
        WAIT_FLAG(MTE3, V, EVENT_ID0);
//        WAIT_FLAG(V, MTE2, EVENT_ID4);
        WAIT_FLAG(V, MTE2, EVENT_ID5);
        PIPE_BARRIER(ALL);
    }

    __aicore__ __attribute__((always_inline)) inline uint32_t GetTilingKey()
    {
        return this->tilingKey;
    }

    __aicore__ __attribute__((always_inline)) inline void __set_mask(int32_t len)
    {
        uint64_t mask = 0;
        uint64_t one = 1;
        uint64_t temp = len % FLOAT_VECTOR_SIZE;
        for (int64_t i = 0; i < temp; i++) {
            mask |= one << i;
        }

        if (len == VECTOR_SIZE || len == 0) {
            SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
        } else if (len >= FLOAT_VECTOR_SIZE) {
            SetVectorMask<int8_t>(mask, (uint64_t)-1);
        } else {
            SetVectorMask<int8_t>(0x0, mask);
        }
    }

    __aicore__ __attribute__((always_inline)) inline void __set_vcg_mask(int32_t len)
    {
        if (len > 16 || len < 1) {
            SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
            return;
        }
        uint64_t subMask = ((uint64_t) 1 << len) - 1;
        uint64_t maskValue = (subMask << 48) + (subMask << 32) + (subMask << 16) + subMask +
                             (subMask << 56) + (subMask << 40) + (subMask << 24) + (subMask << 8);
        SetVectorMask<int8_t>(maskValue, maskValue);
    }

    template<bool IS_BF16 = true>
    __aicore__ __attribute__((always_inline)) inline void Run()
    {

        uint64_t cur_batch = 0;
        uint32_t pre_total_q_blk_num = 0;
        uint32_t offset_tiling = tiling_head_size + tiling_para_size * cur_batch;
        uint32_t cur_total_q_blk_num = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 13 + offset_tiling));
        uint32_t process_num = total_q_blk_num * q_heads;
        float alibi_coeff = 1;

        mask_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ IN_DATA_TYPE *>(mask_gm));
        o_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ IN_DATA_TYPE *>(o_gm));
        s_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ float *>(s_gm));
        p_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ IN_DATA_TYPE *>(p_gm));
        o_tmp_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ float *>(o_tmp_gm));
        upo_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ float *>(upo_tmp_gm));

        lse_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ float *>(lse_gm));
        lse_prev_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ float *>(lse_prev));
        o_prev_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ IN_DATA_TYPE *>(o_prev));

        uint32_t loopV = (embdv + BLOCK_QK - 1) / BLOCK_QK;
        uint32_t qk_k = BLOCK_QK;
        uint32_t qk_round_k = BLOCK_QK;

        uint32_t next_process = 0;
        for (uint32_t process = block_idx; process < process_num; process = next_process) {
            while (process >= cur_total_q_blk_num * q_heads) {
                cur_batch++;
                pre_total_q_blk_num = cur_total_q_blk_num;
                offset_tiling += tiling_para_size;
                cur_total_q_blk_num = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 13 + offset_tiling));
            }
            next_process = process + block_num;
            if (is_triu_mask) {
                uint32_t curr_iter = process / block_num;
                next_process = curr_iter % 2 == 1 ? (curr_iter + 1) * block_num + block_idx : (curr_iter + 2) * block_num - 1 - block_idx;
            }

            // get tiling args
            uint32_t q_seqlen = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + offset_tiling));
            uint32_t kv_seqlen = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 1 + offset_tiling));
            if (q_seqlen == 0 || kv_seqlen == 0) {
                continue;
            }
            uint32_t pp_m_scalar = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 2 + offset_tiling));
            uint32_t pp_n_scalar = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 3 + offset_tiling));
            uint32_t addr_o_high32 = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 10 + offset_tiling));
            uint32_t addr_o_loww32 = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 11 + offset_tiling));
            uint64_t addr_o_scalar = (uint64_t)(((uint64_t)addr_o_high32) << 32 | addr_o_loww32);
            uint32_t isRing = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 37));
            uint32_t n_tokens = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 38));

            uint32_t process_idx = process - pre_total_q_blk_num * q_heads;
            uint32_t m_idx = process_idx / q_heads;
            uint64_t head_idx = process_idx % q_heads;
            if (alibi_coeff_gm !=nullptr) {
                alibi_coeff = (float)(*((__gm__ float *)alibi_coeff_gm + head_idx));
            }

            uint32_t m_loop = (q_seqlen + pp_m_scalar - 1) / pp_m_scalar;
            uint32_t n_loop = (kv_seqlen + pp_n_scalar - 1) / pp_n_scalar;

            uint32_t qk_m = (m_idx == (m_loop - 1)) ? (q_seqlen - m_idx * pp_m_scalar) : pp_m_scalar;
            uint32_t sub_m = (sub_block_idx == 1) ? (qk_m - qk_m / 2) : qk_m / 2;
            uint32_t sub_m_d128 = (sub_m + VECTOR_SIZE - 1) / VECTOR_SIZE;            // up aligned to 128
            uint32_t sub_m_d64 = (sub_m + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE; // up aligned to 64
            uint32_t round_sub_m = (sub_m + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;

            /******** pre_load *******/
            uint32_t qk_n = n_loop == 1 ? kv_seqlen : pp_n_scalar;
            uint32_t qk_round_n = (qk_n + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;

            uint64_t mask_batch_offset = cur_batch * mask_stride * max_seqlen;
            uint64_t mask_head_offset = head_idx * head_stride * max_seqlen;
            uint64_t mask_offset = mask_batch_offset + mask_head_offset;
            uint32_t delta_uint = 0;
            float base_y = -128;
            float delta = 0;

            if (long_seq == 0) {
                mask_offset += m_idx * pp_m_scalar * max_seqlen;
            } else {
                gm_to_ub<ArchType::ASCEND_V220, IN_DATA_TYPE>(
                    mask16_ubuf_tensor,
                    mask_gm_tensor[(uint64_t)sub_block_idx * qk_m / 2 * VECTOR_SIZE],
                    0,                                // sid
                    sub_m,                                // nBurst
                    VECTOR_SIZE / BLOCK_SIZE,  // lenBurst
                    0,                                // srcGap
                    0                                 // dstGap
                );
                SET_FLAG(MTE2, V, EVENT_ID0);
                WAIT_FLAG(MTE2, V, EVENT_ID0);
                conv_v<ArchType::ASCEND_V220, IN_DATA_TYPE, float>(
                    mask_ubuf_tensor,
                    mask16_ubuf_tensor,
                    sub_m * VECTOR_SIZE / FLOAT_VECTOR_SIZE, // repeat
                    1, // dstBlockStride
                    1, // srcBlockStride
                    8, // dstRepeatStride
                    4  // srcRepeatStride
                );
                PIPE_BARRIER(V);
                muls_v<ArchType::ASCEND_V220, float>(
                    mask_ubuf_tensor,
                    mask_ubuf_tensor, (float)-3e38,
                    sub_m * VECTOR_SIZE / FLOAT_VECTOR_SIZE, // repeat
                    1,                                                                // dstBlockStride
                    1,                                                                // srcBlockStride
                    8,                                                                // dstRepeatStride
                    8                                                                 // srcRepeatStride
                );
                PIPE_BARRIER(V);
            }

            uint64_t o_offset = addr_o_scalar + head_idx * embdv + m_idx * pp_m_scalar * stride_qo;
            uint64_t lse_offset = head_idx * n_tokens + addr_o_scalar / q_heads / embdv + m_idx * pp_m_scalar;
            uint32_t lenBurst = sizeof(float);
            uint32_t qk_k = BLOCK_QK;

            if(tiling_data_shape_type == 1){
                o_offset = addr_o_scalar + head_idx * embdv * max_seqlen + m_idx * pp_m_scalar * stride_qo;
            }
            uint32_t n_end = n_loop;
            if (is_triu_mask) {
                n_end = m_idx + 1;
            }
            uint32_t qk_n_triu = n_end * pp_n_scalar;
            uint32_t s_block_stack = n_end > 4 ? 2 : 1;
            uint32_t launch_delay = s_block_stack * 2;
            uint32_t vect_mod = 2 * launch_delay;
            uint32_t m_slice = sub_m > 32 ? 32 : 0; // s_block_stack=2时，UB可以放下
            uint32_t m_end = sub_m > 32 ? 2 : 1;
            for (uint32_t n_idx = 0; n_idx < n_end + launch_delay; n_idx += s_block_stack) {
                if (n_idx < n_end) {
                    if (n_idx + s_block_stack > n_end - 1) {
                        qk_n = qk_n_triu > kv_seqlen ? kv_seqlen - n_idx * pp_n_scalar : qk_n_triu - n_idx * pp_n_scalar;
                    } else {
                        qk_n = pp_n_scalar * s_block_stack;
                    }
                    qk_round_n = (qk_n + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;
                    if (qk_n <= VECTOR_SIZE) {
                        if (sub_m > 0 && mask_type != 0) {
                            if (alibi_coeff_gm != nullptr) {
                                if (alibi_left_align == 0) {
                                    if (n_idx == n_end - 1) {
                                        mask_offset = 0;
                                        delta_uint = 0;
                                        delta = 0;
                                    } else {
                                        mask_offset = BASE_MASK_SIZE * max_seqlen;
                                        delta_uint = m_idx * pp_m_scalar - n_idx * pp_n_scalar;
                                        delta = base_y + delta_uint;
                                    }
                                } else {
                                    if (n_idx == n_end - 1) {
                                        mask_offset = 0;
                                    } else {
                                        mask_offset = BASE_MASK_SIZE * max_seqlen;
                                    }
                                    delta = -base_y * n_idx;
                                }
                            } else if (mask_type == 2 && alibi_compress_offset > 0) {
                                if (n_idx == n_end - 1) {
                                    mask_offset = head_idx * alibi_compress_offset * BASE_MASK_SIZE;
                                } else {
                                    delta_uint = m_idx * pp_m_scalar - n_idx * pp_n_scalar;
                                    mask_offset = BASE_MASK_SIZE * delta_uint + head_idx * alibi_compress_offset * BASE_MASK_SIZE;
                                }
                            }
                            if (long_seq == 0) {
                                WAIT_FLAG(V, MTE2, EVENT_ID1);
                                gm_to_ub_align<ArchType::ASCEND_V220, IN_DATA_TYPE>(
                                    mask16_ubuf_tensor,
                                    mask_gm_tensor[mask_offset + sub_block_idx * qk_m / 2 * max_seqlen],
                                    0,                       // sid
                                    sub_m,                   // nBurst
                                    qk_n * 2,                // lenBurst
                                    0,                       // leftPaddingNum
                                    0,                       // rightPaddingNum
                                    (max_seqlen - qk_n) * 2, // srcGap
                                    0                        // dstGap
                                );
                                SET_FLAG(MTE2, V, EVENT_ID1);
                                mask_offset += qk_n;
                                WAIT_FLAG(MTE2, V, EVENT_ID1);
                                conv_v<ArchType::ASCEND_V220, IN_DATA_TYPE, float>(
                                    mask_ubuf_tensor, mask16_ubuf_tensor,
                                    (sub_m * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                    1,                                                                // dstBlockStride
                                    1,                                                                // srcBlockStride
                                    8,                                                                // dstRepeatStride
                                    4                                                                 // srcRepeatStride
                                );
                                if (alibi_coeff_gm != nullptr) {
                                    PIPE_BARRIER(V);
                                    if (is_sqrt == 1 && m_idx != n_idx) {
                                        mul_v<ArchType::ASCEND_V220, float>(
                                            mask_ubuf_tensor,
                                            mask_ubuf_tensor,
                                            mask_ubuf_tensor,
                                            (sub_m * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                            1,         // dstBlockStride
                                            1,         // src0BlockStride
                                            1,         // src1BlockStride
                                            8,         // dstRepeatStride
                                            8,         // src0RepeatStride
                                            8          // src1RepeatStride
                                        );
                                        PIPE_BARRIER(V);
                                    }
                                    adds_v<ArchType::ASCEND_V220, float>(
                                        mask_ubuf_tensor,
                                        mask_ubuf_tensor,
                                        (float)delta,
                                        (sub_m * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                        1,                                                                // dstBlockStride
                                        1,                                                                // srcBlockStride
                                        8,                                                                // dstRepeatStride
                                        8                                                                 // srcRepeatStride
                                    );
                                    PIPE_BARRIER(V);
                                    if (is_sqrt == 1 && m_idx != n_idx) {
                                        sqrt_v<ArchType::ASCEND_V220, float>(
                                            mask_ubuf_tensor,
                                            mask_ubuf_tensor,
                                            (sub_m * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                            1,                                                                // dstBlockStride
                                            1,                                                                // srcBlockStride
                                            8,                                                                // dstRepeatStride
                                            8                                                                 // srcRepeatStride
                                        );
                                        PIPE_BARRIER(V);
                                    }
                                    muls_v<ArchType::ASCEND_V220, float>(mask_ubuf_tensor, mask_ubuf_tensor, (float)alibi_coeff,
                                                                         (sub_m * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                                                         1,                                                                // dstBlockStride
                                                                         1,                                                                // srcBlockStride
                                                                         8,                                                                // dstRepeatStride
                                                                         8                                                                 // srcRepeatStride
                                    );
                                }
                                PIPE_BARRIER(V);
                                if (head_stride == 0 && mask_type != 2) {
                                    muls_v<ArchType::ASCEND_V220, float>(
                                        mask_ubuf_tensor,
                                        mask_ubuf_tensor,
                                        (float)-3e38,
                                        (sub_m * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                        1, // dstBlockStride
                                        1, // srcBlockStride
                                        8, // dstRepeatStride
                                        8  // srcRepeatStride
                                    );
                                    PIPE_BARRIER(V);
                                }
                            }
                        }
                        WaitFlagDev(QK_READY);
                        if (sub_m > 0) {
                            WAIT_FLAG(MTE3, MTE2, EVENT_ID0);
                            // input QK
                            gm_to_ub<ArchType::ASCEND_V220, float>(
                                ls_ubuf_tensor,
                                s_gm_tensor[(uint64_t)block_idx * TMP_SIZE + n_idx % vect_mod * TMP_SIZE / vect_mod +
                                            (uint64_t)sub_block_idx * qk_m / 2 * qk_round_n],
                                0,                                // sid
                                sub_m,                                // nBurst
                                qk_round_n / FLOAT_BLOCK_SIZE,  // lenBurst
                                0,                                // srcGap
                                0                                 // dstGap
                            );
                            SET_FLAG(MTE2, V, EVENT_ID0);
                            WAIT_FLAG(MTE2, V, EVENT_ID0);
                            // *** ls = tor * ls
                            muls_v<ArchType::ASCEND_V220, float>(ls_ubuf_tensor, ls_ubuf_tensor, tor,
                                                                 (sub_m * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                                                 1,                                                                // dstBlockStride
                                                                 1,                                                                // srcBlockStride
                                                                 8,                                                                // dstRepeatStride
                                                                 8                                                                 // srcRepeatStride
                            );
                            PIPE_BARRIER(V);

                            if (isClamp == 1) {
                                // get min(clampMin，ls_ubuf)
                                maxs_v<ArchType::ASCEND_V220, float>(ls_ubuf_tensor, ls_ubuf_tensor,
                                                                     clampMin,
                                                                     (sub_m * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                                                     1,                                                                // dstBlockStride
                                                                     1,                                                                // srcBlockStride
                                                                     8,                                                                // dstRepeatStride
                                                                     8                                                                 // srcRepeatStride
                                );
                                PIPE_BARRIER(V);

                                // get max(clampMin，ls_ubuf)
                                mins_v<ArchType::ASCEND_V220, float>(ls_ubuf_tensor, ls_ubuf_tensor,
                                                                     clampMax,
                                                                     (sub_m * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                                                     1,                                                                // dstBlockStride
                                                                     1,                                                                // srcBlockStride
                                                                     8,                                                                // dstRepeatStride
                                                                     8                                                                 // srcRepeatStride
                                );
                                PIPE_BARRIER(V);
                            }

                            // *** ls = ls + mask
                            if (mask_type != 0) {
                                if (long_seq == 0) {
                                    add_v<ArchType::ASCEND_V220, float>(
                                        ls_ubuf_tensor,
                                        ls_ubuf_tensor,
                                        mask_ubuf_tensor,
                                        (sub_m * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                        1,                                                                // dstBlockStride
                                        1,                                                                // src0BlockStride
                                        1,                                                                // src1BlockStride
                                        8,                                                                // dstRepeatStride
                                        8,                                                                // src0RepeatStride
                                        8                                                                 // src1RepeatStride
                                    );
                                    SET_FLAG(V, MTE2, EVENT_ID1);
                                } else if (pp_n_scalar == FLOAT_VECTOR_SIZE && s_block_stack == 2 && n_idx == n_end - 2) {
                                    __set_mask(qk_n - FLOAT_VECTOR_SIZE);
                                    add_v<ArchType::ASCEND_V220, float>(
                                        ls_ubuf_tensor[FLOAT_VECTOR_SIZE],
                                        ls_ubuf_tensor[FLOAT_VECTOR_SIZE],
                                        mask_ubuf_tensor,
                                        sub_m, // repeat
                                        1,                                                                // dstBlockStride
                                        1,                                                                // src0BlockStride
                                        1,                                                                // src1BlockStride
                                        qk_round_n / FLOAT_BLOCK_SIZE,                                                                // dstRepeatStride
                                        qk_round_n / FLOAT_BLOCK_SIZE,                                                                // src0RepeatStride
                                        16                                                                 // src1RepeatStride
                                    );
                                } else if (n_idx == n_end - 1) {
                                    if (qk_n < FLOAT_VECTOR_SIZE){
                                        __set_mask(qk_n);
                                    } else {
                                        __set_mask(FLOAT_VECTOR_SIZE);
                                    }
                                    add_v<ArchType::ASCEND_V220, float>(
                                        ls_ubuf_tensor,
                                        ls_ubuf_tensor,
                                        mask_ubuf_tensor,
                                        sub_m, // repeat
                                        1,                                                                // dstBlockStride
                                        1,                                                                // src0BlockStride
                                        1,                                                                // src1BlockStride
                                        qk_round_n / FLOAT_BLOCK_SIZE,                                                                // dstRepeatStride
                                        qk_round_n / FLOAT_BLOCK_SIZE,                                                                // src0RepeatStride
                                        16                                                                 // src1RepeatStride
                                    );
                                    if (qk_n > FLOAT_VECTOR_SIZE) {
                                        __set_mask(qk_n - FLOAT_VECTOR_SIZE);
                                        add_v<ArchType::ASCEND_V220, float>(
                                            ls_ubuf_tensor[FLOAT_VECTOR_SIZE],
                                            ls_ubuf_tensor[FLOAT_VECTOR_SIZE],
                                            mask_ubuf_tensor[FLOAT_VECTOR_SIZE],
                                            sub_m, // repeat
                                            1,                                                                // dstBlockStride
                                            1,                                                                // src0BlockStride
                                            1,                                                                // src1BlockStride
                                            qk_round_n / FLOAT_BLOCK_SIZE,                                                                // dstRepeatStride
                                            qk_round_n / FLOAT_BLOCK_SIZE,                                                                // src0RepeatStride
                                            16                                                                 // src1RepeatStride
                                        );
                                    }
                                }
                                PIPE_BARRIER(V);
                                SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
                            }
                            // *** lm = rowmax(ls)
                            if (qk_n <= FLOAT_VECTOR_SIZE) {
                                __set_mask(qk_n % FLOAT_VECTOR_SIZE);
                                cgmax_v<ArchType::ASCEND_V220, float>(
                                    tv_ubuf_tensor,
                                    ls_ubuf_tensor,
                                    sub_m,
                                    1,
                                    1,
                                    qk_round_n / FLOAT_BLOCK_SIZE
                                );
                                PIPE_BARRIER(V);
                                __set_vcg_mask((qk_n + FLOAT_BLOCK_SIZE - 1)/ FLOAT_BLOCK_SIZE);
                                cgmax_v<ArchType::ASCEND_V220, float>(
                                    lm_ubuf_tensor,
                                    tv_ubuf_tensor,
                                    (sub_m * FLOAT_BLOCK_SIZE + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE,
                                    1,
                                    1,
                                    8
                                );
                                PIPE_BARRIER(V);
                                SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
                            } else {
                                cgmax_v<ArchType::ASCEND_V220, float>(tv_ubuf_tensor, ls_ubuf_tensor,
                                                                      sub_m,
                                                                      1,
                                                                      1,
                                                                      qk_round_n / 8
                                );
                                PIPE_BARRIER(V);
                                cgmax_v<ArchType::ASCEND_V220, float>(lm_ubuf_tensor, tv_ubuf_tensor,
                                                                      round_sub_m * 8 / 64,
                                                                      1,
                                                                      1,
                                                                      8
                                );
                                PIPE_BARRIER(V);
                                for (uint32_t rowMaxIdx = 1; rowMaxIdx < qk_n / FLOAT_VECTOR_SIZE; ++rowMaxIdx) {
                                    cgmax_v<ArchType::ASCEND_V220, float>(
                                        tv_ubuf_tensor,
                                        ls_ubuf_tensor[rowMaxIdx * FLOAT_VECTOR_SIZE],
                                        sub_m,
                                        1,
                                        1,
                                        qk_round_n / 8
                                    );
                                    PIPE_BARRIER(V);
                                    cgmax_v<ArchType::ASCEND_V220, float>(tv_ubuf_tensor, tv_ubuf_tensor,
                                                                          round_sub_m * 8 / 64,
                                                                          1,
                                                                          1,
                                                                          8
                                    );
                                    PIPE_BARRIER(V);
                                    __set_mask(sub_m);
                                    max_v<ArchType::ASCEND_V220, float>(lm_ubuf_tensor, lm_ubuf_tensor,
                                                                        tv_ubuf_tensor,
                                                                        1,                        // repeat
                                                                        1,                            // dstBlockStride
                                                                        1,                            // src0BlockStride
                                                                        1,                            // src1BlockStride
                                                                        8,                            // dstRepeatStride
                                                                        8,                            // src0RepeatStride
                                                                        8 // src1RepeatStride
                                    );
                                    PIPE_BARRIER(V);
                                }
                                if (qk_n % FLOAT_VECTOR_SIZE > 0) {
                                    __set_mask(qk_n % FLOAT_VECTOR_SIZE);
                                    cgmax_v<ArchType::ASCEND_V220, float>(
                                        tv_ubuf_tensor,
                                        ls_ubuf_tensor[qk_n / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
                                        sub_m,
                                        1,
                                        1,
                                        qk_round_n / 8
                                    );
                                    PIPE_BARRIER(V);
                                    __set_vcg_mask((qk_n % FLOAT_VECTOR_SIZE + FLOAT_BLOCK_SIZE - 1)/ FLOAT_BLOCK_SIZE);
                                    cgmax_v<ArchType::ASCEND_V220, float>(tv_ubuf_tensor, tv_ubuf_tensor,
                                                                          round_sub_m * 8 / 64,
                                                                          1,
                                                                          1,
                                                                          8
                                    );
                                    PIPE_BARRIER(V);
                                    __set_mask(sub_m);
                                    max_v<ArchType::ASCEND_V220, float>(lm_ubuf_tensor, lm_ubuf_tensor,
                                                                        tv_ubuf_tensor,
                                                                        1,                        // repeat
                                                                        1,                            // dstBlockStride
                                                                        1,                            // src0BlockStride
                                                                        1,                            // src1BlockStride
                                                                        8,                            // dstRepeatStride
                                                                        8,                            // src0RepeatStride
                                                                        8 // src1RepeatStride
                                    );
                                }
                                SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
                            }
                            PIPE_BARRIER(V);
                            if (n_idx == 0) {
                                // *** hm = lm
                                ub_to_ub<ArchType::ASCEND_V220, float>(
                                    hm_ubuf_tensor,
                                    lm_ubuf_tensor,
                                    0,                              // sid
                                    1,                              // nBurst
                                    round_sub_m / FLOAT_BLOCK_SIZE, // lenBurst
                                    0,                              // srcGap
                                    0                               // dstGap
                                );
                                PIPE_BARRIER(V);
                            } else {
                                // *** hm = vmax(lm, gm)
                                max_v<ArchType::ASCEND_V220, float>(
                                    hm_ubuf_tensor,
                                    lm_ubuf_tensor,
                                    gm_ubuf_tensor,
                                    sub_m_d64, // repeat
                                    1,         // dstBlockStride
                                    1,         // src0BlockStride
                                    1,         // src1BlockStride
                                    8,         // dstRepeatStride
                                    8,         // src0RepeatStride
                                    8          // src1RepeatStride
                                );
                                PIPE_BARRIER(V);
                                // *** dm = gm - hm
                                sub_v<ArchType::ASCEND_V220, float>(
                                    dm_ubuf_tensor[(n_idx / s_block_stack) % 4 * UB_FLOAT_LINE_SIZE],
                                    gm_ubuf_tensor,
                                    hm_ubuf_tensor,
                                    sub_m_d64, // repeat
                                    1,         // dstBlockStride
                                    1,         // src0BlockStride
                                    1,         // src1BlockStride
                                    8,         // dstRepeatStride
                                    8,         // src0RepeatStride
                                    8          // src1RepeatStride
                                );
                                PIPE_BARRIER(V);
                                // *** dm = exp(dm)
                                exp_v<ArchType::ASCEND_V220, float>(
                                    dm_ubuf_tensor[(n_idx / s_block_stack) % 4 * UB_FLOAT_LINE_SIZE],
                                    dm_ubuf_tensor[(n_idx / s_block_stack) % 4 * UB_FLOAT_LINE_SIZE],
                                    sub_m_d64, // repeat
                                    1,         // dstBlockStride
                                    1,         // srcBlockStride
                                    8,         // dstRepeatStride
                                    8          // srcRepeatStride
                                );
                            }
                            // *** gm = hm
                            ub_to_ub<ArchType::ASCEND_V220, float>(
                                gm_ubuf_tensor,
                                hm_ubuf_tensor,
                                0,                              // sid
                                1,                              // nBurst
                                round_sub_m / FLOAT_BLOCK_SIZE, // lenBurst
                                0,                              // srcGap
                                0                               // dstGap
                            );
                            PIPE_BARRIER(V);
                            // *** hm_block = expand_to_block(hm), 存放于 tv
                            brcb_v<ArchType::ASCEND_V220, uint32_t>(
                                tv_ubuf_tensor.ReinterpretCast<uint32_t>(),
                                hm_ubuf_tensor.ReinterpretCast<uint32_t>(),
                                1,                             // dstBlockStride
                                8,                             // dstRepeatStride
                                round_sub_m / FLOAT_BLOCK_SIZE // repeat
                            );
                            PIPE_BARRIER(V);
                            // *** ls = ls - hm_block
                            for (uint32_t vsub_idx = 0; vsub_idx < qk_n / FLOAT_VECTOR_SIZE; ++vsub_idx) {
                                sub_v<ArchType::ASCEND_V220, float>(
                                    ls_ubuf_tensor[vsub_idx * FLOAT_VECTOR_SIZE],
                                    ls_ubuf_tensor[vsub_idx * FLOAT_VECTOR_SIZE],
                                    tv_ubuf_tensor,
                                    sub_m,                         // repeat
                                    1,                             // dstBlockStride
                                    1,                             // src0BlockStride
                                    0,                             // src1BlockStride
                                    qk_round_n / FLOAT_BLOCK_SIZE, // dstRepeatStride
                                    qk_round_n / FLOAT_BLOCK_SIZE, // src0RepeatStride
                                    1                              // src1RepeatStride
                                );
                            }
                            if (qk_n % FLOAT_VECTOR_SIZE > 0) {
                                __set_mask(qk_n % FLOAT_VECTOR_SIZE);
                                sub_v<ArchType::ASCEND_V220, float>(
                                    ls_ubuf_tensor[qk_n / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
                                    ls_ubuf_tensor[qk_n / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
                                    tv_ubuf_tensor,
                                    sub_m,                         // repeat
                                    1,                             // dstBlockStride
                                    1,                             // src0BlockStride
                                    0,                             // src1BlockStride
                                    qk_round_n / FLOAT_BLOCK_SIZE, // dstRepeatStride
                                    qk_round_n / FLOAT_BLOCK_SIZE, // src0RepeatStride
                                    1                              // src1RepeatStride
                                );
                                SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
                            }
                            PIPE_BARRIER(V);
                            // *** ls = exp(ls)
                            exp_v<ArchType::ASCEND_V220, float>(
                                ls32_ubuf_tensor,
                                ls_ubuf_tensor,
                                (sub_m * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                1,                                                                // dstBlockStride
                                1,                                                                // srcBlockStride
                                8,                                                                // dstRepeatStride
                                8                                                                 // srcRepeatStride
                            );
                            PIPE_BARRIER(V);
                            // *** lp = castfp32to16(ls)
                            if (IS_BF16) {
                                convr_v<ArchType::ASCEND_V220, float, IN_DATA_TYPE>(
                                    lp_ubuf_tensor.ReinterpretCast<IN_DATA_TYPE>(),
                                    ls32_ubuf_tensor,
                                    (sub_m * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                    1, // dstBlockStride
                                    1, // srcBlockStride
                                    4, // dstRepeatStride
                                    8  // srcRepeatStride
                                );
                            } else {
                                conv_v<ArchType::ASCEND_V220, float, IN_DATA_TYPE>(
                                    lp_ubuf_tensor.ReinterpretCast<IN_DATA_TYPE>(),
                                    ls32_ubuf_tensor,
                                    (sub_m * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                    1, // dstBlockStride
                                    1, // srcBlockStride
                                    4, // dstRepeatStride
                                    8  // srcRepeatStride
                                );
                            }
                            PIPE_BARRIER(V);

                            SET_FLAG(V, MTE3, EVENT_ID0);
                            WAIT_FLAG(V, MTE3, EVENT_ID0);
                            ub_to_gm<ArchType::ASCEND_V220, IN_DATA_TYPE>(
                                p_gm_tensor[(uint64_t)block_idx * TMP_SIZE + n_idx % vect_mod * TMP_SIZE / vect_mod +
                                            (uint64_t)sub_block_idx * qk_m / 2 * qk_round_n],
                                lp_ubuf_tensor.ReinterpretCast<IN_DATA_TYPE>(),
                                0,                               // sid
                                1,                               // nBurst
                                sub_m * qk_round_n / BLOCK_SIZE, // lenBurst
                                0,                               // srcGap
                                0                                // dstGap
                            );
                            SET_FLAG(MTE3, MTE2, EVENT_ID0);
                            // *** ll = rowsum(ls32)
                            if (qk_n <= FLOAT_VECTOR_SIZE) {
                                __set_mask(qk_n);
                                cadd_v<ArchType::ASCEND_V220, float>(
                                    ll_ubuf_tensor,
                                    ls32_ubuf_tensor,
                                    sub_m,                         // repeat
                                    1,                             // dstRepeatStride
                                    1,                             // srcBlockStride
                                    qk_round_n / FLOAT_BLOCK_SIZE  // srcRepeatStride
                                );
                                SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
                            } else {
                                for (uint32_t rowSumIdx = 1; rowSumIdx < qk_n / FLOAT_VECTOR_SIZE; ++rowSumIdx) {
                                    add_v<ArchType::ASCEND_V220, float>(
                                        ls32_ubuf_tensor,
                                        ls32_ubuf_tensor,
                                        ls32_ubuf_tensor[rowSumIdx * FLOAT_VECTOR_SIZE],
                                        sub_m,                         // repeat
                                        1,                             // dstBlockStride
                                        1,                             // src0BlockStride
                                        1,                             // src1BlockStride
                                        qk_round_n / FLOAT_BLOCK_SIZE, // dstRepeatStride
                                        qk_round_n / FLOAT_BLOCK_SIZE, // src0RepeatStride
                                        qk_round_n / FLOAT_BLOCK_SIZE  // src1RepeatStride
                                    );
                                    PIPE_BARRIER(V);
                                }
                                if (qk_n % FLOAT_VECTOR_SIZE > 0) {
                                    __set_mask(qk_n % FLOAT_VECTOR_SIZE);
                                    add_v<ArchType::ASCEND_V220, float>(
                                        ls32_ubuf_tensor,
                                        ls32_ubuf_tensor,
                                        ls32_ubuf_tensor[qk_n / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
                                        sub_m,                         // repeat
                                        1,                             // dstBlockStride
                                        1,                             // src0BlockStride
                                        1,                             // src1BlockStride
                                        qk_round_n / FLOAT_BLOCK_SIZE, // dstRepeatStride
                                        qk_round_n / FLOAT_BLOCK_SIZE, // src0RepeatStride
                                        qk_round_n / FLOAT_BLOCK_SIZE  // src1RepeatStride
                                    );
                                }
                                SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
                                PIPE_BARRIER(V);
                                cadd_v<ArchType::ASCEND_V220, float>(
                                    ll_ubuf_tensor,
                                    ls32_ubuf_tensor,
                                    sub_m,                         // repeat
                                    1,                             // dstRepeatStride
                                    1,                             // srcBlockStride
                                    qk_round_n / FLOAT_BLOCK_SIZE  // srcRepeatStride
                                );
                            }
                            PIPE_BARRIER(V);
                            if (n_idx == 0) {
                                // *** gl = ll
                                ub_to_ub<ArchType::ASCEND_V220, float>(
                                    gl_ubuf_tensor,
                                    ll_ubuf_tensor,
                                    0,                              // sid
                                    1,                              // nBurst
                                    round_sub_m / FLOAT_BLOCK_SIZE, // lenBurst
                                    0,                              // srcGap
                                    0                               // dstGap
                                );
                                PIPE_BARRIER(V);
                            } else {
                                // *** gl = dm * gl
                                mul_v<ArchType::ASCEND_V220, float>(
                                    gl_ubuf_tensor,
                                    dm_ubuf_tensor[(n_idx / s_block_stack) % 4 * UB_FLOAT_LINE_SIZE],
                                    gl_ubuf_tensor,
                                    sub_m_d64, // repeat
                                    1,         // dstBlockStride
                                    1,         // src0BlockStride
                                    1,         // src1BlockStride
                                    8,         // dstRepeatStride
                                    8,         // src0RepeatStride
                                    8          // src1RepeatStride
                                );
                                PIPE_BARRIER(V);
                                // *** gl = ll + gl
                                add_v<ArchType::ASCEND_V220, float>(
                                    gl_ubuf_tensor,
                                    gl_ubuf_tensor,
                                    ll_ubuf_tensor,
                                    sub_m_d64, // repeat
                                    1,         // dstBlockStride
                                    1,         // src0BlockStride
                                    1,         // src1BlockStride
                                    8,         // dstRepeatStride
                                    8,         // src0RepeatStride
                                    8          // src1RepeatStride
                                );
                                PIPE_BARRIER(V);
                            }
                        }
                    }
                    else {
                        bool last_n_loop = n_idx + s_block_stack > n_end - 1;
                        for (uint32_t split_idx = 0; split_idx < m_end; split_idx++) {
                            bool last_m_loop = split_idx == m_end - 1;
                            uint32_t m_split =  last_m_loop ? sub_m - split_idx * m_slice : m_slice;
                            uint32_t round_m_split = (m_split + FLOAT_BLOCK_SIZE - 1) / FLOAT_BLOCK_SIZE * FLOAT_BLOCK_SIZE;
                            if (sub_m > 0 && mask_type != 0 && long_seq == 0) {
                                WAIT_FLAG(V, MTE2, EVENT_ID1);
                                uint64_t mask_offset_tail = 0;
                                if (alibi_coeff_gm != nullptr) {
                                    mask_offset = BASE_MASK_SIZE * SOFTMAX_MAX_LENGTH;
                                    if (alibi_left_align == 0) {
                                        delta = base_y * (n_idx + 1 - m_idx);
                                    } else {
                                        delta = -base_y * n_idx;
                                    }
                                    gm_to_ub<ArchType::ASCEND_V220, IN_DATA_TYPE>(
                                        mask16_ubuf_tensor,
                                        mask_gm_tensor[mask_offset + (sub_block_idx * qk_m / 2 + split_idx * m_slice) * SOFTMAX_MAX_LENGTH],
                                        0,                                // sid
                                        m_split,                                // nBurst
                                        qk_round_n / BLOCK_SIZE,  // lenBurst
                                        (SOFTMAX_MAX_LENGTH - qk_round_n) / BLOCK_SIZE, // srcGap
                                        0                                 // dstGap
                                    );
                                } else if (mask_type == 2 && alibi_compress_offset > 0) {
                                    delta_uint = m_idx * pp_m_scalar - n_idx * pp_n_scalar;
                                    mask_offset = BASE_MASK_SIZE * delta_uint + head_idx * alibi_compress_offset * BASE_MASK_SIZE;
                                    mask_offset_tail = mask_offset - BASE_MASK_SIZE * pp_n_scalar;
                                    if (n_idx == n_end - 2) {
                                        mask_offset_tail = head_idx * alibi_compress_offset * BASE_MASK_SIZE;
                                    }
                                    gm_to_ub<ArchType::ASCEND_V220, IN_DATA_TYPE>(
                                        mask16_ubuf_tensor,
                                        mask_gm_tensor[mask_offset + (sub_block_idx * qk_m / 2 + split_idx * m_slice) * VECTOR_SIZE],
                                        0,                                // sid
                                        m_split,                                // nBurst
                                        8,  // lenBurst
                                        0, // srcGap
                                        (qk_round_n - VECTOR_SIZE)/ BLOCK_SIZE                                 // dstGap
                                    );
                                    gm_to_ub<ArchType::ASCEND_V220, IN_DATA_TYPE>(
                                        mask16_ubuf_tensor[VECTOR_SIZE],
                                        mask_gm_tensor[mask_offset_tail + (sub_block_idx * qk_m / 2 + split_idx * m_slice) * VECTOR_SIZE],
                                        0,                                // sid
                                        m_split,                                // nBurst
                                        (qk_round_n - VECTOR_SIZE)/ BLOCK_SIZE,  // lenBurst
                                        (SOFTMAX_MAX_LENGTH - qk_round_n)/ BLOCK_SIZE, // srcGap
                                        8                                 // dstGap
                                    );
                                } else {
                                    gm_to_ub_align<ArchType::ASCEND_V220, IN_DATA_TYPE>(
                                        mask16_ubuf_tensor,
                                        mask_gm_tensor[mask_offset + (sub_block_idx * qk_m / 2 + split_idx * m_slice) * max_seqlen],
                                        0,                       // sid
                                        m_split,                   // nBurst
                                        qk_n * 2,                // lenBurst
                                        0,                       // leftPaddingNum
                                        0,                       // rightPaddingNum
                                        (max_seqlen - qk_n) * 2, // srcGap
                                        0                        // dstGap
                                    );
                                }
                                SET_FLAG(MTE2, V, EVENT_ID1);
                            }
                            if (split_idx == 0) {
                                WaitFlagDev(QK_READY);
                            }
                            if (sub_m > 0) {
                                if (m_split > 0) {
                                    if (mask_type != 0 && long_seq == 0) {
                                        WAIT_FLAG(MTE2, V, EVENT_ID1);
                                        conv_v<ArchType::ASCEND_V220, IN_DATA_TYPE, float>(
                                            mask_ubuf_tensor,
                                            mask16_ubuf_tensor,
                                            (m_split * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                            1,                                                                // dstBlockStride
                                            1,                                                                // srcBlockStride
                                            8,                                                                // dstRepeatStride
                                            4                                                                 // srcRepeatStride
                                        );
                                        SET_FLAG(V, MTE2, EVENT_ID1);
                                        if (alibi_coeff_gm != nullptr) {
                                            PIPE_BARRIER(V);
                                            if (n_idx != n_end - 2) {
                                                if (is_sqrt == 1) {
                                                    mul_v<ArchType::ASCEND_V220, float>(
                                                        mask_ubuf_tensor,
                                                        mask_ubuf_tensor,
                                                        mask_ubuf_tensor,
                                                        (m_split * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                                        1,         // dstBlockStride
                                                        1,         // src0BlockStride
                                                        1,         // src1BlockStride
                                                        8,         // dstRepeatStride
                                                        8,         // src0RepeatStride
                                                        8          // src1RepeatStride
                                                    );
                                                    PIPE_BARRIER(V);
                                                }
                                                adds_v<ArchType::ASCEND_V220, float>(
                                                    mask_ubuf_tensor,
                                                    mask_ubuf_tensor,
                                                    (float)delta,
                                                    (m_split * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                                    1,                                                                // dstBlockStride
                                                    1,                                                                // srcBlockStride
                                                    8,                                                                // dstRepeatStride
                                                    8                                                                 // srcRepeatStride
                                                );
                                                PIPE_BARRIER(V);
                                                if (alibi_left_align == 1) {
                                                    adds_v<ArchType::ASCEND_V220, float>(
                                                        mask_ubuf_tensor[128],
                                                        mask_ubuf_tensor,
                                                        (float)-base_y,
                                                        m_split, // repeat
                                                        1,                                                                // dstBlockStride
                                                        1,                                                                // srcBlockStride
                                                        qk_round_n / 8,                                                                // dstRepeatStride
                                                        qk_round_n / 8                                                                 // srcRepeatStride
                                                    );
                                                    adds_v<ArchType::ASCEND_V220, float>(
                                                        mask_ubuf_tensor[128 + FLOAT_VECTOR_SIZE],
                                                        mask_ubuf_tensor[FLOAT_VECTOR_SIZE],
                                                        (float)-base_y,
                                                        m_split, // repeat
                                                        1,                                                                // dstBlockStride
                                                        1,                                                                // srcBlockStride
                                                        qk_round_n / 8,                                                                // dstRepeatStride
                                                        qk_round_n / 8                                                                 // srcRepeatStride
                                                    );
                                                } else {
                                                    adds_v<ArchType::ASCEND_V220, float>(
                                                        mask_ubuf_tensor[128],
                                                        mask_ubuf_tensor,
                                                        base_y,
                                                        m_split, // repeat
                                                        1,                                                                // dstBlockStride
                                                        1,                                                                // srcBlockStride
                                                        qk_round_n / 8,                                                                // dstRepeatStride
                                                        qk_round_n / 8                                                                 // srcRepeatStride
                                                    );
                                                    adds_v<ArchType::ASCEND_V220, float>(
                                                        mask_ubuf_tensor[128 + FLOAT_VECTOR_SIZE],
                                                        mask_ubuf_tensor[FLOAT_VECTOR_SIZE],
                                                        base_y,
                                                        m_split, // repeat
                                                        1,                                                                // dstBlockStride
                                                        1,                                                                // srcBlockStride
                                                        qk_round_n / 8,                                                                // dstRepeatStride
                                                        qk_round_n / 8                                                                 // srcRepeatStride
                                                    );
                                                }
                                                PIPE_BARRIER(V);
                                                if (is_sqrt == 1) {
                                                    sqrt_v<ArchType::ASCEND_V220, float>(
                                                        mask_ubuf_tensor,
                                                        mask_ubuf_tensor,
                                                        (m_split * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                                        1,                                                                // dstBlockStride
                                                        1,                                                                // srcBlockStride
                                                        8,                                                                // dstRepeatStride
                                                        8                                                                 // srcRepeatStride
                                                    );
                                                    PIPE_BARRIER(V);
                                                }
                                            } else if (alibi_left_align == 1) {
                                                adds_v<ArchType::ASCEND_V220, float>(
                                                    mask_ubuf_tensor,
                                                    mask_ubuf_tensor,
                                                    (float)delta,
                                                    (m_split * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                                    1,                                                                // dstBlockStride
                                                    1,                                                                // srcBlockStride
                                                    8,                                                                // dstRepeatStride
                                                    8                                                                 // srcRepeatStride
                                                );
                                                PIPE_BARRIER(V);
                                            }

                                            muls_v<ArchType::ASCEND_V220, float>(
                                                mask_ubuf_tensor,
                                                mask_ubuf_tensor,
                                                (float)alibi_coeff,
                                                (m_split * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                                1,                                                                // dstBlockStride
                                                1,                                                                // srcBlockStride
                                                8,                                                                // dstRepeatStride
                                                8                                                                 // srcRepeatStride
                                            );
                                        }
                                        PIPE_BARRIER(V);
                                        if (head_stride == 0 && mask_type != 2) {
                                            muls_v<ArchType::ASCEND_V220, float>(
                                                mask_ubuf_tensor,
                                                mask_ubuf_tensor,
                                                (float)-3e38,
                                                (m_split * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                                1, // dstBlockStride
                                                1, // srcBlockStride
                                                8, // dstRepeatStride
                                                8  // srcRepeatStride
                                            );
                                            PIPE_BARRIER(V);
                                        }
                                    }
                                    WAIT_FLAG(MTE3, MTE2, EVENT_ID0);
                                    // input QK
                                    gm_to_ub<ArchType::ASCEND_V220, float>(
                                        ls_ubuf_tensor,
                                        s_gm_tensor[(uint64_t)block_idx * TMP_SIZE + n_idx % vect_mod * TMP_SIZE / vect_mod +
                                                    (uint64_t)(sub_block_idx * qk_m / 2 + split_idx * m_slice) * qk_round_n],
                                        0,                                // sid
                                        m_split,                                // nBurst
                                        qk_round_n / FLOAT_BLOCK_SIZE,  // lenBurst
                                        0,                                // srcGap
                                        0                                 // dstGap
                                    );
                                    SET_FLAG(MTE2, V, EVENT_ID0);
                                    WAIT_FLAG(MTE2, V, EVENT_ID0);
                                    // *** ls = tor * ls
                                    muls_v<ArchType::ASCEND_V220, float>(
                                        ls_ubuf_tensor,
                                        ls_ubuf_tensor,
                                        tor,
                                        (m_split * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                        1,                                                                // dstBlockStride
                                        1,                                                                // srcBlockStride
                                        8,                                                                // dstRepeatStride
                                        8                                                                 // srcRepeatStride
                                    );
                                    PIPE_BARRIER(V);
                                    if (isClamp == 1) {
                                        // get min(clampMin，ls_ubuf)
                                        maxs_v<ArchType::ASCEND_V220, float>(
                                            ls_ubuf_tensor,
                                            ls_ubuf_tensor,
                                            clampMin,
                                            (m_split * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                            1,                                                                // dstBlockStride
                                            1,                                                                // srcBlockStride
                                            8,                                                                // dstRepeatStride
                                            8                                                                 // srcRepeatStride
                                        );
                                        PIPE_BARRIER(V);
                                        // get max(clampMin，ls_ubuf)
                                        mins_v<ArchType::ASCEND_V220, float>(
                                            ls_ubuf_tensor,
                                            ls_ubuf_tensor,
                                            clampMax,
                                            (m_split * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                            1,                                                                // dstBlockStride
                                            1,                                                                // srcBlockStride
                                            8,                                                                // dstRepeatStride
                                            8                                                                 // srcRepeatStride
                                        );
                                        PIPE_BARRIER(V);
                                    }
                                    // *** ls = ls + mask
                                    if (mask_type != 0) {
                                        if (long_seq == 0) {
                                            add_v<ArchType::ASCEND_V220, float>(
                                                ls_ubuf_tensor,
                                                ls_ubuf_tensor,
                                                mask_ubuf_tensor,
                                                (m_split * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                                1,                                                                // dstBlockStride
                                                1,                                                                // src0BlockStride
                                                1,                                                                // src1BlockStride
                                                8,                                                                // dstRepeatStride
                                                8,                                                                // src0RepeatStride
                                                8                                                                 // src1RepeatStride
                                            );
                                        } else if (n_idx == n_end - 2) {
                                            if (qk_n - pp_n_scalar < FLOAT_VECTOR_SIZE){
                                                __set_mask(qk_n - pp_n_scalar);
                                            } else {
                                                __set_mask(FLOAT_VECTOR_SIZE);
                                            }
                                            add_v<ArchType::ASCEND_V220, float>(
                                                ls_ubuf_tensor[pp_n_scalar],
                                                ls_ubuf_tensor[pp_n_scalar],
                                                mask_ubuf_tensor[split_idx * m_slice * VECTOR_SIZE],
                                                m_split, // repeat
                                                1,                                                                // dstBlockStride
                                                1,                                                                // src0BlockStride
                                                1,                                                                // src1BlockStride
                                                qk_round_n / FLOAT_BLOCK_SIZE,                                                                // dstRepeatStride
                                                qk_round_n / FLOAT_BLOCK_SIZE,                                                                // src0RepeatStride
                                                16                                                                 // src1RepeatStride
                                            );
                                            if (qk_n - pp_n_scalar > FLOAT_VECTOR_SIZE) {
                                                __set_mask(qk_n - pp_n_scalar - FLOAT_VECTOR_SIZE);
                                                add_v<ArchType::ASCEND_V220, float>(
                                                    ls_ubuf_tensor[pp_n_scalar + FLOAT_VECTOR_SIZE],
                                                    ls_ubuf_tensor[pp_n_scalar + FLOAT_VECTOR_SIZE],
                                                    mask_ubuf_tensor[FLOAT_VECTOR_SIZE + split_idx * m_slice * VECTOR_SIZE],
                                                    m_split, // repeat
                                                    1,                                                                // dstBlockStride
                                                    1,                                                                // src0BlockStride
                                                    1,                                                                // src1BlockStride
                                                    qk_round_n / FLOAT_BLOCK_SIZE,                                                                // dstRepeatStride
                                                    qk_round_n / FLOAT_BLOCK_SIZE,                                                                // src0RepeatStride
                                                    16                                                                 // src1RepeatStride
                                                );
                                            }
                                        }
                                        PIPE_BARRIER(V);
                                        SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
                                    }
                                    if (qk_n == SOFTMAX_MAX_LENGTH) {
                                        cgmax_v<ArchType::ASCEND_V220, float>(
                                            tv_ubuf_tensor,
                                            ls_ubuf_tensor,
                                            m_split * qk_n / FLOAT_VECTOR_SIZE,
                                            1,
                                            1,
                                            8
                                        );
                                        PIPE_BARRIER(V);
                                        __set_mask(32);
                                        cgmax_v<ArchType::ASCEND_V220, float>(
                                            tv_ubuf_tensor,
                                            tv_ubuf_tensor,
                                            m_split,
                                            1,
                                            1,
                                            4
                                        );
                                        PIPE_BARRIER(V);
                                        __set_vcg_mask(4);
                                        cgmax_v<ArchType::ASCEND_V220, float>(
                                            lm_ubuf_tensor,
                                            tv_ubuf_tensor,
                                            (m_split * FLOAT_BLOCK_SIZE + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE,
                                            1,
                                            1,
                                            8
                                        );
                                        PIPE_BARRIER(V);
                                        __set_mask(m_split);
                                    } else {
                                        cgmax_v<ArchType::ASCEND_V220, float>(tv_ubuf_tensor, ls_ubuf_tensor,
                                                                              m_split,
                                                                              1,
                                                                              1,
                                                                              qk_round_n / FLOAT_BLOCK_SIZE
                                        );
                                        PIPE_BARRIER(V);
                                        cgmax_v<ArchType::ASCEND_V220, float>(lm_ubuf_tensor, tv_ubuf_tensor,
                                                                              (m_split * FLOAT_BLOCK_SIZE + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE,
                                                                              1,
                                                                              1,
                                                                              8
                                        );
                                        PIPE_BARRIER(V);
                                        for (uint64_t rowmax_idx = 1; rowmax_idx < (uint64_t)qk_n / FLOAT_VECTOR_SIZE; ++rowmax_idx) {
                                            cgmax_v<ArchType::ASCEND_V220, float>(tv_ubuf_tensor, ls_ubuf_tensor[rowmax_idx * FLOAT_VECTOR_SIZE],
                                                                                  m_split,
                                                                                  1,
                                                                                  1,
                                                                                  qk_round_n / FLOAT_BLOCK_SIZE
                                            );
                                            PIPE_BARRIER(V);
                                            cgmax_v<ArchType::ASCEND_V220, float>(tv_ubuf_tensor, tv_ubuf_tensor,
                                                                                  (m_split * FLOAT_BLOCK_SIZE + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE,
                                                                                  1,
                                                                                  1,
                                                                                  8
                                            );
                                            PIPE_BARRIER(V);
                                            __set_mask(m_split);
                                            max_v<ArchType::ASCEND_V220, float>(lm_ubuf_tensor, lm_ubuf_tensor,
                                                                                tv_ubuf_tensor,
                                                                                1,                        // repeat
                                                                                1,                            // dstBlockStride
                                                                                1,                            // src0BlockStride
                                                                                1,                            // src1BlockStride
                                                                                8,                            // dstRepeatStride
                                                                                8,                            // src0RepeatStride
                                                                                8 // src1RepeatStride
                                            );
                                            PIPE_BARRIER(V);
                                        }
                                        if (qk_n % FLOAT_VECTOR_SIZE > 0) {
                                            __set_mask(qk_n % FLOAT_VECTOR_SIZE);
                                            cgmax_v<ArchType::ASCEND_V220, float>(
                                                tv_ubuf_tensor,
                                                ls_ubuf_tensor[qk_n / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
                                                m_split,
                                                1,
                                                1,
                                                qk_round_n / FLOAT_BLOCK_SIZE
                                            );
                                            PIPE_BARRIER(V);
                                            __set_vcg_mask((qk_n % FLOAT_VECTOR_SIZE + FLOAT_BLOCK_SIZE - 1)/ FLOAT_BLOCK_SIZE);
                                            cgmax_v<ArchType::ASCEND_V220, float>(
                                                tv_ubuf_tensor,
                                                tv_ubuf_tensor,
                                                (m_split * FLOAT_BLOCK_SIZE + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE,
                                                1,
                                                1,
                                                8
                                            );
                                            PIPE_BARRIER(V);
                                            __set_mask(m_split);
                                            max_v<ArchType::ASCEND_V220, float>(
                                                lm_ubuf_tensor,
                                                lm_ubuf_tensor,
                                                tv_ubuf_tensor,
                                                1,                        // repeat
                                                1,                            // dstBlockStride
                                                1,                            // src0BlockStride
                                                1,                            // src1BlockStride
                                                8,                            // dstRepeatStride
                                                8,                            // src0RepeatStride
                                                8 // src1RepeatStride
                                            );
                                        }
                                    }
                                    PIPE_BARRIER(V);
                                    if (n_idx == 0) {
                                        // *** hm = lm
                                        ub_to_ub<ArchType::ASCEND_V220, float>(
                                            hm_ubuf_tensor[split_idx * m_slice],
                                            lm_ubuf_tensor,
                                            0,                              // sid
                                            1,                              // nBurst
                                            round_m_split / FLOAT_BLOCK_SIZE, // lenBurst
                                            0,                              // srcGap
                                            0                               // dstGap
                                        );
                                        PIPE_BARRIER(V);
                                    } else {
                                        // *** hm = vmax(lm, gm)
                                        max_v<ArchType::ASCEND_V220, float>(
                                            hm_ubuf_tensor[split_idx * m_slice],
                                            lm_ubuf_tensor,
                                            gm_ubuf_tensor[split_idx * m_slice],
                                            1,         // repeat
                                            1,         // dstBlockStride
                                            1,         // src0BlockStride
                                            1,         // src1BlockStride
                                            8,         // dstRepeatStride
                                            8,         // src0RepeatStride
                                            8          // src1RepeatStride
                                        );
                                        PIPE_BARRIER(V);
                                        // *** dm = gm - hm
                                        sub_v<ArchType::ASCEND_V220, float>(
                                            dm_ubuf_tensor[(n_idx / s_block_stack) % 4 * UB_FLOAT_LINE_SIZE + split_idx * m_slice],
                                            gm_ubuf_tensor[split_idx * m_slice],
                                            hm_ubuf_tensor[split_idx * m_slice],
                                            1,         // repeat
                                            1,         // dstBlockStride
                                            1,         // src0BlockStride
                                            1,         // src1BlockStride
                                            8,         // dstRepeatStride
                                            8,         // src0RepeatStride
                                            8          // src1RepeatStride
                                        );
                                        PIPE_BARRIER(V);
                                        // *** dm = exp(dm)
                                        exp_v<ArchType::ASCEND_V220, float>(
                                            dm_ubuf_tensor[(n_idx / s_block_stack) % 4 * UB_FLOAT_LINE_SIZE + split_idx * m_slice],
                                            dm_ubuf_tensor[(n_idx / s_block_stack) % 4 * UB_FLOAT_LINE_SIZE + split_idx * m_slice],
                                            1,         // repeat
                                            1,         // dstBlockStride
                                            1,         // srcBlockStride
                                            8,         // dstRepeatStride
                                            8          // srcRepeatStride
                                        );
                                    }
                                    SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
                                    PIPE_BARRIER(V);
                                    // *** gm = hm
                                    ub_to_ub<ArchType::ASCEND_V220, float>(
                                        gm_ubuf_tensor[split_idx * m_slice],
                                        hm_ubuf_tensor[split_idx * m_slice],
                                        0,                              // sid
                                        1,                              // nBurst
                                        round_m_split / FLOAT_BLOCK_SIZE, // lenBurst
                                        0,                              // srcGap
                                        0                               // dstGap
                                    );
                                    PIPE_BARRIER(V);
                                    // *** hm_block = expand_to_block(hm), 存放于 tv
                                    brcb_v<ArchType::ASCEND_V220, uint32_t>(
                                        tv_ubuf_tensor.ReinterpretCast<uint32_t>(),
                                        hm_ubuf_tensor.ReinterpretCast<uint32_t>()[split_idx * m_slice],
                                        1,                             // dstBlockStride
                                        8,                             // dstRepeatStride
                                        round_m_split / FLOAT_BLOCK_SIZE // repeat
                                    );
                                    PIPE_BARRIER(V);
                                    // *** ls = ls - hm_block
                                    for (uint32_t vsub_idx = 0; vsub_idx < qk_n / FLOAT_VECTOR_SIZE; ++vsub_idx) {
                                        sub_v<ArchType::ASCEND_V220, float>(
                                            ls_ubuf_tensor[vsub_idx * FLOAT_VECTOR_SIZE],
                                            ls_ubuf_tensor[vsub_idx * FLOAT_VECTOR_SIZE],
                                            tv_ubuf_tensor,
                                            m_split,                         // repeat
                                            1,                             // dstBlockStride
                                            1,                             // src0BlockStride
                                            0,                             // src1BlockStride
                                            qk_round_n / FLOAT_BLOCK_SIZE, // dstRepeatStride
                                            qk_round_n / FLOAT_BLOCK_SIZE, // src0RepeatStride
                                            1                              // src1RepeatStride
                                        );
                                    }
                                    if (qk_n % FLOAT_VECTOR_SIZE > 0) {
                                        __set_mask(qk_n % FLOAT_VECTOR_SIZE);
                                        sub_v<ArchType::ASCEND_V220, float>(
                                            ls_ubuf_tensor[qk_n / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
                                            ls_ubuf_tensor[qk_n / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
                                            tv_ubuf_tensor,
                                            m_split,                         // repeat
                                            1,                             // dstBlockStride
                                            1,                             // src0BlockStride
                                            0,                             // src1BlockStride
                                            qk_round_n / FLOAT_BLOCK_SIZE, // dstRepeatStride
                                            qk_round_n / FLOAT_BLOCK_SIZE, // src0RepeatStride
                                            1                              // src1RepeatStride
                                        );
                                        SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
                                    }
                                    PIPE_BARRIER(V);
                                    // *** ls = exp(ls)
                                    exp_v<ArchType::ASCEND_V220, float>(
                                        ls32_ubuf_tensor,
                                        ls_ubuf_tensor,
                                        (m_split * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                        1,                                                                // dstBlockStride
                                        1,                                                                // srcBlockStride
                                        8,                                                                // dstRepeatStride
                                        8                                                                 // srcRepeatStride
                                    );
                                    PIPE_BARRIER(V);
                                    // *** lp = castfp32to16(ls)
                                    if (IS_BF16) {
                                        convr_v<ArchType::ASCEND_V220, float, IN_DATA_TYPE>(
                                            lp_ubuf_tensor.ReinterpretCast<IN_DATA_TYPE>(),
                                            ls32_ubuf_tensor,
                                            (m_split * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                            1, // dstBlockStride
                                            1, // srcBlockStride
                                            4, // dstRepeatStride
                                            8  // srcRepeatStride
                                        );
                                    } else {
                                        conv_v<ArchType::ASCEND_V220, float, IN_DATA_TYPE>(
                                            lp_ubuf_tensor.ReinterpretCast<IN_DATA_TYPE>(),
                                            ls32_ubuf_tensor,
                                            (m_split * qk_round_n + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                            1, // dstBlockStride
                                            1, // srcBlockStride
                                            4, // dstRepeatStride
                                            8  // srcRepeatStride
                                        );
                                    }
                                    PIPE_BARRIER(V);
                                    SET_FLAG(V, MTE3, EVENT_ID0);
                                    WAIT_FLAG(V, MTE3, EVENT_ID0);
                                    ub_to_gm<ArchType::ASCEND_V220, IN_DATA_TYPE>(
                                        p_gm_tensor[(uint64_t)block_idx * TMP_SIZE + n_idx % vect_mod * TMP_SIZE / vect_mod +
                                                    ((uint64_t)sub_block_idx * qk_m / 2 + split_idx * m_slice) * qk_round_n],
                                        lp_ubuf_tensor.ReinterpretCast<IN_DATA_TYPE>(),
                                        0,                                // sid
                                        m_split,                                // nBurst
                                        qk_round_n / BLOCK_SIZE,  // lenBurst
                                        0,                                // srcGap
                                        0                                 // dstGap
                                    );
                                    SET_FLAG(MTE3, MTE2, EVENT_ID0);
                                    // *** ll = rowsum(ls32)
                                    for (uint32_t rowsum_idx = 1; rowsum_idx < qk_n / FLOAT_VECTOR_SIZE; ++rowsum_idx) {
                                        add_v<ArchType::ASCEND_V220, float>(
                                            ls32_ubuf_tensor,
                                            ls32_ubuf_tensor,
                                            ls32_ubuf_tensor[rowsum_idx * FLOAT_VECTOR_SIZE],
                                            m_split,                         // repeat
                                            1,                             // dstBlockStride
                                            1,                             // src0BlockStride
                                            1,                             // src1BlockStride
                                            qk_round_n / FLOAT_BLOCK_SIZE, // dstRepeatStride
                                            qk_round_n / FLOAT_BLOCK_SIZE, // src0RepeatStride
                                            qk_round_n / FLOAT_BLOCK_SIZE  // src1RepeatStride
                                        );
                                        PIPE_BARRIER(V);
                                    }
                                    if (qk_n % FLOAT_VECTOR_SIZE > 0) {
                                        __set_mask(qk_n % FLOAT_VECTOR_SIZE);
                                        add_v<ArchType::ASCEND_V220, float>(
                                            ls32_ubuf_tensor,
                                            ls32_ubuf_tensor,
                                            ls32_ubuf_tensor[qk_n / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
                                            m_split,                         // repeat
                                            1,                             // dstBlockStride
                                            1,                             // src0BlockStride
                                            1,                             // src1BlockStride
                                            qk_round_n / FLOAT_BLOCK_SIZE, // dstRepeatStride
                                            qk_round_n / FLOAT_BLOCK_SIZE, // src0RepeatStride
                                            qk_round_n / FLOAT_BLOCK_SIZE  // src1RepeatStride
                                        );
                                        SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
                                    }
                                    PIPE_BARRIER(V);
                                    cadd_v<ArchType::ASCEND_V220, float>(
                                        ll_ubuf_tensor,
                                        ls32_ubuf_tensor,
                                        m_split,                         // repeat
                                        1,                             // dstRepeatStride
                                        1,                             // srcBlockStride
                                        qk_round_n / FLOAT_BLOCK_SIZE  // srcRepeatStride
                                    );
                                    PIPE_BARRIER(V);
                                    if (n_idx == 0) {
                                        // *** gl = ll
                                        ub_to_ub<ArchType::ASCEND_V220, float>(
                                            gl_ubuf_tensor[split_idx * m_slice],
                                            ll_ubuf_tensor,
                                            0,                              // sid
                                            1,                              // nBurst
                                            round_m_split / FLOAT_BLOCK_SIZE, // lenBurst
                                            0,                              // srcGap
                                            0                               // dstGap
                                        );
                                        PIPE_BARRIER(V);
                                    } else {
                                        __set_mask(m_split);
                                        // *** gl = dm * gl
                                        mul_v<ArchType::ASCEND_V220, float>(
                                            gl_ubuf_tensor[split_idx * m_slice],
                                            dm_ubuf_tensor[(n_idx / s_block_stack) % 4 * UB_FLOAT_LINE_SIZE + split_idx * m_slice],
                                            gl_ubuf_tensor[split_idx * m_slice],
                                            1, // repeat
                                            1,         // dstBlockStride
                                            1,         // src0BlockStride
                                            1,         // src1BlockStride
                                            8,         // dstRepeatStride
                                            8,         // src0RepeatStride
                                            8          // src1RepeatStride
                                        );
                                        PIPE_BARRIER(V);
                                        // *** gl = ll + gl
                                        add_v<ArchType::ASCEND_V220, float>(
                                            gl_ubuf_tensor[split_idx * m_slice],
                                            gl_ubuf_tensor[split_idx * m_slice],
                                            ll_ubuf_tensor,
                                            1, // repeat
                                            1,         // dstBlockStride
                                            1,         // src0BlockStride
                                            1,         // src1BlockStride
                                            8,         // dstRepeatStride
                                            8,         // src0RepeatStride
                                            8          // src1RepeatStride
                                        );
                                        PIPE_BARRIER(V);
                                        SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
                                    }
                                }
                            }
                        }
                        mask_offset += qk_n;
                    }
                    FftsCrossCoreSync<PIPE_MTE3, 2>(SOFTMAX_READY);
                }
                if (n_idx >= launch_delay) {
                    WaitFlagDev(UPDATE_READY);
                    for(uint32_t k_idx = 0; k_idx < loopV; k_idx++){
                        uint64_t o_offsetk = o_offset + k_idx * BLOCK_QK;
                        qk_k = (k_idx == (loopV - 1))? embdv - k_idx * BLOCK_QK : BLOCK_QK;
                        qk_round_k = (qk_k + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;
                        if (sub_m > 0) {
                            if(n_idx == launch_delay){
                                WAIT_FLAG(MTE3, MTE2, EVENT_ID2);
                                gm_to_ub<ArchType::ASCEND_V220, float>(
                                    go_ubuf_tensor,
                                    o_tmp_gm_tensor[(uint64_t)block_idx * TMP_SIZE * LOCAL_SIZE + k_idx * TMP_SIZET  + (n_idx - launch_delay) % vect_mod * TMP_SIZE / vect_mod * loopV +
                                                    (uint64_t)sub_block_idx * qk_m / 2 * qk_round_k],
                                    0,                                   // sid
                                    1,                                   // nBurst
                                    sub_m * qk_round_k / FLOAT_BLOCK_SIZE,  // lenBurst
                                    0,                                   // srcGap
                                    0                                    // dstGap
                                );
                                SET_FLAG(MTE2, V, EVENT_ID3);
                                WAIT_FLAG(MTE2, V, EVENT_ID3);//(k_idx+loopV) * (TMP_SIZE / 2)
                            }
                            else{
                                WAIT_FLAG(MTE3, MTE2, EVENT_ID2);
                                gm_to_ub<ArchType::ASCEND_V220, float>(
                                    go_ubuf_tensor,
                                    upo_gm_tensor[(uint64_t)block_idx * TMP_SIZE + k_idx * TMP_SIZET +
                                                  (uint64_t)sub_block_idx * qk_m / 2 * qk_round_k],
                                    0,                                   // sid
                                    1,                                   // nBurst
                                    sub_m * qk_round_k / FLOAT_BLOCK_SIZE,  // lenBurst
                                    0,                                   // srcGap
                                    0                                    // dstGap
                                );
                                SET_FLAG(MTE2, V, EVENT_ID3);

                                WAIT_FLAG(V, MTE2, EVENT_ID2);
                                gm_to_ub<ArchType::ASCEND_V220, float>(
                                    lo_ubuf_tensor,
                                    o_tmp_gm_tensor[(uint64_t)block_idx * TMP_SIZE * LOCAL_SIZE + k_idx * TMP_SIZET  + (n_idx - launch_delay) % vect_mod * TMP_SIZE / vect_mod * loopV +
                                                    (uint64_t)sub_block_idx * qk_m / 2 * qk_round_k],
                                    0,                                   // sid
                                    1,                                   // nBurst
                                    sub_m * qk_round_k / FLOAT_BLOCK_SIZE,  // lenBurst
                                    0,                                   // srcGap
                                    0                                    // dstGap
                                );
                                // SET_FLAG(MTE2, V, EVENT_ID4);
                                SET_FLAG(MTE2, V, EVENT_ID2);

                                PIPE_BARRIER(V);
                                // *** dm_block = expand_to_block(dm), 存放于 tv
                                brcb_v<ArchType::ASCEND_V220, uint32_t>(
                                    tv_ubuf_tensor.ReinterpretCast<uint32_t>(),
                                    dm_ubuf_tensor[((n_idx - launch_delay) / s_block_stack % 4) * UB_FLOAT_LINE_SIZE].ReinterpretCast<uint32_t>(),
                                    1,                             // dstBlockStride
                                    8,                             // dstRepeatStride
                                    round_sub_m / FLOAT_BLOCK_SIZE // repeat
                                );
                                PIPE_BARRIER(V);
                                WAIT_FLAG(MTE2, V, EVENT_ID3);
                                // *** go = go * dm_block
                                for (uint32_t vmul_idx = 0; vmul_idx < qk_k / FLOAT_VECTOR_SIZE; ++vmul_idx) {
                                    mul_v<ArchType::ASCEND_V220, float>(go_ubuf_tensor[vmul_idx * FLOAT_VECTOR_SIZE],
                                                                        go_ubuf_tensor[vmul_idx * FLOAT_VECTOR_SIZE],
                                                                        tv_ubuf_tensor,
                                                                        sub_m,                       // repeat
                                                                        1,                           // dstBlockStride
                                                                        1,                           // src0BlockStride
                                                                        0,                           // src1BlockStride
                                                                        qk_round_k / FLOAT_BLOCK_SIZE,  // dstRepeatStride
                                                                        qk_round_k / FLOAT_BLOCK_SIZE,  // src0RepeatStride
                                                                        1                            // src1RepeatStride
                                    );
                                }
                                if (qk_k % FLOAT_VECTOR_SIZE > 0) {
                                    __set_mask(qk_k % FLOAT_VECTOR_SIZE);
                                    mul_v<ArchType::ASCEND_V220, float>(go_ubuf_tensor[qk_k / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
                                                                        go_ubuf_tensor[qk_k / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
                                                                        tv_ubuf_tensor,
                                                                        sub_m,                       // repeat
                                                                        1,                           // dstBlockStride
                                                                        1,                           // src0BlockStride
                                                                        0,                           // src1BlockStride
                                                                        qk_round_k / FLOAT_BLOCK_SIZE,  // dstRepeatStride
                                                                        qk_round_k / FLOAT_BLOCK_SIZE,  // src0RepeatStride
                                                                        1                            // src1RepeatStride
                                    );
                                    SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
                                }
                                PIPE_BARRIER(V);

                                // WAIT_FLAG(MTE2, V, EVENT_ID4);
                                WAIT_FLAG(MTE2, V, EVENT_ID2);
                                // *** go = lo + go
                                add_v<ArchType::ASCEND_V220, float>(go_ubuf_tensor,
                                                                    go_ubuf_tensor,
                                                                    lo_ubuf_tensor,
                                                                    (sub_m * qk_round_k + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE,  // repeat
                                                                    1,                                                              // dstBlockStride
                                                                    1,                                                              // src0BlockStride
                                                                    1,                                                              // src1BlockStride
                                                                    8,                                                              // dstRepeatStride
                                                                    8,                                                              // src0RepeatStride
                                                                    8                                                               // src1RepeatStride
                                );
                                PIPE_BARRIER(V);
                                SET_FLAG(V, MTE2, EVENT_ID2);
                            }
                            // *** gl = castfp32to16(gl)
                            if (n_idx + s_block_stack > n_end + launch_delay - 1){
                                PIPE_BARRIER(V);
                                // *** gl_block = expand_to_block(gl), 存放于 tv
                                brcb_v<ArchType::ASCEND_V220, uint32_t>(tv_ubuf_tensor.ReinterpretCast<uint32_t>(),
                                                                        gl_ubuf_tensor.ReinterpretCast<uint32_t>(),
                                                                        1,                              // dstBlockStride
                                                                        8,                              // dstRepeatStride
                                                                        round_sub_m / FLOAT_BLOCK_SIZE  // repeat
                                );
                                PIPE_BARRIER(V);
                                // *** go = go / gl_block
                                for (uint32_t vdiv_idx = 0; vdiv_idx < qk_k / FLOAT_VECTOR_SIZE; ++vdiv_idx) {
                                    div_v<ArchType::ASCEND_V220, float>(go_ubuf_tensor[vdiv_idx * FLOAT_VECTOR_SIZE],
                                                                        go_ubuf_tensor[vdiv_idx * FLOAT_VECTOR_SIZE],
                                                                        tv_ubuf_tensor,
                                                                        sub_m,                 // repeat
                                                                        1,                     // dstBlockStride
                                                                        1,                     // src0BlockStride
                                                                        0,                     // src1BlockStride
                                                                        qk_round_k / FLOAT_BLOCK_SIZE,  // dstRepeatStride
                                                                        qk_round_k / FLOAT_BLOCK_SIZE,  // src0RepeatStride
                                                                        1                      // src1RepeatStride
                                    );
                                }
                                if (qk_k % FLOAT_VECTOR_SIZE > 0) {
                                    __set_mask(qk_k % FLOAT_VECTOR_SIZE);
                                    div_v<ArchType::ASCEND_V220, float>(
                                        go_ubuf_tensor[qk_k / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
                                        go_ubuf_tensor[qk_k / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
                                        tv_ubuf_tensor,
                                        sub_m,                      // repeat
                                        1,                          // dstBlockStride
                                        1,                          // src0BlockStride
                                        0,                          // src1BlockStride
                                        qk_round_k / FLOAT_BLOCK_SIZE, // dstRepeatStride
                                        qk_round_k / FLOAT_BLOCK_SIZE, // src0RepeatStride
                                        1                           // src1RepeatStride
                                    );
                                    SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
                                }
                                PIPE_BARRIER(V);
                                if (IS_BF16) {
                                    convr_v<ArchType::ASCEND_V220, float, IN_DATA_TYPE>(
                                        go_ubuf_tensor.ReinterpretCast<IN_DATA_TYPE>(),
                                        go_ubuf_tensor,
                                        (sub_m * qk_round_k + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                        1, // dstBlockStride
                                        1, // srcBlockStride
                                        4, // dstRepeatStride
                                        8  // srcRepeatStride
                                    );
                                } else {
                                    conv_v<ArchType::ASCEND_V220, float, IN_DATA_TYPE>(
                                        go_ubuf_tensor.ReinterpretCast<IN_DATA_TYPE>(),
                                        go_ubuf_tensor,
                                        (sub_m * qk_round_k + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                        1, // dstBlockStride
                                        1, // srcBlockStride
                                        4, // dstRepeatStride
                                        8  // srcRepeatStride
                                    );
                                }
                                PIPE_BARRIER(V);
                                // ********************* move O to GM ************************
                                // out lse ---->  out_lse = np.log(score_sum) + score_max
                                ln_v<ArchType::ASCEND_V220, float>(lse32_ubuf_tensor, //参数已确认
                                                                   gl_ubuf_tensor,
                                                                   sub_m_d64,  // repeat  1
                                                                   1,          // dstBlockStride
                                                                   1,          // srcBlockStride
                                                                   8,          // dstRepeatStride
                                                                   8           // srcRepeatStride
                                );
                                PIPE_BARRIER(V);

                                add_v<ArchType::ASCEND_V220, float>(lse32_ubuf_tensor, //参数已确认
                                                                    lse32_ubuf_tensor,
                                                                    gm_ubuf_tensor,
                                                                    sub_m_d64,  // repeat
                                                                    1,          // dstBlockStride
                                                                    1,          // src0BlockStride
                                                                    1,          // src1BlockStride
                                                                    8,          // dstRepeatStride
                                                                    8,          // src0RepeatStride
                                                                    8           // src1RepeatStride
                                );
                                PIPE_BARRIER(V);

                                if (isRing){
                                    //                          以下为更新lse的部分：lse_new = log(exp(lse_new) + exp(lse_old))
                                    //                          搬运prev_lse
//                                    PIPE_BARRIER(ALL);
                                    WAIT_FLAG(V, MTE2, EVENT_ID5);
                                    gm_to_ub_align<ArchType::ASCEND_V220, float>( // 直接搬入报错error，暂时修改回原版本，待优化
                                        lse32_prev_ub_tensor,
                                        lse_prev_gm_tensor[(lse_offset + (uint64_t)sub_block_idx * qk_m/2)],
                                        0,                                // sid
                                        1,                                // nBurst 64
                                        sub_m * lenBurst,                 // lenBurst   单位byte 64*2 128
                                        0,
                                        0,
                                        0,        // srcGap  (stride_qo - embdv) * 2 / embdv
                                        0                                 // dstGap
                                    );
                                    SET_FLAG(MTE2, V, EVENT_ID5);
                                    WAIT_FLAG(MTE2, V, EVENT_ID5);

                                    PIPE_BARRIER(V);

                                    // exp(lse_prev) e的指数次结果存放到
                                    PIPE_BARRIER(V);
                                    exp_v<ArchType::ASCEND_V220, float>(lse32_conv_ubuf_tensor,  //float 改为了half
                                                                        lse32_prev_ub_tensor,
                                                                        sub_m_d64,  // repeat
                                                                        1,          // dstBlockStride
                                                                        1,          // srcBlockStride
                                                                        8,          // dstRepeatStride
                                                                        8           // srcRepeatStride
                                    );

                                    PIPE_BARRIER(V);
                                    // exp(lse_new) e的指数次结果存放到lse32_ubuf_tensor
                                    exp_v<ArchType::ASCEND_V220, float>(lse32_ubuf_tensor,
                                                                        lse32_ubuf_tensor,
                                                                        sub_m_d64,  // repeat
                                                                        1,          // dstBlockStride
                                                                        1,          // srcBlockStride
                                                                        8,          // dstRepeatStride
                                                                        8           // srcRepeatStride
                                    );
                                    // 做加法并求log  exp(lse_new) + exp(lse_prev), 存放到lse_prev32
                                    PIPE_BARRIER(V);
                                    add_v<ArchType::ASCEND_V220, float>(lse32_cur_update_tensor,
                                                                        lse32_ubuf_tensor,
                                                                        lse32_conv_ubuf_tensor,
                                                                        sub_m_d64,  // repeat
                                                                        1,          // dstBlockStride
                                                                        1,          // src0BlockStride
                                                                        1,          // src1BlockStride
                                                                        8,          // dstRepeatStride
                                                                        8,          // src0RepeatStride
                                                                        8           // src1RepeatStride
                                    );
                                    PIPE_BARRIER(V);
                                    ln_v<ArchType::ASCEND_V220, float>(lse32_cur_update_tensor,
                                                                       lse32_cur_update_tensor,
                                                                       sub_m_d64,  // repeat
                                                                       1,          // dstBlockStride
                                                                       1,          // srcBlockStride
                                                                       8,          // dstRepeatStride
                                                                       8           // srcRepeatStride
                                    );
                                    PIPE_BARRIER(V);
                                    //                                 lse的更新结果搬出   当前精度已验证
                                    //*********************************************
                                    //                            if (k_idx == 0) {
                                    SET_FLAG(V, MTE3, EVENT_ID4);
                                    WAIT_FLAG(V, MTE3, EVENT_ID4);
                                    ub_to_gm_align<ArchType::ASCEND_V220, float>(
                                        lse_gm_tensor[(lse_offset + (uint64_t)sub_block_idx * qk_m / 2)],                     // 128/2   * embdv
                                        lse32_cur_update_tensor, // ls32_ubuf_tensor.ReinterpretCast<half>()
                                        0,                                        // sid
                                        1,                                        // nBurst
                                        sub_m * lenBurst,                        //(sub_m + 15) / 16,lenBurst  2*64
                                        0,                                        // leftPaddingNum
                                        0,                                        // rightPaddingNum
                                        0,                                        // srcGap
                                        0           // dstGap   512-128
                                    );
                                    SET_FLAG(MTE3, V, EVENT_ID4);
                                    WAIT_FLAG(MTE3, V, EVENT_ID4);
                                    //                            }
                                    //****************************************以下输出O更新代码********************************************/
                                    // 输出o更新部分----o = sum(lse_exp/sum(lse_exp)*oi)
                                    // 输出o的更新分析： new_o = (old_o * e(old_lse) + new_o * e(new_lse)) / (e(old_lse) + e(new_lse))
                                    // 基础运算过程编写完毕，数据运算类型以及各运算块的偏移等参数需重新填写校对
                                    conv_v<ArchType::ASCEND_V220, IN_DATA_TYPE, float>(o32_prev_ub_tensor,
                                                                                       go_ubuf_tensor.ReinterpretCast<IN_DATA_TYPE>(),
                                                                                       sub_m * qk_round_k / 64,  // repeat
                                                                                       1,          // dstBlockStride
                                                                                       1,          // srcBlockStride
                                                                                       8,          // dstRepeatStride
                                                                                       4           // srcRepeatStride
                                    );
                                    PIPE_BARRIER(V);

                                    // 对应乘积 new_o * e(new_lse) 存放 --> new_o
                                    brcb_v<ArchType::ASCEND_V220, uint32_t>(tv_ubuf_tensor.ReinterpretCast<uint32_t>(),
                                                                            lse32_ubuf_tensor.ReinterpretCast<uint32_t>(),
                                                                            1,                              // dstBlockStride
                                                                            8,                              // dstRepeatStride  ori is 8
                                                                            round_sub_m / FLOAT_BLOCK_SIZE // repeat  8   round_sub_m=64   FLOAT_BLOCK_SIZE=8
                                    );
                                    PIPE_BARRIER(V);
                                    //                                WAIT_FLAG(MTE2, V, EVENT_ID3);
                                    for (uint32_t vmul_idx = 0; vmul_idx < ((qk_k + FLOAT_VECTOR_SIZE-1) / FLOAT_VECTOR_SIZE); ++vmul_idx) {
                                        mul_v<ArchType::ASCEND_V220, float>(go_ubuf_tensor[vmul_idx * FLOAT_VECTOR_SIZE],  //  FLOAT_VECTOR_SIZE==64
                                                                            o32_prev_ub_tensor[vmul_idx * FLOAT_VECTOR_SIZE], // 0-64     64-?
                                                                            tv_ubuf_tensor,
                                                                            sub_m,                       // repeat
                                                                            1,                           // dstBlockStride
                                                                            1,                           // src0BlockStride
                                                                            0,                           // src1BlockStride
                                                                            qk_round_k / FLOAT_BLOCK_SIZE,  // dstRepeatStride
                                                                            qk_round_k / FLOAT_BLOCK_SIZE,  // src0RepeatStride
                                                                            1                            // src1RepeatStride
                                        );
                                    }

                                    // prev_o搬入ub  ----
//                                    PIPE_BARRIER(ALL);
                                    WAIT_FLAG(V, MTE2, EVENT_ID2);
                                    gm_to_ub_align<ArchType::ASCEND_V220, IN_DATA_TYPE>(
                                        o_prev_ub_tensor, // 复用lo
                                        o_prev_gm_tensor[o_offset + (uint64_t)sub_block_idx * qk_m / 2 * stride_qo],
                                        0,        // sid
                                        sub_m,    // nBurst
                                        qk_k * 2, // lenBurst   单位byte
                                        0, 0,
                                        (stride_qo - qk_k) * 2, // srcGap
                                        0                       // dstGap
                                    );
//                                    PIPE_BARRIER(ALL);
                                    SET_FLAG(MTE2, V, EVENT_ID2);
                                    WAIT_FLAG(MTE2, V, EVENT_ID2);

                                    conv_v<ArchType::ASCEND_V220, IN_DATA_TYPE, float>(o32_prev_ub_tensor,
                                                                                       o_prev_ub_tensor,
                                                                                       sub_m * qk_round_k / 64,  // repeat
                                                                                       1,          // dstBlockStride
                                                                                       1,          // srcBlockStride
                                                                                       8,          // dstRepeatStride
                                                                                       4           // srcRepeatStride
                                    );
                                    PIPE_BARRIER(V);

                                    exp_v<ArchType::ASCEND_V220, float>(lse32_prev_ub_tensor,
                                                                        lse32_prev_ub_tensor,
                                                                        sub_m_d64,  // repeat
                                                                        1,          // dstBlockStride
                                                                        1,          // srcBlockStride
                                                                        8,          // dstRepeatStride
                                                                        8           // srcRepeatStride
                                    );
                                    PIPE_BARRIER(V);

                                    brcb_v<ArchType::ASCEND_V220, float>(tv_ubuf_tensor,
                                                                         lse32_prev_ub_tensor,
                                                                         1,                              // dstBlockStride
                                                                         8,                              // dstRepeatStride  ori is 8
                                                                         round_sub_m / FLOAT_BLOCK_SIZE  // repeat  8   round_sub_m=64   FLOAT_BLOCK_SIZE=8
                                    );
                                    PIPE_BARRIER(V);
                                    SET_FLAG(V, MTE2, EVENT_ID5);
                                    for (uint32_t vmul_idx = 0; vmul_idx < ((qk_k + FLOAT_VECTOR_SIZE-1) / FLOAT_VECTOR_SIZE); ++vmul_idx) { // FLOAT_VECTOR_SIZE=64  qk_k=128
                                        mul_v<ArchType::ASCEND_V220, float>(o32_prev_ub_tensor[vmul_idx * FLOAT_VECTOR_SIZE],  //FLOAT_VECTOR_SIZE  0     128   256
                                                                            o32_prev_ub_tensor[vmul_idx * FLOAT_VECTOR_SIZE],
                                                                            tv_ubuf_tensor,
                                                                            sub_m,                       // repeat   64
                                                                            1,                           // dstBlockStride
                                                                            1,                           // src0BlockStride
                                                                            0,                           // src1BlockStride
                                                                            qk_round_k / FLOAT_BLOCK_SIZE,  // dstRepeatStride   128 / 16  qk_round_k==128 / FLOAT_BLOCK_SIZE==8
                                                                            qk_round_k / FLOAT_BLOCK_SIZE,  // src0RepeatStride  16
                                                                            1                            // src1RepeatStride
                                        );
                                    }
                                    PIPE_BARRIER(V);

                                    // 求和 old_o * e(old_lse) + new_o * e(new_lse) -- > 存放 old_o
                                    PIPE_BARRIER(V);
                                    add_v<ArchType::ASCEND_V220, float>(o32_prev_ub_tensor,   // o_prev_ub_tensor
                                                                        o32_prev_ub_tensor,
                                                                        go_ubuf_tensor,
                                                                        sub_m * qk_round_k / 64,  // repeat   1
                                                                        1,          // dstBlockStride
                                                                        1,          // src0BlockStride
                                                                        1,          // src1BlockStride
                                                                        8,          // dstRepeatStride
                                                                        8,          // src0RepeatStride
                                                                        8           // src1RepeatStride
                                    );

                                    PIPE_BARRIER(V);
                                    // (e(old_lse) + e(new_lse)) 做boardcast  --> 存放 new_conv_ubuf_tensor
                                    add_v<ArchType::ASCEND_V220, float>(lse32_conv_ubuf_tensor,
                                                                        lse32_ubuf_tensor,
                                                                        lse32_conv_ubuf_tensor,
                                                                        sub_m_d64,  // repeat
                                                                        1,          // dstBlockStride
                                                                        1,          // src0BlockStride
                                                                        1,          // src1BlockStride
                                                                        8,          // dstRepeatStride
                                                                        8,          // src0RepeatStride
                                                                        8           // src1RepeatStride
                                    );
                                    PIPE_BARRIER(V);

                                    // 做除法  old_o * e(old_lse) + new_o * e(new_lse)  /  (e(old_lse) + e(new_lse))
                                    brcb_v<ArchType::ASCEND_V220, float>(tv_ubuf_tensor,
                                                                         lse32_conv_ubuf_tensor,
                                                                         1,                              // dstBlockStride
                                                                         8,                              // dstRepeatStride
                                                                         round_sub_m / FLOAT_BLOCK_SIZE  // repeat
                                    );
                                    PIPE_BARRIER(V);
                                    for (uint32_t vdiv_idx = 0; vdiv_idx < ((qk_k + FLOAT_VECTOR_SIZE-1) / FLOAT_VECTOR_SIZE); ++vdiv_idx) {
                                        div_v<ArchType::ASCEND_V220, float>(go_ubuf_tensor[vdiv_idx * FLOAT_VECTOR_SIZE],
                                                                            o32_prev_ub_tensor[vdiv_idx * FLOAT_VECTOR_SIZE],
                                                                            tv_ubuf_tensor,
                                                                            sub_m,                 // repeat
                                                                            1,                     // dstBlockStride
                                                                            1,                     // src0BlockStride
                                                                            0,                     // src1BlockStride
                                                                            qk_round_k / FLOAT_BLOCK_SIZE,  // dstRepeatStride  qk_round_k==128   BLOCK_SIZE=16
                                                                            qk_round_k / FLOAT_BLOCK_SIZE,  // src0RepeatStride
                                                                            1                      // src1RepeatStride
                                        );
                                    }
                                    PIPE_BARRIER(V);
                                    conv_v<ArchType::ASCEND_V220, float, IN_DATA_TYPE>(go_ubuf_tensor.ReinterpretCast<IN_DATA_TYPE>(),
                                                                                       go_ubuf_tensor,
                                                                                       sub_m * qk_round_k / 64,  // repeat
                                                                                       1,          // dstBlockStride
                                                                                       1,          // srcBlockStride
                                                                                       4,          // dstRepeatStride
                                                                                       8           // srcRepeatStride
                                    );
                                    PIPE_BARRIER(V);
                                    SET_FLAG(V, MTE2, EVENT_ID2);
                                    // 搬出O
//                                    SET_FLAG(V, MTE3, EVENT_ID1);
//                                    WAIT_FLAG(V, MTE3, EVENT_ID1);
                                    PIPE_BARRIER(ALL);
                                    ub_to_gm_align<ArchType::ASCEND_V220, IN_DATA_TYPE>(
                                        o_gm_tensor[o_offset + (uint64_t)sub_block_idx * qk_m / 2 * stride_qo],
                                        go_ubuf_tensor.ReinterpretCast<IN_DATA_TYPE>(),
                                        0,                    // sid
                                        sub_m,                // nBurst
                                        qk_round_k * 2,              // lenBurst
                                        0,                    // leftPaddingNum
                                        0,                    // rightPaddingNum
                                        0,                    // srcGap
                                        (stride_qo - qk_round_k) * 2 // dstGap
                                    );
                                    SET_FLAG(MTE3, MTE2, EVENT_ID2);
                                } else {
                                    //                            if (k_idx == 0) {
                                    SET_FLAG(V, MTE3, EVENT_ID4);
                                    WAIT_FLAG(V, MTE3, EVENT_ID4);
                                    ub_to_gm_align<ArchType::ASCEND_V220, float>(
                                        lse_gm_tensor[(lse_offset + (uint64_t)sub_block_idx * qk_m / 2)],                     // 128/2   * embdv
                                        lse32_ubuf_tensor, // ls32_ubuf_tensor.ReinterpretCast<half>()
                                        0,                                        // sid
                                        1,                                        // nBurst
                                        sub_m * lenBurst,                        //(sub_m + 15) / 16,lenBurst  64 * 4
                                        0,                                        // leftPaddingNum
                                        0,                                        // rightPaddingNum
                                        0,                                        // srcGap
                                        0                                        // dstGap   512-128
                                    );
                                    SET_FLAG(MTE3, V, EVENT_ID4);
                                    WAIT_FLAG(MTE3, V, EVENT_ID4);
                                    //                            }

                                    SET_FLAG(V, MTE3, EVENT_ID0);
                                    WAIT_FLAG(V, MTE3, EVENT_ID0);
                                    ub_to_gm_align<ArchType::ASCEND_V220, IN_DATA_TYPE>(
                                        o_gm_tensor[o_offset + (uint64_t)sub_block_idx * qk_m / 2 * stride_qo],
                                        go_ubuf_tensor.ReinterpretCast<IN_DATA_TYPE>(),
                                        0,                    // sid
                                        sub_m,                // nBurst
                                        qk_round_k * 2,              // lenBurst
                                        0,                    // leftPaddingNum
                                        0,                    // rightPaddingNum
                                        0,                    // srcGap
                                        (stride_qo - qk_round_k) * 2 // dstGap
                                    );
                                    SET_FLAG(MTE3, MTE2, EVENT_ID2);
                                }
                            }
                            else{
                                PIPE_BARRIER(V);
                                SET_FLAG(V, MTE3, EVENT_ID2);
                                WAIT_FLAG(V, MTE3, EVENT_ID2);
                                ub_to_gm<ArchType::ASCEND_V220, float>(
                                    upo_gm_tensor[(uint64_t)block_idx * TMP_SIZE +  k_idx * TMP_SIZET +
                                                  (uint64_t)sub_block_idx * qk_m / 2 * qk_round_k],
                                    go_ubuf_tensor,
                                    0,                                // sid
                                    1,                                // nBurst
                                    sub_m * qk_round_k / FLOAT_BLOCK_SIZE,  // lenBurst
                                    0,                                // srcGap
                                    0                                 // dstGap
                                );
                                SET_FLAG(MTE3, MTE2, EVENT_ID2);
                            }
                        }
                    }
                }
            }
        }
    }

private:
    __gm__ uint8_t *__restrict__ mask_gm{nullptr};
    __gm__ uint8_t *__restrict__ o_gm{nullptr};
    __gm__ uint8_t *__restrict__ s_gm{nullptr};
    __gm__ uint8_t *__restrict__ p_gm{nullptr};
    __gm__ uint8_t *__restrict__ o_tmp_gm{nullptr};
    __gm__ uint8_t *__restrict__ upo_tmp_gm{nullptr};
    __gm__ uint8_t *__restrict__ tiling_para_gm{nullptr};
    __gm__ uint8_t *__restrict__ alibi_coeff_gm{nullptr};
    __gm__ uint8_t *__restrict__ o_prev{nullptr};
    __gm__ uint8_t *__restrict__ lse_prev{nullptr};
    __gm__ uint8_t *__restrict__ lse_gm{nullptr};

    const uint32_t ls_ubuf_offset = 0;
    const uint32_t lp_ubuf_offset = 0;
    const uint32_t ls32_ubuf_offset = 2 * UB_UINT8_BLOCK_SIZE;
    const uint32_t mask_ubuf_offset = 4 * UB_UINT8_BLOCK_SIZE;
    const uint32_t go_ubuf_offset = 6 * UB_UINT8_BLOCK_SIZE;
    const uint32_t lm_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE;
    const uint32_t hm_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 1 * UB_UINT8_LINE_SIZE;
    const uint32_t gm_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 2 * UB_UINT8_LINE_SIZE;
    const uint32_t dm_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 3 * UB_UINT8_LINE_SIZE;
    const uint32_t ll_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 7 * UB_UINT8_LINE_SIZE;
    const uint32_t gl_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 8 * UB_UINT8_LINE_SIZE;
    const uint32_t lse_prev_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 9 * UB_UINT8_LINE_SIZE;
    const uint32_t lse_cur_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 10 * UB_UINT8_LINE_SIZE;
    const uint32_t lse_conv_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 11 * UB_UINT8_LINE_SIZE;
    const uint32_t lse_cur_update_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 12 * UB_UINT8_LINE_SIZE;
    const uint32_t lse_prev_update_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 13 * UB_UINT8_LINE_SIZE;
    const uint32_t tv_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 16 * UB_UINT8_LINE_SIZE;
    const uint32_t p_scale_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 21 * UB_UINT8_LINE_SIZE; // no use
    const uint32_t log_ubuf_float_offset = 8 * UB_UINT8_BLOCK_SIZE + 30 * UB_UINT8_LINE_SIZE;
    const uint32_t lo_ubuf_offset = 9 * UB_UINT8_BLOCK_SIZE;
    const uint32_t mask16_ubuf_offset = 11 * UB_UINT8_BLOCK_SIZE;

    AsdopsBuffer<ArchType::ASCEND_V220> buf;

    AscendC::LocalTensor<float> ls_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(ls_ubuf_offset);
    AscendC::LocalTensor<float> lp_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(lp_ubuf_offset);
    AscendC::LocalTensor<float> ls32_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(ls32_ubuf_offset);
    AscendC::LocalTensor<float> mask_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(mask_ubuf_offset);
    AscendC::LocalTensor<float> lo_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(lo_ubuf_offset);
    AscendC::LocalTensor<float> lm_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(lm_ubuf_offset);
    AscendC::LocalTensor<float> hm_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(hm_ubuf_offset);
    AscendC::LocalTensor<float> gm_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(gm_ubuf_offset);
    AscendC::LocalTensor<float> dm_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(dm_ubuf_offset);
    AscendC::LocalTensor<float> ll_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(ll_ubuf_offset);
    AscendC::LocalTensor<float> gl_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(gl_ubuf_offset);
    AscendC::LocalTensor<float> tv_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(tv_ubuf_offset);
    AscendC::LocalTensor<float> go_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(go_ubuf_offset);
    AscendC::LocalTensor<IN_DATA_TYPE> mask16_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, IN_DATA_TYPE>(mask16_ubuf_offset);

    AscendC::LocalTensor<float> lse32_prev_ub_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(lse_prev_ubuf_offset); // lse_prev_ub_tensor offset设置？？？
    AscendC::LocalTensor<float> lse32_conv_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(lse_conv_ubuf_offset); // 用于中间new_lse变量参与计算与存放
    AscendC::LocalTensor<float> lse32_cur_update_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(lse_cur_update_ubuf_offset);
    AscendC::LocalTensor<float> lse32_prev_update_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(lse_prev_update_ubuf_offset);
    AscendC::LocalTensor<float> lse32_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(lse_cur_ubuf_offset);
    AscendC::LocalTensor<float> o32_prev_ub_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(lo_ubuf_offset);

    AscendC::LocalTensor<IN_DATA_TYPE> o_prev_ub_tensor = buf.GetBuffer<BufferType::ASCEND_UB, IN_DATA_TYPE>(mask16_ubuf_offset);

    AscendC::GlobalTensor<IN_DATA_TYPE> mask_gm_tensor;
    AscendC::GlobalTensor<IN_DATA_TYPE> o_gm_tensor;
    AscendC::GlobalTensor<float> lse_gm_tensor;
    AscendC::GlobalTensor<float> lse_prev_gm_tensor;
    AscendC::GlobalTensor<IN_DATA_TYPE> o_prev_gm_tensor;
    AscendC::GlobalTensor<float> s_gm_tensor;
    AscendC::GlobalTensor<IN_DATA_TYPE> p_gm_tensor;
    AscendC::GlobalTensor<float> o_tmp_gm_tensor;
    AscendC::GlobalTensor<float> upo_gm_tensor;

    uint32_t batch_size{0};
    uint32_t max_seqlen{0};
    uint32_t q_heads{0};
    uint32_t embd{0};
    uint32_t embdv{0};
    float tor{0};
    uint32_t head_stride{0};
    uint32_t mask_stride{0};
    uint32_t is_triu_mask{0};
    uint32_t total_q_blk_num{0};
    uint32_t isClamp{0};
    float clampMin;
    float clampMax;
    uint64_t stride_qo{0};
    uint32_t go_flag_scalar{1};

    int32_t sub_block_idx{-1};
    uint32_t tilingKey{0};
    uint32_t tiling_head_size{0};
    uint32_t tiling_para_size{0};
    uint32_t long_seq{0};
    uint32_t is_sqrt{0};
    uint32_t mask_type{0};
    uint32_t alibi_compress_offset{0};
    uint32_t alibi_left_align{0};
    uint32_t tiling_data_shape_type{0};
};

extern "C" __global__ __aicore__ void ring_mla_prefill_bf16(
    __gm__ uint8_t *__restrict__ sync,
    __gm__ uint8_t *__restrict__ q_gm,
    __gm__ uint8_t *__restrict__ q_rope_gm,
    __gm__ uint8_t *__restrict__ k_gm,
    __gm__ uint8_t *__restrict__ k_rope_gm,
    __gm__ uint8_t *__restrict__ v_gm,
    __gm__ uint8_t *__restrict__ layerID_gm,
    __gm__ uint8_t *__restrict__ mask_gm,
    __gm__ uint8_t *__restrict__ alibi_coeff_gm,
    __gm__ uint8_t *__restrict__ deq_qk_gm,
    __gm__ uint8_t *__restrict__ off_qk_gm,
    __gm__ uint8_t *__restrict__ deq_pv_gm,
    __gm__ uint8_t *__restrict__ off_pv_gm,
    __gm__ uint8_t *__restrict__ quant_p_gm,
    __gm__ uint8_t *__restrict__ logN_gm,
    __gm__ uint8_t *__restrict__ o_prev,
    __gm__ uint8_t *__restrict__ lse_prev,
    __gm__ uint8_t *__restrict__ o_gm,
    __gm__ uint8_t *__restrict__ lse_gm,
    __gm__ uint8_t *__restrict__ s_gm,
    __gm__ uint8_t *__restrict__ p_gm,
    __gm__ uint8_t *__restrict__ o_tmp_gm,
    __gm__ uint8_t *__restrict__ upo_tmp_gm,
    __gm__ uint8_t *__restrict__ tiling_para_gm)
{
    uint32_t tilingKey = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 16));
    // 仅在tilingKey为1的时候是bf，其余场景均当做half处理
    if (tilingKey == 1) {
        FlashAttentionEncoderHighPrecisionVec<__bf16> fa_vec(sync, mask_gm, alibi_coeff_gm, o_gm, s_gm, p_gm, o_tmp_gm, upo_tmp_gm, tiling_para_gm, o_prev, lse_prev, lse_gm);
        fa_vec.Run<true>();
    } else {
        FlashAttentionEncoderHighPrecisionVec<half> fa_vec(sync, mask_gm, alibi_coeff_gm, o_gm, s_gm, p_gm, o_tmp_gm, upo_tmp_gm, tiling_para_gm, o_prev, lse_prev, lse_gm);
        fa_vec.Run<false>();
    }
}
#endif

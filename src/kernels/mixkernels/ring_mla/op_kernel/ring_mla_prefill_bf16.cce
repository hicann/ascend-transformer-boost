/*
 * Copyright (c) 2025 Huawei Technologies Co., Ltd.
 * This file is a part of the CANN Open Software.
 * Licensed under CANN Open Software License Agreement Version 2.0 (the "License").
 * Please refer to the License for details. You may not use this file except in compliance with the License.
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE.
 * See LICENSE in the root of the software repository for the full text of the License.
 */

#include "kernels/utils/kernel/common.h"
#include "kernels/utils/kernel/common_func.h"
#include "kernels/utils/kernel/simd.h"
#include "kernels/utils/kernel/iterator.h"
#include "kernels/utils/kernel/mma.h"
#include "kernels/utils/kernel/utils.h"
#include "kernel_operator.h"

#ifdef __CCE_KT_TEST__
#define __aicore__
#else
#define __aicore__ [aicore]
#endif

// FFTS Flag
constexpr int32_t QK_READY = 1;
constexpr int32_t SOFTMAX_READY = 2;
constexpr int32_t UPDATE_READY = 3;
constexpr int32_t BIT_SHIFT = 8;
constexpr int32_t SOFTMAX_MAX_LENGTH = 256;

constexpr int32_t L0AB_HALF_BUF_SIZE = 16384;  // 128 * 128
constexpr int32_t BLOCK_SIZE = 16;
constexpr int32_t CUBE_MATRIX_SIZE = 256;         // 16 * 16
constexpr int32_t L0AB_UINT8_BLOCK_SIZE = 32768;  // 128 * 128 * 2B
constexpr int32_t KV_DB_SIZE = 65536;  // 128 * 128 * 2B
constexpr int32_t TMP_SIZE = 32768 * 16;               // 128 * 256

constexpr int32_t FLOAT_BLOCK_SIZE = 8;
constexpr int32_t VECTOR_SIZE = 128;
constexpr int32_t FLOAT_VECTOR_SIZE = 64;
constexpr int32_t UB_UINT8_BLOCK_SIZE = 16384;  // 64 * 128 * 2B
constexpr int32_t UB_HALF_BUF_SIZE = 8192;
constexpr int32_t UB_bf16_BUF_SIZE = 8192;      // 64 * 128
constexpr int32_t UB_UINT8_LINE_SIZE = 512;     // 128 * 4B
constexpr int32_t UB_FLOAT_LINE_SIZE = 128;     // 128
constexpr int32_t UB_HALF_LINE_SIZE = 128;       // UB_FLOAT_LINE_SIZE * 2
constexpr int32_t BASE_MASK_SIZE = 128;
constexpr int32_t COMPRESS_MASK_SIZE = 8192; // 64 * 128
constexpr int32_t S_DB_SIZE = 8192;
constexpr int32_t REDUCE_UB_SIZE = 1024;
constexpr float BASE_Y = 128;

constexpr int32_t TMP_SIZET = 16384;
constexpr int32_t BLOCK_QK = 128;
constexpr int32_t LOCAL_SIZE = 6;

#ifdef __DAV_C220_CUBE__

template<typename IN_DATA_TYPE, typename QKV_DT = IN_DATA_TYPE, typename O_DT = IN_DATA_TYPE, bool int8_flag = false>
class FlashAttentionEncoderHighPrecision {
public:
    __aicore__ __attribute__((always_inline)) inline FlashAttentionEncoderHighPrecision(
        __gm__ uint8_t *__restrict__ sync,
        __gm__ uint8_t *__restrict__ q_gm,
        __gm__ uint8_t *__restrict__ q_rope_gm,
        __gm__ uint8_t *__restrict__ k_gm,
        __gm__ uint8_t *__restrict__ k_rope_gm,
        __gm__ uint8_t *__restrict__ v_gm,
        __gm__ uint8_t *__restrict__ s_gm,
        __gm__ uint8_t *__restrict__ p_gm,
        __gm__ uint8_t *__restrict__ o_tmp_gm,
        __gm__ uint8_t *__restrict__ upo_tmp_gm,
        __gm__ uint8_t *__restrict__ tiling_para_gm) :
        q_gm(q_gm), q_rope_gm(q_rope_gm), s_gm(s_gm), p_gm(p_gm), o_tmp_gm(o_tmp_gm), upo_tmp_gm(upo_tmp_gm),
        tiling_para_gm(tiling_para_gm)
    {
        SetFftsBaseAddr((unsigned long)sync);
        SetPadding<uint64_t>(0);
        SetAtomicnone();
        SetNdpara(1, 0, 0);
        SetMasknorm();

        this->batch_size = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm));
        this->max_seqlen = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 1));
        this->q_heads = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 2));
        this->embd = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 3));
        this->embdv = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 23));
        this->kv_heads = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 4));
        this->is_triu_mask = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 8));
        this->total_q_blk_num = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 9));
        this->tiling_head_size = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 14));
        this->tiling_para_size = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 15));
        this->tilingKey = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 16));
        this->max_kv_seqlen = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 18));

        this->data_shape_type = 0;
        this->group_num = q_heads / kv_heads;
        this->stride_qo = q_heads * 128;
        this->stride_o = q_heads * embdv;
        this->stride_k = kv_heads * 128;
        this->stride_v = kv_heads * embdv;

        if (data_shape_type == 1) {
            this->stride_qo = embdv;
            this->stride_o = embdv;
            this->stride_k = embdv;
            this->stride_v = embdv;
        }

        this->batch_stride_kv = batch_size * max_kv_seqlen * kv_heads * embd * sizeof(QKV_DT);
        this->__k = embd;
        this->round_k = (__k + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;

        this->k_gm = k_gm;
        this->k_rope_gm = k_rope_gm;
        this->v_gm = v_gm;

        q_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ QKV_DT *>(this->q_gm));
        q_rope_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ QKV_DT *>(this->q_rope_gm));

        k_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ QKV_DT *>(this->k_gm));
        k_rope_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ QKV_DT *>(this->k_rope_gm));
        v_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ QKV_DT *>(this->v_gm));
        s_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ float *>(this->s_gm));
        p_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ QKV_DT *>(this->p_gm));
        o_tmp_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ float *>(this->o_tmp_gm));

        SET_FLAG(MTE1, MTE2, EVENT_ID0);
        SET_FLAG(MTE1, MTE2, EVENT_ID1);
        SET_FLAG(MTE1, MTE2, EVENT_ID2);
        SET_FLAG(MTE1, MTE2, EVENT_ID3);
        SET_FLAG(MTE1, MTE2, EVENT_ID4);
        SET_FLAG(MTE1, MTE2, EVENT_ID5);
        SET_FLAG(MTE1, MTE2, EVENT_ID6);
        SET_FLAG(MTE1, MTE2, EVENT_ID7);
        SET_FLAG(M, MTE1, EVENT_ID0);
        SET_FLAG(M, MTE1, EVENT_ID1);
        SET_FLAG(M, MTE1, EVENT_ID2);
        SET_FLAG(M, MTE1, EVENT_ID3);
        SET_FLAG(FIX, M, EVENT_ID0);
        SET_FLAG(FIX, M, EVENT_ID1);
    }

    __aicore__ __attribute__((always_inline)) inline ~FlashAttentionEncoderHighPrecision()
    {
        WAIT_FLAG(MTE1, MTE2, EVENT_ID0);
        WAIT_FLAG(MTE1, MTE2, EVENT_ID1);
        WAIT_FLAG(MTE1, MTE2, EVENT_ID2);
        WAIT_FLAG(MTE1, MTE2, EVENT_ID3);
        WAIT_FLAG(MTE1, MTE2, EVENT_ID4);
        WAIT_FLAG(MTE1, MTE2, EVENT_ID5);
        WAIT_FLAG(MTE1, MTE2, EVENT_ID6);
        WAIT_FLAG(MTE1, MTE2, EVENT_ID7);
        WAIT_FLAG(M, MTE1, EVENT_ID0);
        WAIT_FLAG(M, MTE1, EVENT_ID1);
        WAIT_FLAG(M, MTE1, EVENT_ID2);
        WAIT_FLAG(M, MTE1, EVENT_ID3);
        WAIT_FLAG(FIX, M, EVENT_ID0);
        WAIT_FLAG(FIX, M, EVENT_ID1);
        PIPE_BARRIER(ALL);
    }

    __aicore__ __attribute__((always_inline)) inline uint32_t GetTilingKey()
    {
        return this->tilingKey;
    }

    __aicore__ __attribute__((always_inline)) inline void LoadDataToCa(
        AscendC::LocalTensor<QKV_DT> dst_tensor, AscendC::LocalTensor<QKV_DT> src_tensor,
        uint32_t round_k, uint32_t qk_round_m, uint32_t qk_m)
    {
        uint32_t round_row = RoundUp<uint32_t>(round_k, 32 / sizeof(QKV_DT));
        if (qk_m == 1) {
            l1_to_l0_a<ArchType::ASCEND_V220, QKV_DT, false, DataFormat::VECTOR, DataFormat::VECTOR>(
                dst_tensor,
                src_tensor,
                0,
                NumMatrixsRoundUp<QKV_DT>(round_row), // repeat
                0,
                1,                                                   // srcStride
                0,
                0                                                   // dstStride
            );
        } else {
            l1_to_l0_a<ArchType::ASCEND_V220, QKV_DT, false, DataFormat::NZ, DataFormat::ZZ>(
                dst_tensor, src_tensor, qk_round_m, round_row, 0, 0, 0, 0);
        }
    }

    template<bool IS_BF16 = true>
    __aicore__ __attribute__((always_inline)) inline void Run()
    {
        uint64_t cur_batch = 0;
        uint32_t pre_total_q_blk_num = 0;
        uint32_t offset_tiling = tiling_head_size + tiling_para_size * cur_batch;
        uint32_t cur_total_q_blk_num = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 13 + offset_tiling));
        uint32_t process_num = total_q_blk_num * q_heads;
        uint32_t next_process = 0;
        for (uint32_t process = block_idx; process < process_num; process = next_process) {
            while (process >= cur_total_q_blk_num * q_heads) {
                cur_batch++;
                pre_total_q_blk_num = cur_total_q_blk_num;
                offset_tiling += tiling_para_size;
                cur_total_q_blk_num = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 13 + offset_tiling));
            }
            next_process = process + block_num;
            if (is_triu_mask) {
                uint32_t curr_iter = process / block_num;
                next_process = curr_iter % 2 == 1 ? (curr_iter + 1) * block_num + block_idx : (curr_iter + 2) * block_num - 1 - block_idx;
            }
            // get tiling args
            uint32_t q_seqlen = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + offset_tiling));
            uint32_t kv_seqlen = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 1 + offset_tiling));
            if (q_seqlen == 0 || kv_seqlen == 0) {
                continue;
            }
            uint32_t pp_m_scalar = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 2 + offset_tiling));
            uint32_t pp_n_scalar = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 3 + offset_tiling));
            uint32_t addr_q_high32 = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 4 + offset_tiling));
            uint32_t addr_q_loww32 = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 5 + offset_tiling));
            uint64_t addr_q_scalar = (uint64_t)(((uint64_t)addr_q_high32) << 32 | addr_q_loww32);
            uint32_t addr_k_high32 = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 6 + offset_tiling));
            uint32_t addr_k_loww32 = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 7 + offset_tiling));
            uint64_t addr_k_scalar = (uint64_t)(((uint64_t)addr_k_high32) << 32 | addr_k_loww32);
            uint32_t addr_v_high32 = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 8 + offset_tiling));
            uint32_t addr_v_loww32 = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 9 + offset_tiling));
            uint64_t addr_v_scalar = (uint64_t)(((uint64_t)addr_v_high32) << 32 | addr_v_loww32);
            uint32_t process_idx = process - pre_total_q_blk_num * q_heads;
            uint32_t m_idx = process_idx / q_heads;
            uint64_t head_idx = process_idx % q_heads;

            uint32_t m_loop = (q_seqlen + pp_m_scalar - 1) / pp_m_scalar;
            uint32_t n_loop = (kv_seqlen + pp_n_scalar - 1) / pp_n_scalar;

            uint32_t qk_m = (m_idx == (m_loop - 1)) ? (q_seqlen - m_idx * pp_m_scalar) : pp_m_scalar;
            uint32_t qk_round_m = (qk_m + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;

            /**************** pre_load *****************/
            uint32_t qk_n = n_loop == 1 ? kv_seqlen : pp_n_scalar;
            uint32_t qk_round_n = (qk_n + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;

            uint32_t pingpong_flag = 0;
            uint32_t offset = pingpong_flag * L0AB_HALF_BUF_SIZE;

            uint64_t q_offset = addr_q_scalar + head_idx * 128 + m_idx * pp_m_scalar * q_heads * 128;
            uint64_t k_offset = addr_k_scalar + (head_idx / group_num) * 128;
            uint64_t k_rope_offset = addr_k_scalar / 2 + (head_idx / group_num) * 64;
            uint64_t q_rope_offset = addr_q_scalar / 2 + head_idx * 64 + m_idx * pp_m_scalar * q_heads * 64;
            if (data_shape_type == 1) {
                q_offset = addr_q_scalar + head_idx * embdv * max_seqlen + m_idx * pp_m_scalar * stride_qo;//  + 17592186044416 / sizeof(QKV_DT);
                k_offset = addr_k_scalar + (head_idx / group_num) * embdv * max_kv_seqlen;//  + 17592186044416 / sizeof(QKV_DT);
            }

            // Only need load Q once
            if (qk_m == 1) {
                gm_to_l1<ArchType::ASCEND_V220, QKV_DT, DataFormat::ND, DataFormat::ND>(
                    l1q_buf_addr_tensor,
                    q_gm_tensor[q_offset],
                    1,
                    0,
                    0,
                    128,              // lenBurst
                    0,
                    0
                );
                gm_to_l1<ArchType::ASCEND_V220, QKV_DT, DataFormat::ND, DataFormat::ND>(
                    l1q_buf_addr_tensor[16 * 128],
                    q_rope_gm_tensor[q_rope_offset],
                    1,
                    0,
                    0,
                    64,              // lenBurst
                    0,
                    0
                );
            } else {
                gm_to_l1<ArchType::ASCEND_V220, QKV_DT, DataFormat::ND, DataFormat::NZ>(
                    l1q_buf_addr_tensor,
                    q_gm_tensor[q_offset],
                    qk_m,       // nValue
                    qk_round_m, // dstNzC0Stride
                    0,
                    128,        // dValue
                    0,
                    stride_qo  // srcDValue
                );
                gm_to_l1<ArchType::ASCEND_V220, QKV_DT, DataFormat::ND, DataFormat::NZ>(
                    l1q_buf_addr_tensor[qk_round_m * 128],
                    q_rope_gm_tensor[q_rope_offset],
                    qk_m,       // nValue
                    qk_round_m, // dstNzC0Stride
                    0,
                    64,        // dValue
                    0,
                    stride_qo / 2
                );
            }
            SET_FLAG(MTE2, MTE1, pingpong_flag);
            WAIT_FLAG(MTE2, MTE1, pingpong_flag);
            uint32_t loopQK = (this->embd + BLOCK_QK - 1) / BLOCK_QK;
            uint32_t loopV = (this->embdv + BLOCK_QK - 1) / BLOCK_QK;
            uint32_t qk_k = BLOCK_QK;
            uint32_t qk_round_k = BLOCK_QK;

            uint32_t sv_n = n_loop == 1 ? kv_seqlen : pp_n_scalar;
            uint32_t sv_round_n = (sv_n + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;
            uint64_t v_offset = addr_v_scalar + (head_idx / group_num) * embdv;//  + 17592186044416 / sizeof(QKV_DT);
            if (data_shape_type == 1) {
                v_offset = addr_v_scalar + (head_idx / group_num) * embdv * max_kv_seqlen;//  + 17592186044416 / sizeof(QKV_DT);
            }

            uint32_t n_end = n_loop;
            if (is_triu_mask) {
                n_end = m_idx + 1;
            }
            uint32_t s_block_stack = n_end > 8 ? 4 : (n_end > 4 ? 2 : 1);
            s_block_stack = 4; // Currently not splitting K
            uint32_t launch_delay = s_block_stack * 2;
            uint32_t vect_mod = 2 * launch_delay;
            uint32_t kv_pingpong_flag = 0;
            uint64_t kv_pingpong_offset = kv_pingpong_flag * KV_DB_SIZE;
            uint32_t split_m = 128;
            uint32_t m_inner_loop = (qk_m + 127) / 128;
            for (uint32_t n_idx = 0; n_idx < n_end + launch_delay; n_idx += s_block_stack) {
                if (n_idx < n_end) {
                    uint32_t sv_n_triu = n_end * pp_n_scalar;
                    uint32_t l0c_pingpong_flag = 0;
                    uint32_t l0c_offset = l0c_pingpong_flag * 128 * 128;
                    if (n_idx + s_block_stack > n_end - 1) {
                        sv_n = sv_n_triu > kv_seqlen ? kv_seqlen - n_idx * pp_n_scalar : sv_n_triu - n_idx * pp_n_scalar;
                    } else {
                        sv_n = pp_n_scalar * s_block_stack;
                    }
                    uint32_t sv_round_n = (sv_n + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;
                    WAIT_FLAG(M, MTE1, EVENT_ID0);
                    WAIT_FLAG(M, MTE1, EVENT_ID1);
                    LoadDataToCa(l0a_buf_tensor, l1q_buf_addr_tensor, 128, qk_round_m, qk_m);
                    LoadDataToCa(l0a_buf_tensor[L0AB_HALF_BUF_SIZE], l1q_buf_addr_tensor[qk_round_m * 128], 64, qk_round_m, qk_m);
                    // *** Prepare K to L1
                    SET_FLAG(MTE1, M, EVENT_ID0);
                    WAIT_FLAG(MTE1, M, EVENT_ID0);
                    for (uint32_t split_idx = 0; split_idx < s_block_stack && n_idx + split_idx < n_end; split_idx++) {
                        pingpong_flag = (n_idx + split_idx) % 2;
                        offset = pingpong_flag * 128 * 192;
                        if (n_idx + split_idx == (n_loop - 1)) {
                            qk_n = (kv_seqlen - (n_idx + split_idx) * pp_n_scalar);
                            qk_round_n = (qk_n + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;
                        }
                        bool last_split = split_idx == s_block_stack - 1 || n_idx + split_idx == n_end - 1;

                        WAIT_FLAG(MTE1, MTE2, pingpong_flag + 2 * kv_pingpong_flag);
                        gm_to_l1<ArchType::ASCEND_V220, QKV_DT, DataFormat::ND, DataFormat::NZ>(
                            l1k_buf_addr_tensor[kv_pingpong_offset + offset],
                            k_gm_tensor[k_offset],
                            qk_n,        // nValue
                            qk_round_n,  // dstNzC0Stride
                            0,            // dstNzMatrixStride, unused
                            128,         // dValue
                            0,            // dstNzMatrixStride, unused
                            stride_k   // srcDValue
                        );
                        gm_to_l1<ArchType::ASCEND_V220, QKV_DT, DataFormat::ND, DataFormat::NZ>(
                            l1k_buf_addr_tensor[kv_pingpong_offset + offset + qk_round_n * 128],
                            k_rope_gm_tensor[k_rope_offset],
                            qk_n,        // nValue
                            qk_round_n,  // dstNzC0Stride
                            0,            // dstNzMatrixStride, unused
                            64,         // dValue
                            0,            // dstNzMatrixStride, unused
                            stride_k / 2   // srcDValue
                        );
                        SET_FLAG(MTE2, MTE1, pingpong_flag);
                        WAIT_FLAG(MTE2, MTE1, pingpong_flag);
                        for (int embed_idx = 0; embed_idx < loopQK; embed_idx++) {
                            uint32_t embedk = (embed_idx == 0) ? 128 : 64;
                            uint32_t last_embed_loop = (embed_idx == (loopQK - 1)) ? 1 : 0;
                            uint32_t initc = (embed_idx == 0) ? 1: 0;

                            WAIT_FLAG(M, MTE1, (embed_idx % 2) + 2);
                            l1_to_l0_b<ArchType::ASCEND_V220, QKV_DT, false, DataFormat::VECTOR, DataFormat::VECTOR>(
                                l0b_buf_tensor[(embed_idx % 2) * L0AB_HALF_BUF_SIZE],
                                l1k_buf_addr_tensor[kv_pingpong_offset + offset + embed_idx * qk_round_n * 128],
                                0,
                                NumMatrixsRoundUp<QKV_DT>(RoundUp<uint32_t>(embedk, 32 / sizeof(QKV_DT)) * qk_round_n), // repeat
                                0,
                                1,                                        // srcStride
                                0,
                                0                                        // dstStride
                            );

                            if (last_embed_loop) {
                                SET_FLAG(MTE1, MTE2, pingpong_flag + 2 * kv_pingpong_flag);
                            }

                            SET_FLAG(MTE1, M, pingpong_flag + 2);
                            WAIT_FLAG(MTE1, M, pingpong_flag + 2);

                            if (embed_idx == 0) {
                                WAIT_FLAG(FIX, M, l0c_pingpong_flag);
                            }

                            mmad<ArchType::ASCEND_V220, QKV_DT, QKV_DT, float, false>(
                                l0c_buf_tensor[l0c_offset],
                                l0a_buf_tensor[embed_idx * L0AB_HALF_BUF_SIZE],
                                l0b_buf_tensor[(embed_idx % 2) * L0AB_HALF_BUF_SIZE],
                                qk_m,  // m
                                qk_n,  // n
                                embedk,   // k
                                initc      // cmatrixInitVal
                            );
                            PIPE_BARRIER(M);

                            SET_FLAG(M, MTE1, (embed_idx % 2) + 2);

                            if (last_embed_loop) {
                                SET_FLAG(M, FIX, l0c_pingpong_flag);
                                WAIT_FLAG(M, FIX, l0c_pingpong_flag);

                                l0c_to_gm<ArchType::ASCEND_V220, DataFormat::ND, float, float>(
                                    s_gm_tensor[(uint64_t)block_idx * TMP_SIZE + n_idx % vect_mod * TMP_SIZE / vect_mod + split_idx * pp_n_scalar],
                                    l0c_buf_tensor[l0c_offset],
                                    qk_m,        // MSize
                                    qk_round_n,  // NSize
                                    qk_round_m,  // srcStride
                                    sv_round_n  // dstStride_dst_D
                                );
                                SET_FLAG(FIX, M, l0c_pingpong_flag);
                            }
                        }
                        k_offset += pp_n_scalar * stride_k;
                        k_rope_offset += pp_n_scalar * stride_k / 2;
                        l0c_pingpong_flag = 1 - l0c_pingpong_flag;
                        l0c_offset = l0c_pingpong_flag * 128 * 128;
                    }
                    SET_FLAG(M, MTE1, EVENT_ID0);
                    SET_FLAG(M, MTE1, EVENT_ID1);
                    FftsCrossCoreSync<PIPE_FIX, 2>(QK_READY);
                    kv_pingpong_flag = 1 - kv_pingpong_flag;
                    kv_pingpong_offset = kv_pingpong_flag * KV_DB_SIZE;
                }
                if (n_idx >= launch_delay) {
                    uint32_t l0c_pingpong_flag = 0;
                    uint32_t l0c_offset = l0c_pingpong_flag * 128 * 128;
                    uint32_t sv_n_triu = n_end * pp_n_scalar;
                    if (n_idx + s_block_stack > n_end + launch_delay - 1) {
                        sv_n = sv_n_triu > kv_seqlen ? kv_seqlen - (n_idx - launch_delay) * pp_n_scalar : sv_n_triu - (n_idx - launch_delay) * pp_n_scalar;
                    } else {
                        sv_n = pp_n_scalar * s_block_stack;
                    }
                    uint32_t sv_round_n = (sv_n + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;
                    uint32_t n_slice = pp_n_scalar * ((s_block_stack + 1) / 2);
                    // n_slice = 256;
                    uint32_t l1_split_loop = (sv_n + n_slice - 1) / n_slice;
                    WAIT_FLAG(MTE1, MTE2, kv_pingpong_flag * 2);
                    WAIT_FLAG(MTE1, MTE2, kv_pingpong_flag * 2 + 1);
                    gm_to_l1<ArchType::ASCEND_V220, QKV_DT, DataFormat::ND, DataFormat::NZ>(
                        l1v_buf_addr_tensor[kv_pingpong_offset],
                        v_gm_tensor[v_offset],
                        sv_n,       // nValue
                        sv_round_n, // dstNzC0Stride
                        0,          // dstNzMatrixStride, unused
                        embdv,        // dValue
                        0,          // dstNzMatrixStride, unused
                        stride_v   // srcDValue
                    );
                    v_offset += sv_n * stride_v;

                    WaitFlagDev(SOFTMAX_READY);
                    for (uint32_t gm_split_idx = 0; gm_split_idx < m_inner_loop; gm_split_idx++) {
                        WAIT_FLAG(FIX, M, l0c_pingpong_flag);
                        bool m_last_split = gm_split_idx == m_inner_loop - 1;
                        uint64_t gm_p_offset = gm_split_idx * split_m * sv_round_n;
                        uint32_t nowM = m_last_split ? qk_m - gm_split_idx * split_m : split_m;
                        uint32_t nowMRound = (nowM + 15) / 16 * 16;
                        uint32_t qk_round_k = 128;
                        for (uint32_t l1_k_split_idx = 0; l1_k_split_idx < l1_split_loop; l1_k_split_idx++) {
                            uint32_t l1_pingpong_flag = l1_k_split_idx % 2;
                            uint32_t l1_offset = l1_pingpong_flag * 128 * 256;
                            bool l1_last_split = l1_k_split_idx == l1_split_loop - 1;
                            uint32_t d = l1_last_split ? sv_n - l1_k_split_idx * n_slice : n_slice;
                            WAIT_FLAG(MTE1, MTE2, l1_pingpong_flag + 4);
                            if (nowM == 1) {
                                gm_to_l1<ArchType::ASCEND_V220, QKV_DT, DataFormat::ND, DataFormat::ND>(
                                    l1p_buf_addr_tensor[l1_offset],
                                    p_gm_tensor[((uint64_t)block_idx * TMP_SIZE +
                                                (n_idx - launch_delay) % vect_mod * TMP_SIZE / vect_mod) *
                                                2 / sizeof(QKV_DT) + l1_k_split_idx * n_slice + gm_p_offset],
                                    1, 0, 0, RoundUp<uint64_t>(sv_round_n, BlockSize<QKV_DT>()), // lenBurst
                                    0, 0);
                            } else {
                                gm_to_l1<ArchType::ASCEND_V220, QKV_DT, DataFormat::ND, DataFormat::NZ>(
                                    l1p_buf_addr_tensor[l1_offset],
                                    p_gm_tensor[((uint64_t)block_idx * TMP_SIZE +
                                                (n_idx - launch_delay) % vect_mod * TMP_SIZE / vect_mod) *
                                                2 / sizeof(QKV_DT) + l1_k_split_idx * n_slice + gm_p_offset],
                                    nowM,                           // nValue
                                    nowMRound,                     // dstNzC0Stride
                                    0,                              // dstNzMatrixStride, unused
                                    d,                           // dValue
                                    0,                              // dstNzMatrixStride, unused
                                    sv_round_n * 2 / sizeof(QKV_DT) // srcDValue
                                );
                            }
                            SET_FLAG(MTE2, MTE1, l1_pingpong_flag + 4);
                            WAIT_FLAG(MTE2, MTE1, l1_pingpong_flag + 4);
                            uint32_t d_split_loop = (d + 127) / 128;
                            for (uint32_t l0_k_split_idx = 0; l0_k_split_idx < d_split_loop; l0_k_split_idx++) {
                                uint32_t l0_pingpong_flag = l0_k_split_idx % 2;
                                uint32_t l0_offset = l0_pingpong_flag * 128 * 128;
                                bool l0_last_split = l0_k_split_idx == d_split_loop - 1;
                                int32_t l0_p_offset = nowM == 1 ? l0_k_split_idx * 128 : l0_k_split_idx * 128 * nowMRound;
                                bool initC = l0_k_split_idx== 0 && l1_k_split_idx == 0;
                                uint32_t reduce_d = l0_last_split ? d - l0_k_split_idx * 128 : 128;
                                uint32_t round_reduce_d = (reduce_d + 15) / 16 * 16;
                                WAIT_FLAG(M, MTE1, l0_pingpong_flag);
                                LoadDataToCa(l0a_buf_tensor[l0_offset], l1p_buf_addr_tensor[l1_offset + l0_p_offset],
                                            RoundUp<uint64_t>(round_reduce_d, BlockSize<QKV_DT>()), nowMRound, nowM);
                                if (l0_last_split){
                                    SET_FLAG(MTE1, MTE2, l1_pingpong_flag + 4);
                                }
                                WAIT_FLAG(M, MTE1, l0_pingpong_flag + 2);
                                for (uint32_t l0b_load_idx = 0; l0b_load_idx < 128 / BLOCK_SIZE; ++l0b_load_idx) {
                                    l1_to_l0_b<ArchType::ASCEND_V220, QKV_DT, true, DataFormat::VECTOR, DataFormat::VECTOR>(
                                        l0b_buf_tensor[l0_offset + l0b_load_idx * qk_round_k * BLOCK_SIZE],
                                        l1v_buf_addr_tensor[kv_pingpong_offset + l0b_load_idx * CUBE_MATRIX_SIZE +
                                                            l1_k_split_idx * n_slice * BLOCK_SIZE +
                                                            l0_k_split_idx * 128 * BLOCK_SIZE],
                                        0,
                                        qk_round_k / BLOCK_SIZE, // repeat
                                        0,
                                        sv_round_n / BLOCK_SIZE, // srcStride
                                        0,
                                        0 // dstStride
                                    );
                                }
                                if (l0_last_split && l1_last_split && m_last_split){
                                    SET_FLAG(MTE1, MTE2, kv_pingpong_flag * 2);
                                    SET_FLAG(MTE1, MTE2, kv_pingpong_flag * 2 + 1);
                                }
                                SET_FLAG(MTE1, M, l0_pingpong_flag + 6);
                                WAIT_FLAG(MTE1, M, l0_pingpong_flag + 6);
                                mmad<ArchType::ASCEND_V220, QKV_DT, QKV_DT, float, false>(
                                    l0c_buf_tensor[l0c_offset],
                                    l0a_buf_tensor[l0_offset],
                                    l0b_buf_tensor[l0_offset],
                                    nowM, // m
                                    qk_round_k,  // n
                                    reduce_d, // k
                                    initC     // cmatrixInitVal
                                );
                                PIPE_BARRIER(M);
                                SET_FLAG(M, MTE1, l0_pingpong_flag);
                                SET_FLAG(M, MTE1, l0_pingpong_flag + 2);
                            }
                        }
                        SET_FLAG(M, FIX, l0c_pingpong_flag);
                        WAIT_FLAG(M, FIX, l0c_pingpong_flag);
                        // // copy O to gm
                        l0c_to_gm<ArchType::ASCEND_V220, DataFormat::ND, float, float>(
                            o_tmp_gm_tensor[(uint64_t)block_idx * TMP_SIZE + (n_idx - launch_delay) % vect_mod * TMP_SIZE / vect_mod + gm_split_idx * split_m * qk_round_k],
                            l0c_buf_tensor[l0c_offset],
                            nowM,        // MSize
                            qk_round_k,     // NSize
                            nowMRound,  // srcStride
                            qk_round_k     // dstStride_dst_D
                        );
                        SET_FLAG(FIX, M, l0c_pingpong_flag);
                    }
                    FftsCrossCoreSync<PIPE_FIX, 2>(UPDATE_READY);
                    kv_pingpong_flag = 1 - kv_pingpong_flag;
                    kv_pingpong_offset = kv_pingpong_flag * KV_DB_SIZE;
                }
            }
        }
    }

private:
    __gm__ uint8_t *__restrict__ q_gm{nullptr};
    __gm__ uint8_t *__restrict__ q_rope_gm{nullptr};
    __gm__ uint8_t *__restrict__ k_gm{nullptr};
    __gm__ uint8_t *__restrict__ k_rope_gm{nullptr};
    __gm__ uint8_t *__restrict__ v_gm{nullptr};
    __gm__ uint8_t *__restrict__ s_gm{nullptr};
    __gm__ uint8_t *__restrict__ p_gm{nullptr};
    __gm__ uint8_t *__restrict__ o_tmp_gm{nullptr};
    __gm__ uint8_t *__restrict__ upo_tmp_gm{nullptr};
    __gm__ uint8_t *__restrict__ tiling_para_gm{nullptr};

    const uint32_t l1q_buf_addr_offset = 0;
    const uint32_t l1k_buf_addr_offset = 4 * L0AB_UINT8_BLOCK_SIZE;
    const uint32_t l1v_buf_addr_offset = 4 * L0AB_UINT8_BLOCK_SIZE;
    const uint32_t l1p_buf_addr_offset = 12 * L0AB_UINT8_BLOCK_SIZE;

    AsdopsBuffer<ArchType::ASCEND_V220> buf;

    AscendC::LocalTensor<QKV_DT> l1q_buf_addr_tensor = buf.GetBuffer<BufferType::ASCEND_CB, QKV_DT>(l1q_buf_addr_offset);
    AscendC::LocalTensor<QKV_DT> l1k_buf_addr_tensor = buf.GetBuffer<BufferType::ASCEND_CB, QKV_DT>(l1k_buf_addr_offset);
    AscendC::LocalTensor<QKV_DT> l1p_buf_addr_tensor = buf.GetBuffer<BufferType::ASCEND_CB, QKV_DT>(l1p_buf_addr_offset);
    AscendC::LocalTensor<QKV_DT> l1v_buf_addr_tensor = buf.GetBuffer<BufferType::ASCEND_CB, QKV_DT>(l1v_buf_addr_offset);

    AscendC::GlobalTensor<QKV_DT> q_gm_tensor;
    AscendC::GlobalTensor<QKV_DT> q_rope_gm_tensor;
    AscendC::GlobalTensor<QKV_DT> k_gm_tensor;
    AscendC::GlobalTensor<QKV_DT> k_rope_gm_tensor;
    AscendC::GlobalTensor<QKV_DT> v_gm_tensor;
    AscendC::GlobalTensor<float> s_gm_tensor;
    AscendC::GlobalTensor<QKV_DT> p_gm_tensor;
    AscendC::GlobalTensor<float> o_tmp_gm_tensor;
    AscendC::GlobalTensor<float> upo_gm_tensor;

    AscendC::LocalTensor<QKV_DT> l0a_buf_tensor = buf.GetBuffer<BufferType::ASCEND_L0A, QKV_DT>(0);
    AscendC::LocalTensor<QKV_DT> l0b_buf_tensor = buf.GetBuffer<BufferType::ASCEND_L0B, QKV_DT>(0);
    AscendC::LocalTensor<float> l0c_buf_tensor = buf.GetBuffer<BufferType::ASCEND_L0C, float>(0);

    uint32_t batch_size{0};
    uint32_t max_seqlen{0};
    uint32_t max_kv_seqlen{0};
    uint32_t q_heads{0};
    uint32_t embd{0};
    uint32_t embdv{0};
    uint32_t kv_heads{0};
    uint32_t is_triu_mask{0};
    uint32_t total_q_blk_num{0};
    uint32_t group_num{0};
    uint64_t stride_qo{0};
    uint64_t stride_o{0};
    uint64_t stride_v{0};
    uint64_t stride_k{0};
    uint64_t batch_stride_kv{0};
    uint32_t __k{0};
    uint32_t round_k{0};
    uint32_t data_shape_type{0};

    uint32_t tilingKey{0};
    uint32_t tiling_head_size{0};
    uint32_t tiling_para_size{0};
};

extern "C" __global__ __aicore__ void ring_mla_prefill_bf16(
    __gm__ uint8_t *__restrict__ sync,
    __gm__ uint8_t *__restrict__ q_gm,
    __gm__ uint8_t *__restrict__ q_rope_gm,
    __gm__ uint8_t *__restrict__ k_gm,
    __gm__ uint8_t *__restrict__ k_rope_gm,
    __gm__ uint8_t *__restrict__ v_gm,
    __gm__ uint8_t *__restrict__ mask_gm,
    __gm__ uint8_t *__restrict__ alibi_coeff_gm,
    __gm__ uint8_t *__restrict__ deq_qk_gm,
    __gm__ uint8_t *__restrict__ off_qk_gm,
    __gm__ uint8_t *__restrict__ deq_pv_gm,
    __gm__ uint8_t *__restrict__ off_pv_gm,
    __gm__ uint8_t *__restrict__ quant_p_gm,
    __gm__ uint8_t *__restrict__ logN_gm,
    __gm__ uint8_t *__restrict__ o_prev,
    __gm__ uint8_t *__restrict__ lse_prev,
    __gm__ uint8_t *__restrict__ o_gm,
    __gm__ uint8_t *__restrict__ lse_gm,
    __gm__ uint8_t *__restrict__ s_gm,
    __gm__ uint8_t *__restrict__ p_gm,
    __gm__ uint8_t *__restrict__ o_tmp_gm,
    __gm__ uint8_t *__restrict__ upo_tmp_gm,
    __gm__ uint8_t *__restrict__ tiling_para_gm)
{
    uint32_t tilingKey = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 16));
    // 仅在tilingKey为1的时候是bf，其余场景均当做half处理
    if (tilingKey == 1) {
        FlashAttentionEncoderHighPrecision<__bf16> fa_cube(sync, q_gm, q_rope_gm, k_gm, k_rope_gm, v_gm, s_gm, p_gm, o_tmp_gm, upo_tmp_gm, tiling_para_gm);
        fa_cube.Run<true>();
    } else {
        FlashAttentionEncoderHighPrecision<half> fa_cube(sync, q_gm, q_rope_gm, k_gm, k_rope_gm, v_gm, s_gm, p_gm, o_tmp_gm, upo_tmp_gm, tiling_para_gm);
        fa_cube.Run<false>();
    }
}

#endif

#ifdef __DAV_C220_VEC__
enum class ScaleType {
    SCALE_TOR = 0,
    SCALE_LOGN = 1,
    SCALE_LOGN_FP32 = 2
};

enum class SoftmaxTile {
    TILE_512_MAIN = 0,
    TILE_256_MAIN,
    TILE_128_MAIN,
    TILE_TAIL
};

__aicore__ __attribute__((always_inline)) inline void __set_mask(int32_t len)
{
    uint64_t mask = 0;
    uint64_t one = 1;
    uint64_t temp = len % FLOAT_VECTOR_SIZE;
    for (int64_t i = 0; i < temp; i++) {
        mask |= one << i;
    }

    if (len == VECTOR_SIZE || len == 0) {
        SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
    } else if (len >= FLOAT_VECTOR_SIZE) {
        SetVectorMask<int8_t>(mask, (uint64_t)-1);
    } else {
        SetVectorMask<int8_t>(0x0, mask);
    }
}


__aicore__ __attribute__((always_inline)) inline void __set_vcg_mask(int32_t len)
{
    if (len > 16 || len < 1) {
        SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
        return;
    }
    uint64_t subMask = ((uint64_t) 1 << len) - 1;
    uint64_t maskValue = (subMask << 48) + (subMask << 32) + (subMask << 16) + subMask +
                            (subMask << 56) + (subMask << 40) + (subMask << 24) + (subMask << 8);
    SetVectorMask<int8_t>(maskValue, maskValue);
}

template<typename S_DTYPE, SoftmaxTile TILE_MODE>
struct Rowmax {
    __aicore__ __attribute__((always_inline)) Rowmax(
        const AscendC::LocalTensor<S_DTYPE> &s_ub,
        const AscendC::LocalTensor<S_DTYPE> &local_rowmax_ub,
        const AscendC::LocalTensor<S_DTYPE> &tmp_ub,
        uint32_t m, uint32_t n_real, uint32_t n_stride);
};

template<typename EXP_DTYPE, SoftmaxTile TILE_MODE>
struct Rowsum {
    __aicore__ __attribute__((always_inline)) Rowsum(
        const AscendC::LocalTensor<EXP_DTYPE> &s_exp_ub,
        const AscendC::LocalTensor<EXP_DTYPE> &local_rowsum_ub,
        const AscendC::LocalTensor<EXP_DTYPE> &tmp_ub,
        uint32_t m, uint32_t n_real, uint32_t n_stride);
};

template<typename S_DTYPE>
struct Rowmax<S_DTYPE, SoftmaxTile::TILE_512_MAIN> {
    __aicore__ __attribute__((always_inline)) Rowmax(
        const AscendC::LocalTensor<S_DTYPE> &s_ub,
        const AscendC::LocalTensor<S_DTYPE> &local_rowmax_ub,
        const AscendC::LocalTensor<S_DTYPE> &tmp_ub,
        uint32_t m, uint32_t n_real, uint32_t n_stride)
    {
        cgmax_v<ArchType::ASCEND_V220, S_DTYPE>(
            tmp_ub,
            s_ub,
            m * n_stride / FLOAT_VECTOR_SIZE,
            1,
            1,
            8
        );
        PIPE_BARRIER(V);
        cgmax_v<ArchType::ASCEND_V220, S_DTYPE>(
            tmp_ub[REDUCE_UB_SIZE],
            tmp_ub,
            m * n_stride / FLOAT_BLOCK_SIZE / FLOAT_VECTOR_SIZE,
            1,
            1,
            8
        );
        PIPE_BARRIER(V);
        cgmax_v<ArchType::ASCEND_V220, S_DTYPE>(
            local_rowmax_ub,
            tmp_ub[REDUCE_UB_SIZE],
            m * n_stride / FLOAT_VECTOR_SIZE / FLOAT_VECTOR_SIZE,
            1,
            1,
            8
        );
        PIPE_BARRIER(V);
    }
};

template<typename S_DTYPE>
struct Rowmax<S_DTYPE, SoftmaxTile::TILE_256_MAIN>{
    __aicore__ __attribute__((always_inline)) Rowmax(
        const AscendC::LocalTensor<S_DTYPE> &s_ub,
        const AscendC::LocalTensor<S_DTYPE> &local_rowmax_ub,
        const AscendC::LocalTensor<S_DTYPE> &tmp_ub,
        uint32_t m, uint32_t n_real, uint32_t n_stride)
    {
        cgmax_v<ArchType::ASCEND_V220, S_DTYPE>(
            tmp_ub,
            s_ub,
            m * n_stride / FLOAT_VECTOR_SIZE,
            1,
            1,
            8
        );
        PIPE_BARRIER(V);
        __set_mask(32);
        cgmax_v<ArchType::ASCEND_V220, S_DTYPE>(
            tmp_ub[REDUCE_UB_SIZE],
            tmp_ub,
            m,
            1,
            1,
            4
        );
        PIPE_BARRIER(V);
        __set_vcg_mask(4);
        cgmax_v<ArchType::ASCEND_V220, S_DTYPE>(
            local_rowmax_ub,
            tmp_ub[REDUCE_UB_SIZE],
            (m * FLOAT_BLOCK_SIZE + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE,
            1,
            1,
            8
        );
        PIPE_BARRIER(V);
        SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
    }
};

template<typename EXP_DTYPE>
struct Rowsum<EXP_DTYPE, SoftmaxTile::TILE_512_MAIN>{
    __aicore__ __attribute__((always_inline)) Rowsum(
        const AscendC::LocalTensor<EXP_DTYPE> &s_exp_ub,
        const AscendC::LocalTensor<EXP_DTYPE> &local_rowsum_ub,
        const AscendC::LocalTensor<EXP_DTYPE> &tmp_ub,
        uint32_t m, uint32_t n_real, uint32_t n_stride)
    {
        cgadd_v<ArchType::ASCEND_V220, EXP_DTYPE>(
            tmp_ub,
            s_exp_ub,
            m * n_stride / FLOAT_VECTOR_SIZE,
            1,
            1,
            8
        );
        PIPE_BARRIER(V);
        cgadd_v<ArchType::ASCEND_V220, EXP_DTYPE>(
            tmp_ub[REDUCE_UB_SIZE],
            tmp_ub,
            m * n_stride / FLOAT_BLOCK_SIZE / FLOAT_VECTOR_SIZE,
            1,
            1,
            8
        );
        PIPE_BARRIER(V);
        cgadd_v<ArchType::ASCEND_V220, EXP_DTYPE>(
            local_rowsum_ub,
            tmp_ub[REDUCE_UB_SIZE],
            m * n_stride / FLOAT_VECTOR_SIZE / FLOAT_VECTOR_SIZE,
            1,
            1,
            8
        );
        PIPE_BARRIER(V);
    }
};

template<typename EXP_DTYPE>
struct Rowsum<EXP_DTYPE, SoftmaxTile::TILE_256_MAIN>{
    __aicore__ __attribute__((always_inline)) Rowsum(
        const AscendC::LocalTensor<EXP_DTYPE> &s_exp_ub,
        const AscendC::LocalTensor<EXP_DTYPE> &local_rowsum_ub,
        const AscendC::LocalTensor<EXP_DTYPE> &tmp_ub,
        uint32_t m, uint32_t n_real, uint32_t n_stride)
    {
        cgadd_v<ArchType::ASCEND_V220, EXP_DTYPE>(
            tmp_ub,
            s_exp_ub,
            m * n_stride / FLOAT_VECTOR_SIZE,
            1,
            1,
            8
        );
        PIPE_BARRIER(V);
        __set_mask(32);
        cgadd_v<ArchType::ASCEND_V220, EXP_DTYPE>(
            tmp_ub[REDUCE_UB_SIZE],
            tmp_ub,
            m,
            1,
            1,
            4
        );
        PIPE_BARRIER(V);
        __set_vcg_mask(4);
        cgadd_v<ArchType::ASCEND_V220, EXP_DTYPE>(
            local_rowsum_ub,
            tmp_ub[REDUCE_UB_SIZE],
            (m * FLOAT_BLOCK_SIZE + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE,
            1,
            1,
            8
        );
        PIPE_BARRIER(V);
        SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
    }
};


template<typename S_DTYPE>
struct Rowmax<S_DTYPE, SoftmaxTile::TILE_TAIL>{
    __aicore__ __attribute__((always_inline)) Rowmax(
        const AscendC::LocalTensor<S_DTYPE> &s_ub,
        const AscendC::LocalTensor<S_DTYPE> &local_rowmax_ub,
        const AscendC::LocalTensor<S_DTYPE> &tmp_ub,
        uint32_t m, uint32_t n_real, uint32_t n_stride)
    {
        if (n_real >= FLOAT_VECTOR_SIZE) {
            cgmax_v<ArchType::ASCEND_V220, S_DTYPE>(
                tmp_ub,
                s_ub,
                m,
                1,
                1,
                n_stride / FLOAT_BLOCK_SIZE
            );
            PIPE_BARRIER(V);
            cgmax_v<ArchType::ASCEND_V220, S_DTYPE>(
                local_rowmax_ub,
                tmp_ub,
                (m * FLOAT_BLOCK_SIZE + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE,
                1,
                1,
                8
            );
            PIPE_BARRIER(V);
            for (uint64_t rowmax_idx = 1; rowmax_idx < (uint64_t)n_real / FLOAT_VECTOR_SIZE; ++rowmax_idx) {
                cgmax_v<ArchType::ASCEND_V220, S_DTYPE>(
                    tmp_ub,
                    s_ub[rowmax_idx * FLOAT_VECTOR_SIZE],
                    m,
                    1,
                    1,
                    n_stride / FLOAT_BLOCK_SIZE
                );
                PIPE_BARRIER(V);
                cgmax_v<ArchType::ASCEND_V220, S_DTYPE>(
                    tmp_ub[REDUCE_UB_SIZE],
                    tmp_ub,
                    (m * FLOAT_BLOCK_SIZE + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE,
                    1,
                    1,
                    8
                );
                PIPE_BARRIER(V);
                __set_mask(m);
                max_v<ArchType::ASCEND_V220, S_DTYPE>(
                    local_rowmax_ub,
                    local_rowmax_ub,
                    tmp_ub[REDUCE_UB_SIZE],
                    1,                        // repeat
                    1,                            // dstBlockStride
                    1,                            // src0BlockStride
                    1,                            // src1BlockStride
                    8,                            // dstRepeatStride
                    8,                            // src0RepeatStride
                    8 // src1RepeatStride
                );
                PIPE_BARRIER(V);
                SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
            }
        }
        if (n_real % FLOAT_VECTOR_SIZE > 0) {
            __set_mask(n_real % FLOAT_VECTOR_SIZE);
            cgmax_v<ArchType::ASCEND_V220, S_DTYPE>(
                tmp_ub,
                s_ub[n_real / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
                m,
                1,
                1,
                n_stride / FLOAT_BLOCK_SIZE
            );
            PIPE_BARRIER(V);
            __set_vcg_mask((n_real % FLOAT_VECTOR_SIZE + FLOAT_BLOCK_SIZE - 1)/ FLOAT_BLOCK_SIZE);
            if (n_real < FLOAT_VECTOR_SIZE) {
                cgmax_v<ArchType::ASCEND_V220, S_DTYPE>(
                    local_rowmax_ub,
                    tmp_ub,
                    (m * FLOAT_BLOCK_SIZE + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE,
                    1,
                    1,
                    8
                );
                PIPE_BARRIER(V);
            } else {
                cgmax_v<ArchType::ASCEND_V220, S_DTYPE>(
                    tmp_ub[REDUCE_UB_SIZE],
                    tmp_ub,
                    (m * FLOAT_BLOCK_SIZE + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE,
                    1,
                    1,
                    8
                );
                PIPE_BARRIER(V);
                __set_mask(m);
                max_v<ArchType::ASCEND_V220, S_DTYPE>(
                    local_rowmax_ub,
                    local_rowmax_ub,
                    tmp_ub[REDUCE_UB_SIZE],
                    1,                        // repeat
                    1,                            // dstBlockStride
                    1,                            // src0BlockStride
                    1,                            // src1BlockStride
                    8,                            // dstRepeatStride
                    8,                            // src0RepeatStride
                    8 // src1RepeatStride
                );
                PIPE_BARRIER(V);
            }
            SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
        }
    }
};

template<typename EXP_DTYPE>
struct Rowsum<EXP_DTYPE, SoftmaxTile::TILE_TAIL>{
    __aicore__ __attribute__((always_inline)) Rowsum(
        const AscendC::LocalTensor<EXP_DTYPE> &s_exp_ub,
        const AscendC::LocalTensor<EXP_DTYPE> &local_rowsum_ub,
        const AscendC::LocalTensor<EXP_DTYPE> &tmp_ub,
        uint32_t m, uint32_t n_real, uint32_t n_stride)
    {
        if (n_real >= FLOAT_VECTOR_SIZE) {
            cgadd_v<ArchType::ASCEND_V220, EXP_DTYPE>(
                tmp_ub,
                s_exp_ub,
                m,
                1,
                1,
                n_stride / FLOAT_BLOCK_SIZE
            );
            PIPE_BARRIER(V);
            cgadd_v<ArchType::ASCEND_V220, EXP_DTYPE>(
                local_rowsum_ub,
                tmp_ub,
                (m * FLOAT_BLOCK_SIZE + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE,
                1,
                1,
                8
            );
            PIPE_BARRIER(V);
            for (uint64_t rowsum_idx = 1; rowsum_idx < (uint64_t)n_real / FLOAT_VECTOR_SIZE; ++rowsum_idx) {
                cgadd_v<ArchType::ASCEND_V220, EXP_DTYPE>(
                    tmp_ub,
                    s_exp_ub[rowsum_idx * FLOAT_VECTOR_SIZE],
                    m,
                    1,
                    1,
                    n_stride / FLOAT_BLOCK_SIZE
                );
                PIPE_BARRIER(V);
                cgadd_v<ArchType::ASCEND_V220, EXP_DTYPE>(
                    tmp_ub[REDUCE_UB_SIZE],
                    tmp_ub,
                    (m * FLOAT_BLOCK_SIZE + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE,
                    1,
                    1,
                    8
                );
                PIPE_BARRIER(V);
                __set_mask(m);
                add_v<ArchType::ASCEND_V220, EXP_DTYPE>(
                    local_rowsum_ub,
                    local_rowsum_ub,
                    tmp_ub[REDUCE_UB_SIZE],
                    1,                        // repeat
                    1,                            // dstBlockStride
                    1,                            // src0BlockStride
                    1,                            // src1BlockStride
                    8,                            // dstRepeatStride
                    8,                            // src0RepeatStride
                    8 // src1RepeatStride
                );
                PIPE_BARRIER(V);
                SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
            }
        }
        if (n_real % FLOAT_VECTOR_SIZE > 0) {
            __set_mask(n_real % FLOAT_VECTOR_SIZE);
            cgadd_v<ArchType::ASCEND_V220, EXP_DTYPE>(
                tmp_ub,
                s_exp_ub[n_real / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
                m,
                1,
                1,
                n_stride / FLOAT_BLOCK_SIZE
            );
            PIPE_BARRIER(V);
            __set_vcg_mask((n_real % FLOAT_VECTOR_SIZE + FLOAT_BLOCK_SIZE - 1)/ FLOAT_BLOCK_SIZE);
            if (n_real < FLOAT_VECTOR_SIZE) {
                cgadd_v<ArchType::ASCEND_V220, EXP_DTYPE>(
                    local_rowsum_ub,
                    tmp_ub,
                    (m * FLOAT_BLOCK_SIZE + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE,
                    1,
                    1,
                    8
                );
                PIPE_BARRIER(V);
            } else {
                cgadd_v<ArchType::ASCEND_V220, EXP_DTYPE>(
                    tmp_ub[REDUCE_UB_SIZE],
                    tmp_ub,
                    (m * FLOAT_BLOCK_SIZE + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE,
                    1,
                    1,
                    8
                );
                PIPE_BARRIER(V);
                __set_mask(m);
                add_v<ArchType::ASCEND_V220, EXP_DTYPE>(
                    local_rowsum_ub,
                    local_rowsum_ub,
                    tmp_ub[REDUCE_UB_SIZE],
                    1,                        // repeat
                    1,                            // dstBlockStride
                    1,                            // src0BlockStride
                    1,                            // src1BlockStride
                    8,                            // dstRepeatStride
                    8,                            // src0RepeatStride
                    8 // src1RepeatStride
                );
                PIPE_BARRIER(V);
            }
            SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
        }
    }
};

template<typename S_DTYPE, typename EXP_DTYPE, typename P_DTYPE, typename MASK_DTYPE, uint32_t MASK_TYPE>
__aicore__ __attribute__((always_inline)) void OnlineSoftmaxStage1(
    const AscendC::LocalTensor<S_DTYPE> &s_ub,
    const AscendC::LocalTensor<MASK_DTYPE> &mask_orig_ub,
    const AscendC::GlobalTensor<MASK_DTYPE> &o_gm,
    const AscendC::LocalTensor<S_DTYPE> &mask_processed_ub,
    const AscendC::LocalTensor<S_DTYPE> &local_rowmax_ub,
    const AscendC::LocalTensor<S_DTYPE> &hat_rowmax_ub,
    const AscendC::LocalTensor<S_DTYPE> &global_rowmax_ub,
    const AscendC::LocalTensor<S_DTYPE> &diff_rowmax_ub,
    const AscendC::LocalTensor<EXP_DTYPE> &s_exp_ub,
    const AscendC::LocalTensor<EXP_DTYPE> &local_rowsum_ub,
    const AscendC::LocalTensor<EXP_DTYPE> &global_rowsum_ub,
    const AscendC::LocalTensor<P_DTYPE> &p_ub,
    const AscendC::LocalTensor<EXP_DTYPE> &tmp_ub,
    const AscendC::GlobalTensor<S_DTYPE> &s_gm,
    const AscendC::GlobalTensor<P_DTYPE> &p_gm,
    bool first_n_iter, S_DTYPE tor,
    uint32_t m, uint32_t n_real, uint32_t n_stride, uint32_t pingpong_flag,
    bool move_flag, uint32_t long_seq, uint32_t mask_type, uint32_t m_idx, uint32_t m_ind, uint32_t n_idx, uint32_t sub_block_idx)
{
    uint32_t round_m = (m + FLOAT_BLOCK_SIZE - 1) / FLOAT_BLOCK_SIZE * FLOAT_BLOCK_SIZE;
    if constexpr(MASK_TYPE != 0) {
        if (move_flag && long_seq) {
            WAIT_FLAG(MTE2, V, EVENT_ID6);
            conv_v<ArchType::ASCEND_V220, MASK_DTYPE, S_DTYPE>(
                mask_processed_ub,
                mask_orig_ub,
                (m * n_stride + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                1,                                                                // dstBlockStride
                1,                                                                // srcBlockStride
                8,                                                                // dstRepeatStride
                4                                                                 // srcRepeatStride
            );
            PIPE_BARRIER(V);
            muls_v<ArchType::ASCEND_V220, float>(
                mask_processed_ub,
                mask_processed_ub, (float)-3e38,
                (m * n_stride + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                1,                                                                // dstBlockStride
                1,                                                                // srcBlockStride
                8,                                                                // dstRepeatStride
                8                                                                 // srcRepeatStride
            );
            PIPE_BARRIER(V);
            SET_FLAG(V, MTE2, EVENT_ID6);
        }
    }

    WAIT_FLAG(MTE3, MTE2, pingpong_flag);
    // input QK
    gm_to_ub<ArchType::ASCEND_V220, S_DTYPE>(
        s_ub,
        s_gm,
        0,                                // sid
        m,                                // nBurst
        n_stride / FLOAT_BLOCK_SIZE,  // lenBurst
        0,                                // srcGap
        0                                 // dstGap
    );
    SET_FLAG(MTE2, V, pingpong_flag);
    WAIT_FLAG(MTE2, V, pingpong_flag);
    // *** ls = tor * ls
    muls_v<ArchType::ASCEND_V220, S_DTYPE>(
        s_ub,
        s_ub,
        tor,
        (m * n_stride + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
        1,                                                                // dstBlockStride
        1,                                                                // srcBlockStride
        8,                                                                // dstRepeatStride
        8                                                                 // srcRepeatStride
    );
    PIPE_BARRIER(V);
    if constexpr(MASK_TYPE != 0) {
        if (move_flag && long_seq) {
            add_v<ArchType::ASCEND_V220, S_DTYPE>(
                s_ub,
                s_ub,
                mask_processed_ub,
                (m * n_stride + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                1,                                                                // dstBlockStride
                1,                                                                // src0BlockStride
                1,                                                                // src1BlockStride
                8,                                                                // dstRepeatStride
                8,                                                                // src0RepeatStride
                8                                                                 // src1RepeatStride
            );
            PIPE_BARRIER(V);
        }
    }
    // if (m_idx == 7 && m_ind == 0 && n_idx == 4) {
    //     PIPE_BARRIER(ALL);
    //     ub_to_gm_align<ArchType::ASCEND_V220, MASK_DTYPE>(
    //         o_gm,
    //         s_ub.template ReinterpretCast<MASK_DTYPE>(),
    //         0,                    // sid
    //         16,                // nBurst
    //         512 * 2,              // lenBurst
    //         0,                    // leftPaddingNum
    //         0,                    // rightPaddingNum
    //         0,                    // srcGap
    //         0 // dstGap
    //     );
    //     // ub_to_gm_align<ArchType::ASCEND_V220, MASK_DTYPE>(
    //     //     o_gm,
    //     //     mask_processed_ub.template ReinterpretCast<MASK_DTYPE>(),
    //     //     0,                    // sid
    //     //     16,                // nBurst
    //     //     512 * 2,              // lenBurst
    //     //     0,                    // leftPaddingNum
    //     //     0,                    // rightPaddingNum
    //     //     0,                    // srcGap
    //     //     0 // dstGap
    //     // );
    //     PIPE_BARRIER(ALL);

    // }

    if (n_real == 512) {
        Rowmax<S_DTYPE, SoftmaxTile::TILE_512_MAIN>(
            s_ub,
            local_rowmax_ub,
            tmp_ub,
            round_m, n_real, n_stride
        );
    } else if (n_real == 256) {
        Rowmax<S_DTYPE, SoftmaxTile::TILE_256_MAIN>(
            s_ub,
            local_rowmax_ub,
            tmp_ub,
            round_m, n_real, n_stride
        );
    } else {
        Rowmax<S_DTYPE, SoftmaxTile::TILE_TAIL>(
            s_ub,
            local_rowmax_ub,
            tmp_ub,
            round_m, n_real, n_stride
        );
    }

    if (first_n_iter) {
        // *** hm = lm
        ub_to_ub<ArchType::ASCEND_V220, S_DTYPE>(
            hat_rowmax_ub,
            local_rowmax_ub,
            0,                              // sid
            1,                              // nBurst
            round_m / FLOAT_BLOCK_SIZE, // lenBurst
            0,                              // srcGap
            0                               // dstGap
        );
        PIPE_BARRIER(V);
    } else {
        __set_mask(m);
        // *** hm = vmax(lm, gm)
        max_v<ArchType::ASCEND_V220, S_DTYPE>(
            hat_rowmax_ub,
            local_rowmax_ub,
            global_rowmax_ub,
            1,         // repeat
            1,         // dstBlockStride
            1,         // src0BlockStride
            1,         // src1BlockStride
            8,         // dstRepeatStride
            8,         // src0RepeatStride
            8          // src1RepeatStride
        );
        PIPE_BARRIER(V);
        // *** dm = gm - hm
        sub_v<ArchType::ASCEND_V220, S_DTYPE>(
            diff_rowmax_ub,
            global_rowmax_ub,
            hat_rowmax_ub,
            1,         // repeat
            1,         // dstBlockStride
            1,         // src0BlockStride
            1,         // src1BlockStride
            8,         // dstRepeatStride
            8,         // src0RepeatStride
            8          // src1RepeatStride
        );
        PIPE_BARRIER(V);
        // *** dm = exp(dm)
        exp_v<ArchType::ASCEND_V220, S_DTYPE>(
            diff_rowmax_ub,
            diff_rowmax_ub,
            1,         // repeat
            1,         // dstBlockStride
            1,         // srcBlockStride
            8,         // dstRepeatStride
            8          // srcRepeatStride
        );
    }
    SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
    PIPE_BARRIER(V);
    // *** gm = hm
    ub_to_ub<ArchType::ASCEND_V220, S_DTYPE>(
        global_rowmax_ub,
        hat_rowmax_ub,
        0,                              // sid
        1,                              // nBurst
        round_m / FLOAT_BLOCK_SIZE, // lenBurst
        0,                              // srcGap
        0                               // dstGap
    );
    PIPE_BARRIER(V);
    // *** hm_block = expand_to_block(hm), 存放于 tv
    brcb_v<ArchType::ASCEND_V220, uint32_t>(
        tmp_ub.template ReinterpretCast<uint32_t>(),
        hat_rowmax_ub.template ReinterpretCast<uint32_t>(),
        1,                             // dstBlockStride
        8,                             // dstRepeatStride
        round_m / FLOAT_BLOCK_SIZE // repeat
    );
    PIPE_BARRIER(V);
    // *** ls = ls - hm_block
    // for (uint32_t sub_idx = 0; sub_idx < m; ++sub_idx) {
    //     sub_v<ArchType::ASCEND_V220, S_DTYPE>(
    //         s_ub[sub_idx * n_stride],
    //         s_ub[sub_idx * n_stride],
    //         tmp_ub[sub_idx * 8],
    //         n_real / FLOAT_VECTOR_SIZE,                         // repeat
    //         1,                             // dstBlockStride
    //         1,                             // src0BlockStride
    //         0,                             // src1BlockStride
    //         8, // dstRepeatStride
    //         8, // src0RepeatStride
    //         0                              // src1RepeatStride
    //     );
    //     PIPE_BARRIER(V);
    //     __set_mask(n_real % FLOAT_VECTOR_SIZE);
    //     sub_v<ArchType::ASCEND_V220, S_DTYPE>(
    //         s_ub[sub_idx * n_stride + n_real / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
    //         s_ub[sub_idx * n_stride + n_real / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
    //         tmp_ub[sub_idx * FLOAT_BLOCK_SIZE],
    //         n_real % FLOAT_VECTOR_SIZE > 0,                         // repeat
    //         1,                             // dstBlockStride
    //         1,                             // src0BlockStride
    //         0,                             // src1BlockStride
    //         8, // dstRepeatStride
    //         8, // src0RepeatStride
    //         0                              // src1RepeatStride
    //     );
    //     PIPE_BARRIER(V);
    //     SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
    // }
    for (uint32_t vsub_idx = 0; vsub_idx < n_real / FLOAT_VECTOR_SIZE; ++vsub_idx) {
        sub_v<ArchType::ASCEND_V220, float>(
            s_ub[vsub_idx * FLOAT_VECTOR_SIZE],
            s_ub[vsub_idx * FLOAT_VECTOR_SIZE],
            tmp_ub,
            m,                         // repeat
            1,                             // dstBlockStride
            1,                             // src0BlockStride
            0,                             // src1BlockStride
            n_stride / FLOAT_BLOCK_SIZE, // dstRepeatStride
            n_stride / FLOAT_BLOCK_SIZE, // src0RepeatStride
            1                              // src1RepeatStride
        );
    }
    if (n_real % FLOAT_VECTOR_SIZE > 0) {
        __set_mask(n_real % FLOAT_VECTOR_SIZE);
        sub_v<ArchType::ASCEND_V220, float>(
            s_ub[n_real / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
            s_ub[n_real / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
            tmp_ub,
            m,                         // repeat
            1,                             // dstBlockStride
            1,                             // src0BlockStride
            0,                             // src1BlockStride
            n_stride / FLOAT_BLOCK_SIZE, // dstRepeatStride
            n_stride / FLOAT_BLOCK_SIZE, // src0RepeatStride
            1                              // src1RepeatStride
        );
        SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
    }
    PIPE_BARRIER(V);

    // PIPE_BARRIER(V);
    // *** ls = exp(ls)
    exp_v<ArchType::ASCEND_V220, EXP_DTYPE>(
        s_exp_ub,
        s_ub,
        (m * n_stride + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
        1,                                                                // dstBlockStride
        1,                                                                // srcBlockStride
        8,                                                                // dstRepeatStride
        8                                                                 // srcRepeatStride
    );
     PIPE_BARRIER(V);
    // *** ll = rowsum(ls32)
    if (n_real == 512) {
        Rowsum<EXP_DTYPE, SoftmaxTile::TILE_512_MAIN>(
            s_exp_ub,
            local_rowsum_ub,
            tmp_ub,
            round_m, n_real, n_stride
        );
    } else if (n_real == 256) {
        Rowsum<EXP_DTYPE, SoftmaxTile::TILE_256_MAIN>(
            s_exp_ub,
            local_rowsum_ub,
            tmp_ub,
            round_m, n_real, n_stride
        );
    } else {
        Rowsum<EXP_DTYPE, SoftmaxTile::TILE_TAIL>(
            s_exp_ub,
            local_rowsum_ub,
            tmp_ub,
            round_m, n_real, n_stride
        );
    }

    // *** lp = castfp32to16(ls)

    conv_v<ArchType::ASCEND_V220, EXP_DTYPE, P_DTYPE>(
        p_ub, s_exp_ub,
        (m * n_stride + FLOAT_VECTOR_SIZE - 1) /
            FLOAT_VECTOR_SIZE, // repeat
        1,                     // dstBlockStride
        1,                     // srcBlockStride
        4,                     // dstRepeatStride
        8                      // srcRepeatStride
    );
    SET_FLAG(V, MTE3, pingpong_flag);
    WAIT_FLAG(V, MTE3, pingpong_flag);
    ub_to_gm<ArchType::ASCEND_V220, P_DTYPE>(
        p_gm,
        p_ub,
        0,                                    // sid
        m,                              // nBurst
        n_stride * 2 / BlockSize<int8_t>(), // lenBurst
        0,                                    // srcGap
        0                                     // dstGap
    );
    SET_FLAG(MTE3, MTE2, pingpong_flag);
    if (first_n_iter) {
        // *** gl = ll
        ub_to_ub<ArchType::ASCEND_V220, EXP_DTYPE>(
            global_rowsum_ub,
            local_rowsum_ub,
            0,                              // sid
            1,                              // nBurst
            round_m / FLOAT_BLOCK_SIZE, // lenBurst
            0,                              // srcGap
            0                               // dstGap
        );
        PIPE_BARRIER(V);
    } else {
        __set_mask(m);
        // *** gl = dm * gl
        mul_v<ArchType::ASCEND_V220, EXP_DTYPE>(
            global_rowsum_ub,
            diff_rowmax_ub,
            global_rowsum_ub,
            1, // repeat
            1,         // dstBlockStride
            1,         // src0BlockStride
            1,         // src1BlockStride
            8,         // dstRepeatStride
            8,         // src0RepeatStride
            8          // src1RepeatStride
        );
        PIPE_BARRIER(V);
        // *** gl = ll + gl
        add_v<ArchType::ASCEND_V220, EXP_DTYPE>(
            global_rowsum_ub,
            global_rowsum_ub,
            local_rowsum_ub,
            1, // repeat
            1,         // dstBlockStride
            1,         // src0BlockStride
            1,         // src1BlockStride
            8,         // dstRepeatStride
            8,         // src0RepeatStride
            8          // src1RepeatStride
        );
        PIPE_BARRIER(V);
        SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
    }
}


template<typename IN_DATA_TYPE, typename QKV_DT = IN_DATA_TYPE, typename O_DT = IN_DATA_TYPE, bool int8_flag = false>
class FlashAttentionEncoderHighPrecisionVec {
public:
    __aicore__ __attribute__((always_inline)) inline FlashAttentionEncoderHighPrecisionVec(
        __gm__ uint8_t *__restrict__ sync, __gm__ uint8_t *__restrict__ mask_gm,
        __gm__ uint8_t *__restrict__ alibi_coeff_gm, __gm__ uint8_t *__restrict__ o_gm,
        __gm__ uint8_t *__restrict__ s_gm, __gm__ uint8_t *__restrict__ p_gm, __gm__ uint8_t *__restrict__ o_tmp_gm,
        __gm__ uint8_t *__restrict__ tiling_para_gm, __gm__ uint8_t *__restrict__ deq_qk_gm,
        __gm__ uint8_t *__restrict__ off_qk_gm, __gm__ uint8_t *__restrict__ quant_p_gm,
        __gm__ uint8_t *__restrict__ deq_pv_gm, __gm__ uint8_t *__restrict__ off_pv_gm, __gm__ uint8_t *__restrict__ logN_gm,
        __gm__ uint8_t *__restrict__ o_prev,__gm__ uint8_t *__restrict__ lse_prev,__gm__ uint8_t *__restrict__ lse_gm)
        : mask_gm(mask_gm), o_gm(o_gm), alibi_coeff_gm(alibi_coeff_gm), s_gm(s_gm), p_gm(p_gm), o_tmp_gm(o_tmp_gm),
          tiling_para_gm(tiling_para_gm), deq_qk_gm(deq_qk_gm), off_qk_gm(off_qk_gm), quant_p_gm(quant_p_gm),
          deq_pv_gm(deq_pv_gm), off_pv_gm(off_pv_gm), logN_gm(logN_gm), o_prev(o_prev), lse_prev(lse_prev), lse_gm(lse_gm)
    {
        SetFftsBaseAddr((unsigned long)sync);
        SetAtomicnone();
        SetMasknorm();
        SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);

        this->sub_block_idx = GetSubBlockidx();
        this->batch_size = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm));
        this->max_seqlen = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 1));
        this->q_heads = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 2));
        this->embd = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 3));
        this->embdv = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 23));
        this->tor = (float)(*((__gm__ float *)tiling_para_gm + 5));
        this->head_stride = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 6));
        this->mask_stride = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 7));
        this->is_triu_mask = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 8));
        this->total_q_blk_num = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 9));
        this->isClamp = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 10));
        this->clampMin = (float)(*((__gm__ float *)tiling_para_gm + 11));
        this->clampMax = (float)(*((__gm__ float *)tiling_para_gm + 12));
        this->tiling_head_size = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 14));
        this->tiling_para_size = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 15));
        this->tilingKey = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 16));
        this->long_seq = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 17));
        this->is_sqrt = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 19));
        this->mask_type = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 20));
        this->alibi_compress_offset = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 21));
        this->alibi_left_align = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 22));
        this->quantType = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 24));
        this->data_shape_type = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 25));
        this->stride_qo = q_heads * embdv;
        if (this->data_shape_type == 1) {
            this->stride_qo = embdv;
        }

        this->__k = embd;
        this->round_k = (__k + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;
        this->scaleType = (ScaleType)(*((__gm__ int32_t *)tiling_para_gm + 26));
        SET_FLAG(MTE3, MTE2, EVENT_ID0);
        SET_FLAG(MTE3, MTE2, EVENT_ID1);
        SET_FLAG(MTE3, MTE2, EVENT_ID2);
        SET_FLAG(V, MTE2, EVENT_ID0);
        SET_FLAG(V, MTE2, EVENT_ID1);
        SET_FLAG(V, MTE2, EVENT_ID2);
        SET_FLAG(V, MTE2, EVENT_ID6);
        SET_FLAG(V, MTE2, EVENT_ID7);
        SET_FLAG(MTE3, V, EVENT_ID0);
    }
    __aicore__ __attribute__((always_inline)) inline ~FlashAttentionEncoderHighPrecisionVec()
    {
        WAIT_FLAG(MTE3, MTE2, EVENT_ID0);
        WAIT_FLAG(MTE3, MTE2, EVENT_ID1);
        WAIT_FLAG(MTE3, MTE2, EVENT_ID2);
        WAIT_FLAG(V, MTE2, EVENT_ID0);
        WAIT_FLAG(V, MTE2, EVENT_ID1);
        WAIT_FLAG(V, MTE2, EVENT_ID2);
        WAIT_FLAG(V, MTE2, EVENT_ID6);
        WAIT_FLAG(V, MTE2, EVENT_ID7);
        WAIT_FLAG(MTE3, V, EVENT_ID0);
        PIPE_BARRIER(ALL);
    }

    __aicore__ __attribute__((always_inline)) inline uint32_t GetTilingKey()
    {
        return this->tilingKey;
    }


    template<typename Dtype>
    __aicore__ __attribute__((always_inline)) inline uint32_t VectorSize()
    {
        return 256 / sizeof(Dtype);
    }

    template<typename Dtype>
    __aicore__ __attribute__((always_inline)) inline uint64_t NumVectorsRoundUp(uint64_t num)
    {
        return (num + VectorSize<Dtype>() - 1) / VectorSize<Dtype>();
    }

    __aicore__ __attribute__((always_inline)) inline void DeqPerHeadS322F32(AscendC::LocalTensor<float> &s,
                                                                            __gm__ uint8_t *deq_qk_gm,
                                                                            __gm__ uint8_t *off_qk_gm,
                                                                            uint32_t head_idx, uint32_t len)
    {
        // dequant QK
        // int32_t转成float类型
        conv_v<ArchType::ASCEND_V220, int32_t, float>(s, s.ReinterpretCast<int32_t>(),
                                                      NumVectorsRoundUp<int32_t>(len), // repeat
                                                      1,                        // dstBlockStride
                                                      1,                        // srcBlockStride
                                                      8,                        // dstRepeatStride
                                                      8                         // srcRepeatStride
        );
        PIPE_BARRIER(V);

        // scale
        float s_quant_scale = *((__gm__ float *)deq_qk_gm + head_idx);
        muls_v<ArchType::ASCEND_V220, float>(s, s, s_quant_scale,
                                             NumVectorsRoundUp<float>(len), // repeat
                                             1,                             // dstBlockStride
                                             1,                             // srcBlockStride
                                             8,                             // dstRepeatStride
                                             8                              // srcRepeatStride
        );
        PIPE_BARRIER(V);
    }

    template <typename T>
    __aicore__ inline void DivRepeatM(const AscendC::LocalTensor<T> &dst, const AscendC::LocalTensor<T> &src0,
                                      const AscendC::LocalTensor<T> &src1, const uint32_t sub_m, const uint32_t qk_n,
                                      const uint32_t qk_round_n)
    {
        uint32_t T_BLOCK_SIZE = BlockSize<T>();
        uint32_t T_VECTOR_SIZE = VectorSize<T>();
        for (uint32_t row_idx = 0; row_idx < qk_n / T_VECTOR_SIZE; ++row_idx) {
            div_v<ArchType::ASCEND_V220, T>(dst[row_idx * T_VECTOR_SIZE], src0[row_idx * T_VECTOR_SIZE], src1,
                                            sub_m,                     // repeat
                                            1,                         // dstBlockStride
                                            1,                         // src0BlockStride
                                            0,                         // src1BlockStride
                                            qk_round_n / T_BLOCK_SIZE, // dstRepeatStride
                                            qk_round_n / T_BLOCK_SIZE, // src0RepeatStride
                                            1                          // src1RepeatStride
            );
        }
        if (qk_n % T_VECTOR_SIZE > 0) {
            __set_mask(qk_n % T_VECTOR_SIZE);
            div_v<ArchType::ASCEND_V220, T>(dst[qk_n / T_VECTOR_SIZE * T_VECTOR_SIZE],
                                            src0[qk_n / T_VECTOR_SIZE * T_VECTOR_SIZE], src1,
                                            sub_m,                     // repeat
                                            1,                         // dstBlockStride
                                            1,                         // src0BlockStride
                                            0,                         // src1BlockStride
                                            qk_round_n / T_BLOCK_SIZE, // dstRepeatStride
                                            qk_round_n / T_BLOCK_SIZE, // src0RepeatStride
                                            1                          // src1RepeatStride
            );
            SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
        }
        PIPE_BARRIER(V);
    }

    __aicore__ inline void SymmetricDeQuant(const AscendC::LocalTensor<float> &lo_ubuf_tensor,
                                            const AscendC::LocalTensor<float> &p_scale_ubuf_tensor, uint32_t sub_m,
                                            uint32_t round_sub_m, uint32_t qk_n, uint32_t qk_round_n, uint32_t head_idx)
    {
        if (quantType == 3) {
            brcb_v<ArchType::ASCEND_V220, float>(tv_ubuf_tensor, p_scale_ubuf_tensor,
                                                 1,                               // dstBlockStride
                                                 8,                               // dstRepeatStride
                                                 round_sub_m / BlockSize<float>() // repeat
            );
            PIPE_BARRIER(V);
            for (uint32_t row_idx = 0; row_idx < qk_n / VectorSize<float>(); ++row_idx) {
                mul_v<ArchType::ASCEND_V220, float>(lo_ubuf_tensor[row_idx * VectorSize<float>()],
                                                    lo_ubuf_tensor[row_idx * VectorSize<float>()], tv_ubuf_tensor,
                                                    sub_m,                           // repeat
                                                    1,                               // dstBlockStride
                                                    1,                               // src0BlockStride
                                                    0,                               // src1BlockStride
                                                    qk_round_n / BlockSize<float>(), // dstRepeatStride
                                                    qk_round_n / BlockSize<float>(), // src0RepeatStride
                                                    1                                // src1RepeatStride
                );
            }
            if (qk_n % VectorSize<float>() > 0) {
                __set_mask(qk_n % VectorSize<float>());
                mul_v<ArchType::ASCEND_V220, float>(lo_ubuf_tensor[qk_n / VectorSize<float>() * VectorSize<float>()],
                                                    lo_ubuf_tensor[qk_n / VectorSize<float>() * VectorSize<float>()],
                                                    tv_ubuf_tensor,
                                                    sub_m,                           // repeat
                                                    1,                               // dstBlockStride
                                                    1,                               // src0BlockStride
                                                    0,                               // src1BlockStride
                                                    qk_round_n / BlockSize<float>(), // dstRepeatStride
                                                    qk_round_n / BlockSize<float>(), // src0RepeatStride
                                                    1                                // src1RepeatStride
                );
                SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
            }
            PIPE_BARRIER(V);
        } else {
            float p_scale = *((__gm__ float *)quant_p_gm + head_idx);
            muls_v<ArchType::ASCEND_V220, float>(
                lo_ubuf_tensor, lo_ubuf_tensor, p_scale,
                (sub_m * qk_round_n + VectorSize<float>() - 1) / VectorSize<float>(), // repeat
                1,                                                                    // dstBlockStride
                1,                                                                    // srcBlockStride
                8,                                                                    // dstRepeatStride
                8                                                                     // srcRepeatStride
            );
            PIPE_BARRIER(V);
        }
    }

    __aicore__ inline void SymmetricQuant(const AscendC::LocalTensor<float> &lp_ubuf_tensor,
                                          const AscendC::LocalTensor<float> &ls32_ubuf_tensor,
                                          const AscendC::LocalTensor<float> &lm_ubuf_tensor,
                                          const AscendC::LocalTensor<float> &hm_ubuf_tensor,
                                          const AscendC::LocalTensor<float> &p_scale_ubuf_tensor, const uint32_t sub_m,
                                          const uint32_t round_sub_m, const uint32_t qk_n, const uint32_t qk_round_n,
                                          uint32_t head_idx)
    {
        // online quant
        if (quantType == 3) {
            // max(exp^(x-hm)) = max(exp^(x-lm)*exp^(lm-hm)) = 1 * exp^(lm-hm))
            sub_v<ArchType::ASCEND_V220, float>(lm_ubuf_tensor, lm_ubuf_tensor, hm_ubuf_tensor,
                                                1, // repeat
                                                1, // dstBlockStride
                                                1, // src0BlockStride
                                                1, // src1BlockStride
                                                8, // dstRepeatStride
                                                8, // src0RepeatStride
                                                8  // src1RepeatStride
            );
            PIPE_BARRIER(V);
            exp_v<ArchType::ASCEND_V220, float>(lm_ubuf_tensor, lm_ubuf_tensor,
                                                1, // repeat
                                                1, // dstBlockStride
                                                1, // srcBlockStride
                                                8, // dstRepeatStride
                                                8  // srcRepeatStride
            );
            PIPE_BARRIER(V);
            muls_v<ArchType::ASCEND_V220, float>(
                p_scale_ubuf_tensor, lm_ubuf_tensor, ((float)1 / (float)127),
                1, // repeat
                1, // dstBlockStride
                1, // srcBlockStride
                8, // dstRepeatStride
                8  // srcRepeatStride
            );
            PIPE_BARRIER(V);
            brcb_v<ArchType::ASCEND_V220, float>(tv_ubuf_tensor, p_scale_ubuf_tensor,
                                                 1,                               // dstBlockStride
                                                 8,                               // dstRepeatStride
                                                 round_sub_m / BlockSize<float>() // repeat
            );
            PIPE_BARRIER(V);
            DivRepeatM<float>(lp_ubuf_tensor, ls32_ubuf_tensor, tv_ubuf_tensor, sub_m, qk_n, qk_round_n);
        } else {  // offline quant
            float p_scale = (float)1.0 / *((__gm__ float *)quant_p_gm + head_idx);
            muls_v<ArchType::ASCEND_V220, float>(
                lp_ubuf_tensor, ls32_ubuf_tensor, p_scale,
                (sub_m * qk_round_n + VectorSize<float>() - 1) / VectorSize<float>(), // repeat
                1,                                                                    // dstBlockStride
                1,                                                                    // srcBlockStride
                8,                                                                    // dstRepeatStride
                8                                                                     // srcRepeatStride
            );
            PIPE_BARRIER(V);
        }
        AscendC::Cast<half, float, false>(lp_ubuf_tensor.ReinterpretCast<half>(), lp_ubuf_tensor,
                                          AscendC::RoundMode::CAST_RINT, (uint64_t)0,
                                          (sub_m * qk_round_n + VectorSize<float>() - 1) / VectorSize<float>(), {1, 1, 4, 8});
        PIPE_BARRIER(V);
        for (uint32_t row_idx = 0; row_idx < qk_n / VectorSize<half>(); ++row_idx) {
            AscendC::Cast<int8_t, half, false>(lp_ubuf_tensor.ReinterpretCast<int8_t>()[row_idx * VectorSize<half>()],
                                               lp_ubuf_tensor.ReinterpretCast<half>()[row_idx * VectorSize<half>()], AscendC::RoundMode::CAST_RINT,
                                               (uint64_t)0, sub_m, {1, 1, (uint8_t)(qk_round_n / BlockSize<half>()), (uint8_t)(qk_round_n / BlockSize<half>())});
        }
        if (qk_n % VectorSize<half>() > 0) {
            __set_mask(qk_n % VectorSize<half>());
            AscendC::Cast<int8_t, half, false>(lp_ubuf_tensor.ReinterpretCast<int8_t>()[qk_n / VectorSize<half>() * VectorSize<half>()],
                                               lp_ubuf_tensor.ReinterpretCast<half>()[qk_n / VectorSize<half>() * VectorSize<half>()], AscendC::RoundMode::CAST_RINT,
                                               (uint64_t)0, sub_m, {1, 1, (uint8_t)(qk_round_n / BlockSize<half>()), (uint8_t)(qk_round_n / BlockSize<half>())});
            SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
        }
        PIPE_BARRIER(V);
    }

    template<bool IS_BF16 = true, uint32_t MASK_TYPE = 0>
    __aicore__ __attribute__((always_inline)) inline void Run()
    {

        uint64_t cur_batch = 0;
        uint32_t pre_total_q_blk_num = 0;
        uint32_t offset_tiling = tiling_head_size + tiling_para_size * cur_batch;
        uint32_t cur_total_q_blk_num = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 13 + offset_tiling));

        uint32_t process_num = total_q_blk_num * q_heads;
        float alibi_coeff = 1;

        mask_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ IN_DATA_TYPE *>(mask_gm));
        o_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ O_DT *>(o_gm));
        s_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ float *>(s_gm));
        p_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ QKV_DT *>(p_gm));
        o_tmp_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ float *>(o_tmp_gm));
        logN_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__  IN_DATA_TYPE*>(logN_gm));
        logN_float_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ float *>(logN_gm));

        lse_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ float *>(lse_gm));
        lse_prev_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ float *>(lse_prev));
        o_prev_gm_tensor.SetGlobalBuffer(reinterpret_cast<__gm__ O_DT *>(o_prev));

        uint32_t next_process = 0;
        for (uint32_t process = block_idx; process < process_num; process = next_process) {
            while (process >= cur_total_q_blk_num * q_heads) {
                cur_batch++;
                pre_total_q_blk_num = cur_total_q_blk_num;
                offset_tiling += tiling_para_size;
                cur_total_q_blk_num = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 13 + offset_tiling));
            }
            next_process = process + block_num;
            if (is_triu_mask) {
                uint32_t curr_iter = process / block_num;
                next_process = curr_iter % 2 == 1 ? (curr_iter + 1) * block_num + block_idx : (curr_iter + 2) * block_num - 1 - block_idx;
            }

            // get tiling args
            uint32_t q_seqlen = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + offset_tiling));
            uint32_t kv_seqlen = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 1 + offset_tiling));
            if (q_seqlen == 0 || kv_seqlen == 0) {
                continue;
            }
            uint32_t pp_m_scalar = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 2 + offset_tiling));
            uint32_t pp_n_scalar = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 3 + offset_tiling));
            uint32_t addr_o_high32 = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 10 + offset_tiling));
            uint32_t addr_o_loww32 = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 11 + offset_tiling));
            uint64_t addr_o_scalar = (uint64_t)(((uint64_t)addr_o_high32) << 32 | addr_o_loww32);
            uint32_t isRing = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 37));
            uint32_t n_tokens = (uint32_t)(*((__gm__ uint32_t *)tiling_para_gm + 38));

            uint32_t process_idx = process - pre_total_q_blk_num * q_heads;
            uint32_t m_idx = process_idx / q_heads;
            uint64_t head_idx = process_idx % q_heads;
            if (alibi_coeff_gm !=nullptr) {
                alibi_coeff = (float)(*((__gm__ float *)alibi_coeff_gm + head_idx));
            }

            uint32_t m_loop = (q_seqlen + pp_m_scalar - 1) / pp_m_scalar;
            uint32_t n_loop = (kv_seqlen + pp_n_scalar - 1) / pp_n_scalar;

            uint32_t qk_m = (m_idx == (m_loop - 1)) ? (q_seqlen - m_idx * pp_m_scalar) : pp_m_scalar;
//            qk_m = 128;
            uint32_t sub_m = (sub_block_idx == 1) ? (qk_m - qk_m / 2) : qk_m / 2;
            uint32_t sub_m_d128 = (sub_m + VECTOR_SIZE - 1) / VECTOR_SIZE;            // up aligned to 128
            uint32_t sub_m_d64 = (sub_m + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE; // up aligned to 64
            uint32_t round_sub_m = (sub_m + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;

            /******** pre_load *******/
            uint32_t qk_n = n_loop == 1 ? kv_seqlen : pp_n_scalar;
            uint32_t qk_round_n = (qk_n + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;

            uint64_t mask_batch_offset = cur_batch * mask_stride * max_seqlen;
            uint64_t mask_head_offset = head_idx * head_stride * max_seqlen;
            uint64_t mask_offset = mask_batch_offset + mask_head_offset;
            uint32_t delta_uint = 0;
            float base_y = -128;
            float delta = 0;

            uint64_t o_offset = addr_o_scalar + head_idx * embdv + m_idx * pp_m_scalar * stride_qo;
            uint64_t lse_offset = head_idx * n_tokens + addr_o_scalar / q_heads / embdv + m_idx * pp_m_scalar;
            uint32_t lenBurst = sizeof(float);
            uint32_t qk_k = BLOCK_QK;

            if (data_shape_type == 1) {
                o_offset = addr_o_scalar + head_idx * embdv * max_seqlen + m_idx * pp_m_scalar * stride_qo;
            }

            uint32_t n_end = n_loop;
            if (is_triu_mask) {
                n_end = m_idx + 1;
            }
            uint32_t qk_n_triu = n_end * pp_n_scalar;
            uint32_t s_block_stack = n_end > 8 ? 4 : (n_end > 4 ? 2 : 1);
            s_block_stack = 4; // Currently not splitting K
            uint32_t pv_stage = 3;
            uint32_t launch_delay = s_block_stack * 2;
            uint32_t vect_mod = 2 * launch_delay;
            uint32_t m_slice = FLOAT_VECTOR_SIZE / s_block_stack;
            // m_slice = sub_m > m_slice ? m_slice : 0;
            // m_slice = sub_m > m_slice ? m_slice : 0;
            uint32_t m_end = (sub_m + m_slice - 1) / m_slice;
            if (long_seq == 0) {
                mask_offset += m_idx * pp_m_scalar * max_seqlen;
            }
            long_seq = 1;
            for (uint32_t n_idx = 0; n_idx < n_end + launch_delay; n_idx += s_block_stack) {
                if (n_idx < n_end) {
                    if (sub_m == 0) {
                        WaitFlagDev(QK_READY);
                        FftsCrossCoreSync<PIPE_MTE3, 2>(SOFTMAX_READY);
                    } else {
                    uint32_t p_scale_offset = n_idx / s_block_stack % pv_stage * pp_m_scalar;
                    if (n_idx + s_block_stack > n_end - 1) {
                        qk_n = qk_n_triu > kv_seqlen ? kv_seqlen - n_idx * pp_n_scalar : qk_n_triu - n_idx * pp_n_scalar;
                    } else {
                        qk_n = pp_n_scalar * s_block_stack;
                    }
                    qk_round_n = (qk_n + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;

                    uint32_t pingpong_flag = 0;
                    bool move_flag = 0;
                    if (m_idx - n_idx >= 0 && m_idx - n_idx < 4) {
                        move_flag = 1;
                    }
                    // WaitFlagDev(QK_READY);
                    for (uint32_t m_ind = 0; m_ind < m_end; m_ind++) {
                        uint32_t curr_m = m_ind == m_end - 1 ? sub_m - m_ind * m_slice : m_slice;
                        // curr_m = 16;
                        uint32_t s_ub_offset = pingpong_flag * S_DB_SIZE;
                        uint32_t row_offset = m_ind * m_slice;
                        if constexpr(MASK_TYPE != 0) {
                            if (long_seq != 0 && move_flag) {
                                uint64_t cmp_mask_offset = (m_idx - n_idx) * 512 * 128;
                                WAIT_FLAG(V, MTE2, EVENT_ID6);
                                // 搬16 * 512, 压缩mask 512,512
                                gm_to_ub_align<ArchType::ASCEND_V220, IN_DATA_TYPE>(
                                    mask16_ubuf_tensor,
                                    mask_gm_tensor[cmp_mask_offset + (sub_block_idx * qk_m / 2 + m_ind * m_slice) * 512],
                                    0,                       // sid
                                    curr_m,                   // nBurst
                                    qk_n * 2,                // lenBurst
                                    0,                       // leftPaddingNum
                                    0,                       // rightPaddingNum
                                    (512 - qk_n) * 2, // srcGap
                                    0                        // dstGap
                                );
                                SET_FLAG(MTE2, V, EVENT_ID6);
                            }
                        }
                        if (m_ind == 0) {
                            WaitFlagDev(QK_READY);
                        }
                        if (curr_m == 0) {
                            continue;
                        }
                        OnlineSoftmaxStage1<float, float, QKV_DT, IN_DATA_TYPE, MASK_TYPE> (
                            ls_ubuf_tensor[pingpong_flag * S_DB_SIZE],
                            mask16_ubuf_tensor,
                            o_gm_tensor,
                            mask_ubuf_tensor,
                            lm_ubuf_tensor[m_ind * m_slice],
                            hm_ubuf_tensor[m_ind * m_slice],
                            gm_ubuf_tensor[m_ind * m_slice],
                            dm_ubuf_tensor[((n_idx / s_block_stack) % 4) * UB_FLOAT_LINE_SIZE + m_ind * m_slice],
                            ls_ubuf_tensor[pingpong_flag * S_DB_SIZE],
                            ll_ubuf_tensor[m_ind * m_slice],
                            gl_ubuf_tensor[m_ind * m_slice],
                            lp_ubuf_tensor[pingpong_flag * S_DB_SIZE].ReinterpretCast<QKV_DT>(),
                            tv_ubuf_tensor,
                            s_gm_tensor[(uint64_t)block_idx * TMP_SIZE + n_idx % vect_mod * TMP_SIZE / vect_mod +
                                    (uint64_t)sub_block_idx * qk_m / 2 * qk_round_n + m_ind * m_slice * qk_round_n],
                            p_gm_tensor[((uint64_t)block_idx * TMP_SIZE + n_idx % vect_mod * TMP_SIZE / vect_mod +
                                            ((uint64_t)sub_block_idx * qk_m / 2 + m_ind * m_slice) * qk_round_n) * 2 / sizeof(QKV_DT)],
                            n_idx == 0, this->tor,
                            curr_m, qk_n, qk_round_n, pingpong_flag, move_flag, long_seq, mask_type, m_idx, m_ind, n_idx, sub_block_idx
                        );
                        pingpong_flag = 1 - pingpong_flag;
                    }
                    FftsCrossCoreSync<PIPE_MTE3, 2>(SOFTMAX_READY);
                    mask_offset += qk_n;
                    }
                }
                if (n_idx >= launch_delay) {
                    uint32_t qk_round_k = 128;
                    if (sub_m == 0) {
                        WaitFlagDev(UPDATE_READY); // 4
                        continue;
                    }
                    uint32_t p_scale_offset = (n_idx - launch_delay) / s_block_stack % pv_stage * pp_m_scalar;
                    uint32_t sub_km = 64;
                    uint32_t loop_m = (sub_m + sub_km - 1) / sub_km;
                    if (n_idx != launch_delay) {
                        // *** dm_block = expand_to_block(dm), 存放于 tv
                        brcb_v<ArchType::ASCEND_V220, uint32_t>(
                            tv_ubuf_tensor.ReinterpretCast<uint32_t>(),
                            dm_ubuf_tensor[((n_idx - launch_delay) / s_block_stack % 4) * UB_FLOAT_LINE_SIZE].ReinterpretCast<uint32_t>(),
                            1,                             // dstBlockStride
                            8,                             // dstRepeatStride
                            round_sub_m / FLOAT_BLOCK_SIZE // repeat
                        );
                        PIPE_BARRIER(V);
                        // *** go = go * dm_block
                        for (uint32_t vmul_idx = 0; vmul_idx < qk_round_k / FLOAT_VECTOR_SIZE; ++vmul_idx) {
                            mul_v<ArchType::ASCEND_V220, float>(
                                go_ubuf_tensor[vmul_idx * FLOAT_VECTOR_SIZE],
                                go_ubuf_tensor[vmul_idx * FLOAT_VECTOR_SIZE],
                                tv_ubuf_tensor,
                                sub_m,                      // repeat
                                1,                          // dstBlockStride
                                1,                          // src0BlockStride
                                0,                          // src1BlockStride
                                qk_round_k / FLOAT_BLOCK_SIZE, // dstRepeatStride
                                qk_round_k / FLOAT_BLOCK_SIZE, // src0RepeatStride
                                1                           // src1RepeatStride
                            );
                        }
                        if (qk_round_k % FLOAT_VECTOR_SIZE > 0) {
                            __set_mask(qk_round_k % FLOAT_VECTOR_SIZE);
                            mul_v<ArchType::ASCEND_V220, float>(
                                go_ubuf_tensor[qk_round_k / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
                                go_ubuf_tensor[qk_round_k / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
                                tv_ubuf_tensor,
                                sub_m,                      // repeat
                                1,                          // dstBlockStride
                                1,                          // src0BlockStride
                                0,                          // src1BlockStride
                                qk_round_k / FLOAT_BLOCK_SIZE, // dstRepeatStride
                                qk_round_k / FLOAT_BLOCK_SIZE, // src0RepeatStride
                                1                           // src1RepeatStride
                            );
                            SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
                        }
                        PIPE_BARRIER(V);
                    }
                    WaitFlagDev(UPDATE_READY); // 4
                    // *** 更新 L 和 O
                    if (n_idx != launch_delay) {
                        for (uint32_t ms_idx = 0; ms_idx < loop_m; ms_idx++){
                            uint32_t nowm = (ms_idx == (loop_m - 1))? sub_m - ms_idx * sub_km : sub_km;
                            uint32_t now_roundm = (nowm + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;
                            uint32_t resm = ms_idx * sub_km;
                            WAIT_FLAG(V, MTE2, EVENT_ID2);
                            gm_to_ub<ArchType::ASCEND_V220, float>(
                                lo_ubuf_tensor,
                                o_tmp_gm_tensor[(uint64_t)block_idx * TMP_SIZE + (n_idx - launch_delay) % vect_mod * TMP_SIZE / vect_mod +
                                                (uint64_t)sub_block_idx * qk_m / 2 * qk_round_k + resm * qk_round_k],
                                0,                                  // sid
                                1,                                  // nBurst
                                nowm * qk_round_k / FLOAT_BLOCK_SIZE, // lenBurst
                                0,                                  // srcGap
                                0                                   // dstGap
                            );
                            SET_FLAG(MTE2, V, EVENT_ID2);
                            // *** go = lo + go
                            WAIT_FLAG(MTE2, V, EVENT_ID2);
                            add_v<ArchType::ASCEND_V220, float>(go_ubuf_tensor[resm * qk_round_k], go_ubuf_tensor[resm * qk_round_k], lo_ubuf_tensor,
                                (nowm * qk_round_k + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                1,                                                             // dstBlockStride
                                1,                                                             // src0BlockStride
                                1,                                                             // src1BlockStride
                                8,                                                             // dstRepeatStride
                                8,                                                             // src0RepeatStride
                                8                                                              // src1RepeatStride
                            );
                            PIPE_BARRIER(V);
                            SET_FLAG(V, MTE2, EVENT_ID2);
                        }
                    } else {
                        WAIT_FLAG(MTE3, MTE2, EVENT_ID2);
                        gm_to_ub<ArchType::ASCEND_V220, float>(
                            go_ubuf_tensor,
                            o_tmp_gm_tensor[(uint64_t)block_idx * TMP_SIZE + (n_idx - launch_delay) % vect_mod * TMP_SIZE / vect_mod +
                                (uint64_t)sub_block_idx * qk_m / 2 * qk_round_k],
                            0,                                  // sid
                            1,                                  // nBurst
                            sub_m * qk_round_k / FLOAT_BLOCK_SIZE, // lenBurst
                            0,                                  // srcGap
                            0                                   // dstGap
                        );
                        SET_FLAG(MTE2, V, EVENT_ID3);
                        WAIT_FLAG(MTE2, V, EVENT_ID3);
                    }
                    if (n_idx + s_block_stack > n_end + launch_delay - 1)  {
                        // *** gl_block = expand_to_block(gl), 存放于 tv
                        brcb_v<ArchType::ASCEND_V220, uint32_t>(
                            tv_ubuf_tensor.ReinterpretCast<uint32_t>(),
                            gl_ubuf_tensor.ReinterpretCast<uint32_t>(),
                            1,                             // dstBlockStride
                            8,                             // dstRepeatStride
                            round_sub_m / FLOAT_BLOCK_SIZE // repeat
                        );
                        PIPE_BARRIER(V);
                        // *** go = go / gl_block
                        for (uint32_t vdiv_idx = 0; vdiv_idx < qk_round_k / FLOAT_VECTOR_SIZE; ++vdiv_idx) {
                            div_v<ArchType::ASCEND_V220, float>(
                                go_ubuf_tensor[vdiv_idx * FLOAT_VECTOR_SIZE],
                                go_ubuf_tensor[vdiv_idx * FLOAT_VECTOR_SIZE],
                                tv_ubuf_tensor,
                                sub_m,                      // repeat
                                1,                          // dstBlockStride
                                1,                          // src0BlockStride
                                0,                          // src1BlockStride
                                qk_round_k / FLOAT_BLOCK_SIZE, // dstRepeatStride
                                qk_round_k / FLOAT_BLOCK_SIZE, // src0RepeatStride
                                1                           // src1RepeatStride
                            );
                        }
                        if (qk_round_k % FLOAT_VECTOR_SIZE > 0) {
                            __set_mask(qk_round_k % FLOAT_VECTOR_SIZE);
                            div_v<ArchType::ASCEND_V220, float>(
                                go_ubuf_tensor[qk_round_k / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
                                go_ubuf_tensor[qk_round_k / FLOAT_VECTOR_SIZE * FLOAT_VECTOR_SIZE],
                                tv_ubuf_tensor,
                                sub_m,                      // repeat
                                1,                          // dstBlockStride
                                1,                          // src0BlockStride
                                0,                          // src1BlockStride
                                qk_round_k / FLOAT_BLOCK_SIZE, // dstRepeatStride
                                qk_round_k / FLOAT_BLOCK_SIZE, // src0RepeatStride
                                1                           // src1RepeatStride
                            );
                            SetVectorMask<int8_t>((uint64_t)-1, (uint64_t)-1);
                        }
                        PIPE_BARRIER(V);
                        for (uint32_t ms_idx = 0; ms_idx < loop_m; ms_idx++){
                            uint32_t nowm = (ms_idx == (loop_m - 1))? sub_m - ms_idx * sub_km : sub_km;
                            uint32_t now_roundm = (nowm + BLOCK_SIZE - 1) / BLOCK_SIZE * BLOCK_SIZE;
                            uint32_t resm = ms_idx * sub_km;
                            conv_v<ArchType::ASCEND_V220, float, IN_DATA_TYPE>(
                                go_ubuf_tensor.ReinterpretCast<IN_DATA_TYPE>()[resm * qk_round_k],
                                go_ubuf_tensor[resm * qk_round_k],
                                (nowm * qk_round_k + FLOAT_VECTOR_SIZE - 1) / FLOAT_VECTOR_SIZE, // repeat
                                1, // dstBlockStride
                                1, // srcBlockStride
                                4, // dstRepeatStride
                                8  // srcRepeatStride
                            );
                        }
                        PIPE_BARRIER(V);
                        // ********************* move O to GM ************************
                        // out lse ---->  out_lse = np.log(score_sum) + score_max
                        ln_v<ArchType::ASCEND_V220, float>(lse32_ubuf_tensor, //参数已确认
                                                           gl_ubuf_tensor,
                                                           sub_m_d64,  // repeat  1
                                                           1,          // dstBlockStride
                                                           1,          // srcBlockStride
                                                           8,          // dstRepeatStride
                                                           8           // srcRepeatStride
                        );
                        PIPE_BARRIER(V);

                        add_v<ArchType::ASCEND_V220, float>(lse32_ubuf_tensor, //参数已确认
                                                            lse32_ubuf_tensor,
                                                            gm_ubuf_tensor,
                                                            sub_m_d64,  // repeat
                                                            1,          // dstBlockStride
                                                            1,          // src0BlockStride
                                                            1,          // src1BlockStride
                                                            8,          // dstRepeatStride
                                                            8,          // src0RepeatStride
                                                            8           // src1RepeatStride
                        );
                        PIPE_BARRIER(V);

                        if (isRing){
//                          以下为更新lse的部分：lse_new = log(exp(lse_new) + exp(lse_old))
//                          搬运prev_lse
                            PIPE_BARRIER(ALL);
//                            WAIT_FLAG(V, MTE2, EVENT_ID5);
                            gm_to_ub_align<ArchType::ASCEND_V220, float>( // 直接搬入报错error，暂时修改回原版本，待优化
                                lse32_prev_ub_tensor,
                                lse_prev_gm_tensor[(lse_offset + (uint64_t)sub_block_idx * qk_m/2)],
                                0,                                // sid
                                1,                                // nBurst 64
                                sub_m * lenBurst,                 // lenBurst   单位byte 64*2 128
                                0,
                                0,
                                0,        // srcGap  (stride_qo - embdv) * 2 / embdv
                                0                                 // dstGap
                            );
                            SET_FLAG(MTE2, V, EVENT_ID5);
                            WAIT_FLAG(MTE2, V, EVENT_ID5);

                            PIPE_BARRIER(V);

                                                        // *** max_lse = vmax(lse_1, lse_2)
                            max_v<ArchType::ASCEND_V220, float>(
                                tv_ubuf_tensor,
                                lse32_prev_ub_tensor,
                                lse32_ubuf_tensor,
                                1,         // repeat
                                1,         // dstBlockStride
                                1,         // src0BlockStride
                                1,         // src1BlockStride
                                8,         // dstRepeatStride
                                8,         // src0RepeatStride
                                8          // src1RepeatStride
                            );

                            PIPE_BARRIER(V);

                            // lse_prev = lse_prev - max_lse
                            sub_v<ArchType::ASCEND_V220, float>(
                                lse32_prev_ub_tensor,
                                lse32_prev_ub_tensor,
                                tv_ubuf_tensor,
                                1,         // repeat
                                1,         // dstBlockStride
                                1,         // src0BlockStride
                                1,         // src1BlockStride
                                8,         // dstRepeatStride
                                8,         // src0RepeatStride
                                8          // src1RepeatStride
                            );

                            PIPE_BARRIER(V);
                            // lse_new = lse_new - max_lse
                            sub_v<ArchType::ASCEND_V220, float>(
                                lse32_ubuf_tensor,
                                lse32_ubuf_tensor,
                                tv_ubuf_tensor,
                                1,         // repeat
                                1,         // dstBlockStride
                                1,         // src0BlockStride
                                1,         // src1BlockStride
                                8,         // dstRepeatStride
                                8,         // src0RepeatStride
                                8          // src1RepeatStride
                            );

                            // exp(lse_prev) e的指数次结果存放到
                            PIPE_BARRIER(V);
                            exp_v<ArchType::ASCEND_V220, float>(lse32_conv_ubuf_tensor,  //float 改为了half
                                                                lse32_prev_ub_tensor,
                                                                sub_m_d64,  // repeat
                                                                1,          // dstBlockStride
                                                                1,          // srcBlockStride
                                                                8,          // dstRepeatStride
                                                                8           // srcRepeatStride
                            );

                            PIPE_BARRIER(V);
                            // exp(lse_new) e的指数次结果存放到lse32_ubuf_tensor
                            exp_v<ArchType::ASCEND_V220, float>(lse32_ubuf_tensor,
                                                                lse32_ubuf_tensor,
                                                                sub_m_d64,  // repeat
                                                                1,          // dstBlockStride
                                                                1,          // srcBlockStride
                                                                8,          // dstRepeatStride
                                                                8           // srcRepeatStride
                            );
                            // 做加法并求log  exp(lse_new) + exp(lse_prev), 存放到lse_prev32
                            PIPE_BARRIER(V);
                            add_v<ArchType::ASCEND_V220, float>(lse32_cur_update_tensor,
                                                                lse32_ubuf_tensor,
                                                                lse32_conv_ubuf_tensor,
                                                                sub_m_d64,  // repeat
                                                                1,          // dstBlockStride
                                                                1,          // src0BlockStride
                                                                1,          // src1BlockStride
                                                                8,          // dstRepeatStride
                                                                8,          // src0RepeatStride
                                                                8           // src1RepeatStride
                            );
                            PIPE_BARRIER(V);
                            ln_v<ArchType::ASCEND_V220, float>(lse32_cur_update_tensor,
                                                               lse32_cur_update_tensor,
                                                               sub_m_d64,  // repeat
                                                               1,          // dstBlockStride
                                                               1,          // srcBlockStride
                                                               8,          // dstRepeatStride
                                                               8           // srcRepeatStride
                            );
                            PIPE_BARRIER(V);

                            add_v<ArchType::ASCEND_V220, float>(lse32_cur_update_tensor,
                                                               lse32_cur_update_tensor,
                                                               tv_ubuf_tensor,
                                                               sub_m_d64,  // repeat
                                                               1,          // dstBlockStride
                                                               1,          // src0BlockStride
                                                               1,          // src1BlockStride
                                                               8,          // dstRepeatStride
                                                               8,          // src0RepeatStride
                                                               8           // src1RepeatStride
                           );
                           PIPE_BARRIER(V);

                            //                                 lse的更新结果搬出   当前精度已验证
                            //*********************************************
//                            if (k_idx == 0) {
                                SET_FLAG(V, MTE3, EVENT_ID4);
                                WAIT_FLAG(V, MTE3, EVENT_ID4);
                                ub_to_gm_align<ArchType::ASCEND_V220, float>(
                                    lse_gm_tensor[(lse_offset + (uint64_t)sub_block_idx * qk_m / 2)],                     // 128/2   * embdv
                                    lse32_cur_update_tensor, // ls32_ubuf_tensor.ReinterpretCast<half>()
                                    0,                                        // sid
                                    1,                                        // nBurst
                                    sub_m * lenBurst,                        //(sub_m + 15) / 16,lenBurst  2*64
                                    0,                                        // leftPaddingNum
                                    0,                                        // rightPaddingNum
                                    0,                                        // srcGap
                                    0           // dstGap   512-128
                                );
                                SET_FLAG(MTE3, V, EVENT_ID4);
                                WAIT_FLAG(MTE3, V, EVENT_ID4);
//                            }
                            //****************************************以下输出O更新代码********************************************/
                                // 输出o更新部分----o = sum(lse_exp/sum(lse_exp)*oi)
                                // 输出o的更新分析： new_o = (old_o * e(old_lse) + new_o * e(new_lse)) / (e(old_lse) + e(new_lse))
                                // 基础运算过程编写完毕，数据运算类型以及各运算块的偏移等参数需重新填写校对
                                conv_v<ArchType::ASCEND_V220, IN_DATA_TYPE, float>(o32_prev_ub_tensor,
                                                                           go_ubuf_tensor.ReinterpretCast<IN_DATA_TYPE>(),
                                                                           sub_m * qk_round_k / 64,  // repeat
                                                                           1,          // dstBlockStride
                                                                           1,          // srcBlockStride
                                                                           8,          // dstRepeatStride
                                                                           4           // srcRepeatStride
                                );
                                PIPE_BARRIER(V);

                                // 对应乘积 new_o * e(new_lse) 存放 --> new_o
                                brcb_v<ArchType::ASCEND_V220, uint32_t>(tv_ubuf_tensor.ReinterpretCast<uint32_t>(),
                                                                        lse32_ubuf_tensor.ReinterpretCast<uint32_t>(),
                                                                        1,                              // dstBlockStride
                                                                        8,                              // dstRepeatStride  ori is 8
                                                                        round_sub_m / FLOAT_BLOCK_SIZE // repeat  8   round_sub_m=64   FLOAT_BLOCK_SIZE=8
                                );
                                PIPE_BARRIER(V);
                                //                                WAIT_FLAG(MTE2, V, EVENT_ID3);
                                for (uint32_t vmul_idx = 0; vmul_idx < ((qk_k + FLOAT_VECTOR_SIZE-1) / FLOAT_VECTOR_SIZE); ++vmul_idx) {
                                mul_v<ArchType::ASCEND_V220, float>(go_ubuf_tensor[vmul_idx * FLOAT_VECTOR_SIZE],  //  FLOAT_VECTOR_SIZE==64
                                                                    o32_prev_ub_tensor[vmul_idx * FLOAT_VECTOR_SIZE], // 0-64     64-?
                                                                    tv_ubuf_tensor,
                                                                    sub_m,                       // repeat
                                                                    1,                           // dstBlockStride
                                                                    1,                           // src0BlockStride
                                                                    0,                           // src1BlockStride
                                                                    qk_round_k / FLOAT_BLOCK_SIZE,  // dstRepeatStride
                                                                    qk_round_k / FLOAT_BLOCK_SIZE,  // src0RepeatStride
                                                                    1                            // src1RepeatStride
                                );
                                }

                                // prev_o搬入ub  ----
//                                PIPE_BARRIER(ALL);
                                WAIT_FLAG(V, MTE2, EVENT_ID6);
                                gm_to_ub_align<ArchType::ASCEND_V220, IN_DATA_TYPE>(
                                    o_prev_ub_tensor, // 复用lo
                                    o_prev_gm_tensor[o_offset + (uint64_t)sub_block_idx * qk_m / 2 * stride_qo],
                                    0,        // sid
                                    sub_m,    // nBurst
                                    qk_k * 2, // lenBurst   单位byte
                                    0, 0,
                                    (stride_qo - qk_k) * 2, // srcGap
                                    0                       // dstGap
                                );
//                                PIPE_BARRIER(ALL);
                                SET_FLAG(MTE2, V, EVENT_ID6);
                                WAIT_FLAG(MTE2, V, EVENT_ID6);

                                conv_v<ArchType::ASCEND_V220, IN_DATA_TYPE, float>(o32_prev_ub_tensor,
                                                                           o_prev_ub_tensor,
                                                                           sub_m * qk_round_k / 64,  // repeat
                                                                           1,          // dstBlockStride
                                                                           1,          // srcBlockStride
                                                                           8,          // dstRepeatStride
                                                                           4           // srcRepeatStride
                                );
                                PIPE_BARRIER(V);

                                exp_v<ArchType::ASCEND_V220, float>(lse32_prev_ub_tensor,
                                                                    lse32_prev_ub_tensor,
                                                                    sub_m_d64,  // repeat
                                                                    1,          // dstBlockStride
                                                                    1,          // srcBlockStride
                                                                    8,          // dstRepeatStride
                                                                    8           // srcRepeatStride
                                );
                                PIPE_BARRIER(V);

                                brcb_v<ArchType::ASCEND_V220, float>(tv_ubuf_tensor,
                                                                     lse32_prev_ub_tensor,
                                                                     1,                              // dstBlockStride
                                                                     8,                              // dstRepeatStride  ori is 8
                                                                     round_sub_m / FLOAT_BLOCK_SIZE  // repeat  8   round_sub_m=64   FLOAT_BLOCK_SIZE=8
                                );
                                PIPE_BARRIER(V);
//                                SET_FLAG(V, MTE2, EVENT_ID5);
                                for (uint32_t vmul_idx = 0; vmul_idx < ((qk_k + FLOAT_VECTOR_SIZE-1) / FLOAT_VECTOR_SIZE); ++vmul_idx) { // FLOAT_VECTOR_SIZE=64  qk_k=128
                                mul_v<ArchType::ASCEND_V220, float>(o32_prev_ub_tensor[vmul_idx * FLOAT_VECTOR_SIZE],  //FLOAT_VECTOR_SIZE  0     128   256
                                                                    o32_prev_ub_tensor[vmul_idx * FLOAT_VECTOR_SIZE],
                                                                    tv_ubuf_tensor,
                                                                    sub_m,                       // repeat   64
                                                                    1,                           // dstBlockStride
                                                                    1,                           // src0BlockStride
                                                                    0,                           // src1BlockStride
                                                                    qk_round_k / FLOAT_BLOCK_SIZE,  // dstRepeatStride   128 / 16  qk_round_k==128 / FLOAT_BLOCK_SIZE==8
                                                                    qk_round_k / FLOAT_BLOCK_SIZE,  // src0RepeatStride  16
                                                                    1                            // src1RepeatStride
                                );
                                }
                                PIPE_BARRIER(V);

                                // 求和 old_o * e(old_lse) + new_o * e(new_lse) -- > 存放 old_o
                                PIPE_BARRIER(V);
                                add_v<ArchType::ASCEND_V220, float>(o32_prev_ub_tensor,   // o_prev_ub_tensor
                                                                    o32_prev_ub_tensor,
                                                                    go_ubuf_tensor,
                                                                    sub_m * qk_round_k / 64,  // repeat   1
                                                                    1,          // dstBlockStride
                                                                    1,          // src0BlockStride
                                                                    1,          // src1BlockStride
                                                                    8,          // dstRepeatStride
                                                                    8,          // src0RepeatStride
                                                                    8           // src1RepeatStride
                                );

                                PIPE_BARRIER(V);
                                // (e(old_lse) + e(new_lse)) 做boardcast  --> 存放 new_conv_ubuf_tensor
                                add_v<ArchType::ASCEND_V220, float>(lse32_conv_ubuf_tensor,
                                                                    lse32_ubuf_tensor,
                                                                    lse32_conv_ubuf_tensor,
                                                                    sub_m_d64,  // repeat
                                                                    1,          // dstBlockStride
                                                                    1,          // src0BlockStride
                                                                    1,          // src1BlockStride
                                                                    8,          // dstRepeatStride
                                                                    8,          // src0RepeatStride
                                                                    8           // src1RepeatStride
                                );
                                PIPE_BARRIER(V);

                                // 做除法  old_o * e(old_lse) + new_o * e(new_lse)  /  (e(old_lse) + e(new_lse))
                                brcb_v<ArchType::ASCEND_V220, float>(tv_ubuf_tensor,
                                                                     lse32_conv_ubuf_tensor,
                                                                     1,                              // dstBlockStride
                                                                     8,                              // dstRepeatStride
                                                                     round_sub_m / FLOAT_BLOCK_SIZE  // repeat
                                );
                                PIPE_BARRIER(V);
                                for (uint32_t vdiv_idx = 0; vdiv_idx < ((qk_k + FLOAT_VECTOR_SIZE-1) / FLOAT_VECTOR_SIZE); ++vdiv_idx) {
                                div_v<ArchType::ASCEND_V220, float>(go_ubuf_tensor[vdiv_idx * FLOAT_VECTOR_SIZE],
                                                                    o32_prev_ub_tensor[vdiv_idx * FLOAT_VECTOR_SIZE],
                                                                    tv_ubuf_tensor,
                                                                    sub_m,                 // repeat
                                                                    1,                     // dstBlockStride
                                                                    1,                     // src0BlockStride
                                                                    0,                     // src1BlockStride
                                                                    qk_round_k / FLOAT_BLOCK_SIZE,  // dstRepeatStride  qk_round_k==128   BLOCK_SIZE=16
                                                                    qk_round_k / FLOAT_BLOCK_SIZE,  // src0RepeatStride
                                                                    1                      // src1RepeatStride
                                );
                                }
                                PIPE_BARRIER(V);
                                conv_v<ArchType::ASCEND_V220, float, IN_DATA_TYPE>(go_ubuf_tensor.ReinterpretCast<IN_DATA_TYPE>(),
                                                                           go_ubuf_tensor,
                                                                           sub_m * qk_round_k / 64,  // repeat
                                                                           1,          // dstBlockStride
                                                                           1,          // srcBlockStride
                                                                           4,          // dstRepeatStride
                                                                           8           // srcRepeatStride
                                );
                                PIPE_BARRIER(V);
                                SET_FLAG(V, MTE2, EVENT_ID6);
                                // 搬出O
                                SET_FLAG(V, MTE3, EVENT_ID0);
                                WAIT_FLAG(V, MTE3, EVENT_ID0);
                                ub_to_gm_align<ArchType::ASCEND_V220, IN_DATA_TYPE>(
                                    o_gm_tensor[o_offset + (uint64_t)sub_block_idx * qk_m / 2 * stride_qo],
                                    go_ubuf_tensor.ReinterpretCast<IN_DATA_TYPE>(),
                                    0,                    // sid
                                    sub_m,                // nBurst
                                    qk_round_k * 2,              // lenBurst
                                    0,                    // leftPaddingNum
                                    0,                    // rightPaddingNum
                                    0,                    // srcGap
                                    (stride_qo - qk_round_k) * 2 // dstGap
                                );
                                SET_FLAG(MTE3, MTE2, EVENT_ID2);
                        } else {
//                            if (k_idx == 0) {
                                SET_FLAG(V, MTE3, EVENT_ID4);
                                WAIT_FLAG(V, MTE3, EVENT_ID4);
                                ub_to_gm_align<ArchType::ASCEND_V220, float>(
                                    lse_gm_tensor[(lse_offset + (uint64_t)sub_block_idx * qk_m / 2)],                     // 128/2   * embdv
                                    lse32_ubuf_tensor, // ls32_ubuf_tensor.ReinterpretCast<half>()
                                    0,                                        // sid
                                    1,                                        // nBurst
                                    sub_m * lenBurst,                        //(sub_m + 15) / 16,lenBurst  64 * 4
                                    0,                                        // leftPaddingNum
                                    0,                                        // rightPaddingNum
                                    0,                                        // srcGap
                                    0                                        // dstGap   512-128
                                );
                                SET_FLAG(MTE3, V, EVENT_ID4);
                                WAIT_FLAG(MTE3, V, EVENT_ID4);
//                            }

                            SET_FLAG(V, MTE3, EVENT_ID0);
                            WAIT_FLAG(V, MTE3, EVENT_ID0);
                            ub_to_gm_align<ArchType::ASCEND_V220, IN_DATA_TYPE>(
                                o_gm_tensor[o_offset + (uint64_t)sub_block_idx * qk_m / 2 * stride_qo],
                                go_ubuf_tensor.ReinterpretCast<IN_DATA_TYPE>(),
                                0,                    // sid
                                sub_m,                // nBurst
                                qk_round_k * 2,              // lenBurst
                                0,                    // leftPaddingNum
                                0,                    // rightPaddingNum
                                0,                    // srcGap
                                (stride_qo - qk_round_k) * 2 // dstGap
                            );
                            SET_FLAG(MTE3, MTE2, EVENT_ID2);
                        }
                    }
                }
            }
        }
    }

private:
    __gm__ uint8_t *__restrict__ mask_gm{nullptr};
    __gm__ uint8_t *__restrict__ o_gm{nullptr};
    __gm__ uint8_t *__restrict__ s_gm{nullptr};
    __gm__ uint8_t *__restrict__ p_gm{nullptr};
    __gm__ uint8_t *__restrict__ o_tmp_gm{nullptr};
    __gm__ uint8_t *__restrict__ tiling_para_gm{nullptr};
    __gm__ uint8_t *__restrict__ alibi_coeff_gm{nullptr};
    __gm__ uint8_t *__restrict__ deq_qk_gm{nullptr};
    __gm__ uint8_t *__restrict__ off_qk_gm{nullptr};
    __gm__ uint8_t *__restrict__ quant_p_gm{nullptr};
    __gm__ uint8_t *__restrict__ deq_pv_gm{nullptr};
    __gm__ uint8_t *__restrict__ off_pv_gm{nullptr};
    __gm__ uint8_t *__restrict__ logN_gm{nullptr};
    __gm__ uint8_t *__restrict__ o_prev{nullptr};
    __gm__ uint8_t *__restrict__ lse_prev{nullptr};
    __gm__ uint8_t *__restrict__ lse_gm{nullptr};

    const uint32_t ls_ubuf_offset = 0;
    const uint32_t lp_ubuf_offset = 0;
    const uint32_t ls32_ubuf_offset = 2 * UB_UINT8_BLOCK_SIZE;
    const uint32_t mask_ubuf_offset = 4 * UB_UINT8_BLOCK_SIZE;
    const uint32_t go_ubuf_offset = 6 * UB_UINT8_BLOCK_SIZE;
    const uint32_t lm_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE;
    const uint32_t hm_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 1 * UB_UINT8_LINE_SIZE;
    const uint32_t gm_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 2 * UB_UINT8_LINE_SIZE;
    const uint32_t dm_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 3 * UB_UINT8_LINE_SIZE;
    const uint32_t ll_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 7 * UB_UINT8_LINE_SIZE;
    const uint32_t gl_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 8 * UB_UINT8_LINE_SIZE;
    const uint32_t lse_prev_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 9 * UB_UINT8_LINE_SIZE;
    const uint32_t lse_cur_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 10 * UB_UINT8_LINE_SIZE;
    const uint32_t lse_conv_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 11 * UB_UINT8_LINE_SIZE;
    const uint32_t lse_cur_update_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 12 * UB_UINT8_LINE_SIZE;
    const uint32_t lse_prev_update_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 13 * UB_UINT8_LINE_SIZE;
    const uint32_t tv_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 16 * UB_UINT8_LINE_SIZE;
    const uint32_t p_scale_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 21 * UB_UINT8_LINE_SIZE; // no use
//    const uint32_t log_ubuf_offset = 8 * UB_UINT8_BLOCK_SIZE + 30 * UB_UINT8_LINE_SIZE;
    const uint32_t log_ubuf_float_offset = 8 * UB_UINT8_BLOCK_SIZE + 30 * UB_UINT8_LINE_SIZE;
    const uint32_t lo_ubuf_offset = 9 * UB_UINT8_BLOCK_SIZE;
    const uint32_t mask16_ubuf_offset = 11 * UB_UINT8_BLOCK_SIZE;

    AsdopsBuffer<ArchType::ASCEND_V220> buf;
    AscendC::LocalTensor<float> ls_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(ls_ubuf_offset);
    AscendC::LocalTensor<float> lp_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(lp_ubuf_offset);
    AscendC::LocalTensor<float> ls32_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(ls32_ubuf_offset);
    AscendC::LocalTensor<float> mask_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(mask_ubuf_offset);
    AscendC::LocalTensor<float> lo_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(lo_ubuf_offset);
    AscendC::LocalTensor<float> lm_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(lm_ubuf_offset);
    AscendC::LocalTensor<float> hm_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(hm_ubuf_offset);
    AscendC::LocalTensor<float> gm_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(gm_ubuf_offset);
    AscendC::LocalTensor<float> dm_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(dm_ubuf_offset);
    AscendC::LocalTensor<float> ll_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(ll_ubuf_offset);
    AscendC::LocalTensor<float> gl_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(gl_ubuf_offset);
    AscendC::LocalTensor<float> tv_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(tv_ubuf_offset);
    AscendC::LocalTensor<float> p_scale_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(p_scale_ubuf_offset);
    AscendC::LocalTensor<float> go_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(go_ubuf_offset);
    AscendC::LocalTensor<IN_DATA_TYPE> mask16_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, IN_DATA_TYPE>(mask16_ubuf_offset);

    AscendC::LocalTensor<float> lse32_prev_ub_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(lse_prev_ubuf_offset);
    AscendC::LocalTensor<float> lse32_conv_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(lse_conv_ubuf_offset); // 用于中间new_lse变量参与计算与存放
    AscendC::LocalTensor<float> lse32_cur_update_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(lse_cur_update_ubuf_offset);
    AscendC::LocalTensor<float> lse32_prev_update_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(lse_prev_update_ubuf_offset);
    AscendC::LocalTensor<float> lse32_ubuf_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(lse_cur_ubuf_offset);
    AscendC::LocalTensor<float> o32_prev_ub_tensor = buf.GetBuffer<BufferType::ASCEND_UB, float>(lo_ubuf_offset);

    AscendC::LocalTensor<O_DT> o_prev_ub_tensor = buf.GetBuffer<BufferType::ASCEND_UB, O_DT>(mask16_ubuf_offset);

    AscendC::GlobalTensor<IN_DATA_TYPE> mask_gm_tensor;
    AscendC::GlobalTensor<O_DT> o_gm_tensor;
    AscendC::GlobalTensor<float> lse_gm_tensor;
    AscendC::GlobalTensor<float> lse_prev_gm_tensor;
    AscendC::GlobalTensor<O_DT> o_prev_gm_tensor;
    AscendC::GlobalTensor<float> s_gm_tensor;
    AscendC::GlobalTensor<QKV_DT> p_gm_tensor;
    AscendC::GlobalTensor<float> o_tmp_gm_tensor;
    AscendC::GlobalTensor<IN_DATA_TYPE> logN_gm_tensor;
    AscendC::GlobalTensor<float> logN_float_gm_tensor;
    ScaleType scaleType = ScaleType::SCALE_TOR;
    uint32_t batch_size{0};
    uint32_t max_seqlen{0};
    uint32_t q_heads{0};
    uint32_t embd{0};
    float tor{0};
    uint32_t head_stride{0};
    uint32_t mask_stride{0};
    uint32_t is_triu_mask{0};
    uint32_t total_q_blk_num{0};
    uint32_t isClamp{0};
    float clampMin;
    float clampMax;
    uint64_t stride_qo{0};
    uint32_t __k{0};
    uint32_t embdv{0};
    uint32_t round_k{0};
    uint32_t go_flag_scalar{1};

    int32_t sub_block_idx{-1};
    uint32_t tilingKey{0};
    uint32_t tiling_head_size{0};
    uint32_t tiling_para_size{0};
    uint32_t long_seq{0};
    uint32_t is_sqrt{0};
    uint32_t mask_type{0};
    uint32_t alibi_compress_offset{0};
    uint32_t alibi_left_align{0};
    uint32_t data_shape_type{0};
    uint32_t quantType{0};
    uint32_t isRing{0};
};

extern "C" __global__ __aicore__ void ring_mla_prefill_bf16(
    __gm__ uint8_t *__restrict__ sync,
    __gm__ uint8_t *__restrict__ q_gm,
    __gm__ uint8_t *__restrict__ q_rope_gm,
    __gm__ uint8_t *__restrict__ k_gm,
    __gm__ uint8_t *__restrict__ k_rope_gm,
    __gm__ uint8_t *__restrict__ v_gm,
    __gm__ uint8_t *__restrict__ mask_gm,
    __gm__ uint8_t *__restrict__ alibi_coeff_gm,
    __gm__ uint8_t *__restrict__ deq_qk_gm,
    __gm__ uint8_t *__restrict__ off_qk_gm,
    __gm__ uint8_t *__restrict__ deq_pv_gm,
    __gm__ uint8_t *__restrict__ off_pv_gm,
    __gm__ uint8_t *__restrict__ quant_p_gm,
    __gm__ uint8_t *__restrict__ logN_gm,
    __gm__ uint8_t *__restrict__ o_prev,
    __gm__ uint8_t *__restrict__ lse_prev,
    __gm__ uint8_t *__restrict__ o_gm,
    __gm__ uint8_t *__restrict__ lse_gm,
    __gm__ uint8_t *__restrict__ s_gm,
    __gm__ uint8_t *__restrict__ p_gm,
    __gm__ uint8_t *__restrict__ o_tmp_gm,
    __gm__ uint8_t *__restrict__ upo_tmp_gm,
    __gm__ uint8_t *__restrict__ tiling_para_gm)
{
    uint32_t tilingKey = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 16));
    uint32_t maskType = (uint32_t)(*((__gm__ int32_t *)tiling_para_gm + 20));
    // 仅在tilingKey为1的时候是bf，其余场景均当做half处理
    if (tilingKey == 1) {
        FlashAttentionEncoderHighPrecisionVec<__bf16> fa_vec(sync, mask_gm, alibi_coeff_gm, o_gm, s_gm, p_gm, o_tmp_gm,
                                                             tiling_para_gm, deq_qk_gm, off_qk_gm, quant_p_gm,
                                                             deq_pv_gm, off_pv_gm, logN_gm, o_prev, lse_prev, lse_gm);
        if (maskType == 0){
            fa_vec.Run<true, 0>();
        } else {
            fa_vec.Run<true, 1>();
        }
    } else {
        FlashAttentionEncoderHighPrecisionVec<half> fa_vec(sync, mask_gm, alibi_coeff_gm, o_gm, s_gm, p_gm, o_tmp_gm,
                                                           tiling_para_gm, deq_qk_gm, off_qk_gm, quant_p_gm, deq_pv_gm,
                                                           off_pv_gm, logN_gm, o_prev, lse_prev, lse_gm);
        if (maskType == 0){
            fa_vec.Run<true, 0>();
        } else {
            fa_vec.Run<true, 1>();
        }
    }
}
#endif

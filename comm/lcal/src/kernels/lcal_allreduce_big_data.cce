/*
 * Copyright (c) 2024 Huawei Technologies Co., Ltd.
 * This file is a part of the CANN Open Software.
 * Licensed under CANN Open Software License Agreement Version 1.0 (the "License").
 * Please refer to the License for details. You may not use this file except in compliance with the License.
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE.
 * See LICENSE in the root of the software repository for the full text of the License.
 */
#include "collectives.cce"

template<typename T>
__attribute__((always_inline)) inline __aicore__ void LcalAllReduceBigDataOrigin
    (__gm__ T* buff[16], __gm__ T *input, __gm__ T *output, int64_t blockNumPerGroup, uint32_t rank, uint32_t rankSize,
     uint64_t len, int64_t magic, __ubuf__ int64_t* ctrlFlagsUB, __ubuf__ int64_t* ctrlFlagsUB1,
     __ubuf__ int64_t* ctrlFlagsUB2, __ubuf__ T* inputUB[2], int64_t dataOffsetNum, int64_t flagOffset1st,
     int64_t flagOffset2nd, int64_t x, int64_t corePerRank, int64_t coreSegmentedIdx, int op)
{
    const int64_t memDmaUnitNum = MEM_DMA_UNIT_BYTE / sizeof(T);
    const int64_t singleNPUProcessDataBlockNum = (len / memDmaUnitNum) / rankSize;
    const int64_t singleNPUProcessDataNum = singleNPUProcessDataBlockNum * memDmaUnitNum;
    int64_t thisNPUProcessDataNum = singleNPUProcessDataNum;
    if (rank == rankSize - 1) {
        thisNPUProcessDataNum = len - rank * singleNPUProcessDataNum;
    }

    int64_t xNPUProcessDataNum = singleNPUProcessDataNum;
    if (x == rankSize - 1) {
        xNPUProcessDataNum = len - x * singleNPUProcessDataNum;
    }

    const int64_t xNPUCoreGroupAvgDMADataNum = (xNPUProcessDataNum / corePerRank / memDmaUnitNum) * memDmaUnitNum;
    const int64_t thisNPUCoreGroupAvgDMADataNum = (thisNPUProcessDataNum / corePerRank / memDmaUnitNum) * memDmaUnitNum;

    int64_t dataSizeRemain = xNPUCoreGroupAvgDMADataNum * sizeof(T);
    if (coreSegmentedIdx == corePerRank - 1) {
        dataSizeRemain = (xNPUProcessDataNum - coreSegmentedIdx * xNPUCoreGroupAvgDMADataNum) * sizeof(T);
    }

    int64_t buffOffsetNum = x * singleNPUProcessDataNum + coreSegmentedIdx * xNPUCoreGroupAvgDMADataNum;

    __gm__ T *receiveBuff = (__gm__ T*)((__gm__ int64_t*)buff[rank] + dataOffsetNum);
    __gm__ int64_t* ctrlFlagsGM = (__gm__ int64_t*)buff[rank] + flagOffset1st;
    __gm__ int64_t* ctrlFlagsGMX = (__gm__ int64_t*)buff[x] + flagOffset1st;
    if (GetBlockIdx() < blockNumPerGroup) {
        input2BuffRankMagic(dataSizeRemain, inputUB[0], receiveBuff, buffOffsetNum, input, buffOffsetNum, ctrlFlagsUB, ctrlFlagsGM, magic);
    } else {
        if (x == rank) {
            goto label0;
        }
        *ctrlFlagsUB = 0;
        *ctrlFlagsUB1 = 0;
        *ctrlFlagsUB2 = 0;
        ctrlFlagsGM = (__gm__ int64_t*)buff[rank] + (coreSegmentedIdx + rank * corePerRank) * MEM_DMA_UNIT_INT_NUM;
        ctrlFlagsGMX = (__gm__ int64_t*)buff[x] + (coreSegmentedIdx + rank * corePerRank) * MEM_DMA_UNIT_INT_NUM;
        __gm__ T *processOutput = (__gm__ T *)((__gm__ int64_t *)buff[rank] + dataOffsetNum);

        int64_t allDataSizeNeed2Add = thisNPUCoreGroupAvgDMADataNum * sizeof(T);
        if (coreSegmentedIdx == corePerRank - 1) {
            allDataSizeNeed2Add = (thisNPUProcessDataNum - coreSegmentedIdx * thisNPUCoreGroupAvgDMADataNum) * sizeof(T);
        }
        AscendC::PipeBarrier<PIPE_ALL>();
        while (true) {
            if (*ctrlFlagsUB >= CeilDiv(allDataSizeNeed2Add, DMA_SIZE_PER_FLAG)) {
                break;
            }

            CpGM2UB(ctrlFlagsUB1, ctrlFlagsGM, sizeof(int64_t));
            CpGM2UB(ctrlFlagsUB2, ctrlFlagsGMX, sizeof(int64_t));
            AscendC::PipeBarrier<PIPE_ALL>();

            if (*ctrlFlagsUB1 == 0 || *ctrlFlagsUB2 == 0 ||
                ((*ctrlFlagsUB1 >> 10) != (magic >> 10)) || ((*ctrlFlagsUB2 >> 10) != (magic >> 10))) {
                continue;
            }

            int64_t preparedDataGroupCount = ((*ctrlFlagsUB1 & 0x3FF) <= (*ctrlFlagsUB2 & 0x3FF)) ?
                                             (*ctrlFlagsUB1 & 0x3FF) : (*ctrlFlagsUB2 & 0x3FF);
            if (*ctrlFlagsUB >= preparedDataGroupCount) {
                continue;
            }

            buffOffsetNum = rank * singleNPUProcessDataNum + coreSegmentedIdx * thisNPUCoreGroupAvgDMADataNum;
            dataSizeRemain = (preparedDataGroupCount - *ctrlFlagsUB) * DMA_SIZE_PER_FLAG;
            if (preparedDataGroupCount * DMA_SIZE_PER_FLAG > allDataSizeNeed2Add) {
                dataSizeRemain = allDataSizeNeed2Add - *ctrlFlagsUB * DMA_SIZE_PER_FLAG;
            }
            ProcessDataNew(dataSizeRemain, inputUB, buff[x], dataOffsetNum, buffOffsetNum + (*ctrlFlagsUB) * DMA_SIZE_PER_FLAG / sizeof(T),
                        processOutput, buffOffsetNum + (*ctrlFlagsUB) * DMA_SIZE_PER_FLAG / sizeof(T), op);
            AscendC::PipeBarrier<PIPE_ALL>();

            *ctrlFlagsUB = preparedDataGroupCount;
            AscendC::PipeBarrier<PIPE_ALL>();
        }
    }
label0:
    if (GetBlockIdx() >= blockNumPerGroup) {
        SetFlag((__ubuf__ int64_t*)ctrlFlagsUB, (__gm__ int64_t*)buff[rank] + flagOffset2nd, (int64_t)magic);
        return;
    }
    AscendC::PipeBarrier<PIPE_ALL>();

    for (int64_t i = 0; i < blockNumPerGroup; i++) {
        if (i / corePerRank == x) {
            continue;
        }
        __gm__ int64_t* ctrlFlagsGMTemp = ((__gm__ int64_t*)buff[x] + (GetLcalBlockNum() + i) * MEM_DMA_UNIT_INT_NUM);
        CheckFlag((__ubuf__ int64_t*)ctrlFlagsUB, ctrlFlagsGMTemp, (int64_t)magic);
    }

    buffOffsetNum = x * singleNPUProcessDataNum + coreSegmentedIdx * xNPUCoreGroupAvgDMADataNum;
    dataSizeRemain = xNPUCoreGroupAvgDMADataNum * sizeof(T);
    if (coreSegmentedIdx == corePerRank - 1) {
        dataSizeRemain = (xNPUProcessDataNum - coreSegmentedIdx * xNPUCoreGroupAvgDMADataNum) * sizeof(T);
    }

    __gm__ T *sendBuff = (__gm__ T*)((__gm__ int64_t*)buff[x] + dataOffsetNum);
    GM2GMPingPong<T>(dataSizeRemain, inputUB, output, buffOffsetNum, sendBuff, buffOffsetNum);
}

template<typename T>
__attribute__((always_inline)) inline __aicore__ void LcalAllReduceBigData(ALLREDUCE_ARGS_FUN_16P(T))
{
    DumpLcclLogInfo(dumpAddr, LogId::OVERALL, static_cast<Op>(op));
    DumpLcclLogInfo(dumpAddr, LogId::INIT, static_cast<Op>(op));
    magic *= 1024;
    const int64_t dataOffsetNum = GetLcalBlockNum() * 2 * MEM_DMA_UNIT_INT_NUM;
    int64_t flagOffset1st = MEM_DMA_UNIT_INT_NUM * GetBlockIdx();
    __gm__ T* buff[16] = {
        buff0, buff1, buff2, buff3,
        buff4, buff5, buff6, buff7,
        buff8, buff9, buff10, buff11,
        buff12, buff13, buff14, buff15
    };
    __ubuf__ int64_t* ctrlFlagsUB = (__ubuf__ int64_t*)(0);
    __ubuf__ int64_t* ctrlFlagsUB1 = (__ubuf__ int64_t*)(32);
    __ubuf__ int64_t* ctrlFlagsUB2 = (__ubuf__ int64_t*)(64);
    __ubuf__ T* inputUB[2] = {(__ubuf__ T*)(96), (__ubuf__ T*)(97440)};

    int64_t blockNumPerGroup = GetLcalBlockNum() >> 1;
    int64_t corePerRank = blockNumPerGroup / rankSize;
    int64_t coreSegmentedIdx = GetBlockIdx() % corePerRank;
    int64_t x = GetBlockIdx() / corePerRank;
    if (GetBlockIdx() >= blockNumPerGroup) {
        x = (GetBlockIdx() - blockNumPerGroup) / corePerRank;
        flagOffset1st = (GetBlockIdx() - blockNumPerGroup) * MEM_DMA_UNIT_INT_NUM;
    }
    int64_t flagOffset2nd = GetLcalBlockNum() * MEM_DMA_UNIT_INT_NUM + flagOffset1st;
    DumpLcclLogInfo(dumpAddr, LogId::INIT, static_cast<Op>(op));

    DumpLcclLogInfo(dumpAddr, LogId::PROCESS, static_cast<Op>(op));
    int64_t ipcBuffMaxNum = IPC_BUFF_MAX_SIZE / sizeof(T);
    for (int64_t i = 0; i < CeilDiv(len, ipcBuffMaxNum); i++) {
        *ctrlFlagsUB = 0;
        *ctrlFlagsUB1 = 0;
        *ctrlFlagsUB2 = 0;
        AscendC::PipeBarrier<PIPE_ALL>();

        int64_t processedNum = i * ipcBuffMaxNum;
        int64_t remainNum = (len - processedNum < ipcBuffMaxNum) ? len - processedNum : ipcBuffMaxNum;

        PostSyncBigData<T>(ctrlFlagsUB, buff, rank, rankSize, dataOffsetNum, ipcBuffMaxNum, magic, i);
        LcalAllReduceBigDataOrigin<T>(
            buff, input + processedNum, output + processedNum, blockNumPerGroup, rank, rankSize, remainNum, (magic + i) * 1024, ctrlFlagsUB, ctrlFlagsUB1,
            ctrlFlagsUB2, inputUB, dataOffsetNum, flagOffset1st, flagOffset2nd, x, corePerRank, coreSegmentedIdx, op);
        AscendC::PipeBarrier<PIPE_ALL>();
    }
    DumpLcclLogInfo(dumpAddr, LogId::PROCESS, static_cast<Op>(op));
    DumpLcclLogInfo(dumpAddr, LogId::OVERALL, static_cast<Op>(op));
}